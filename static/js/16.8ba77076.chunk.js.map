{"version":3,"sources":["modules/profile/AccountManagement.js","modules/employee/EmployeeModal.js","modules/profile/PerformanceReview.js"],"names":["MyAccount","props","_process","loading","pending","uploading","user","appState","auth","tab","roleId","sessionStorage","getItem","dispatch","useDispatch","history","useHistory","fileInput","useRef","useState","process","setProcess","selectedFile","setSelectedFile","preview","setPreview","baseUrl","config","IS_DEV","API_URL_BASE_DEV","API_URL_BASE_LIVE","fullname","toCapitalize","firstname","middlename","lastname","_initProcess","key","val","renderContent","value","checkNull","street","city","country","includes","UploadButtonHandler","a","payload","FormData","append","employeeId","dispatchNotification","type","message","api","post","res","error","updated","data","employee_information","actionCreator","ActionTypes","FETCH_PROFILE_SUCCESS","useEffect","undefined","objectUrl","URL","createObjectURL","removeItem","revokeObjectURL","activeTab","onActiveTabChange","e","setItem","variant","className","path","mdiAccountCogOutline","size","mdiAccountStar","setWidth","gutters","alt","src","profile_img","logoSm","style","width","maxHeight","accept","file","ref","hidden","onChange","target","files","length","onClick","current","click","block","disabled","color","push","map","_field","idx","field","toString","htmlFor","readOnly","placeholder","defaultErrors","birthdate","email","mobileno","role","gender","sss","phil_health_no","pag_ibig_no","defaultEmployee","accountType","isActive","EmployeeModal","isUpdate","modal","dialog","shallowCopy","employee","createEmployee","errors","setError","setDisabled","responseError","setResponseError","handleOnChange","event","_errors","Employee","name","JSON","parse","modalOnClose","onSubmit","retrieveEmployees","ADD_EMPLOYEE","fetchEmployeeAccounts","toggle","renderFeedback","title","footer","isLoading","submit","checkRequired","RULES","required","nameRules","numberRules","ageRules","getAge","isValid","_","values","err","btnText","fluid","id","onConfirm","sm","action","method","row","xs","invalid","APP_MESSAGES","INPUT_REQUIRED","ACCOUNT_ROLES","label","category","roles","_role","stringify","status","st","PerformanceReview","reviews","fields","_style","textAlign","QUESTIONS","renderRating","rating","arr","Array","fill","i","colors","$orange","fontSize","RATINGS","xl","items","itemsPerPageSelect","itemsPerPage","hover","pagination","noItemsViewSlot","scopedSlots","month_reviewed","item","whiteSpace","c1","criteria_1","c2","criteria_2","c3","criteria_3","c4","criteria_4","c5","criteria_5","reviewer"],"mappings":"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","file":"static/js/16.8ba77076.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport { useHistory } from 'react-router-dom'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCardFooter,\r\n  CRow,\r\n  CCol,\r\n  CFormGroup,\r\n  CInput,\r\n  CLabel,\r\n  CForm,\r\n  CButton,\r\n  CSpinner,\r\n  CNav,\r\n  CNavItem,\r\n  CNavLink,\r\n  CTabContent,\r\n  CTabPane,\r\n  CTabs,\r\n} from \"@coreui/react\";\r\nimport { config } from \"utils/config\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { actionCreator, ActionTypes } from \"utils/actions\";\r\nimport { checkNull, toCapitalize, dispatchNotification } from \"utils/helpers\";\r\nimport api from \"utils/api\";\r\nimport EmployeeModal from \"modules/employee/EmployeeModal\";\r\nimport { setWidth } from \"utils/helpers\";\r\nimport res from \"assets/img\";\r\nimport Icon from \"@mdi/react\";\r\nimport { mdiAccountCogOutline, mdiAccountStar } from '@mdi/js';\r\nimport PerfomanceReview from \"./PerformanceReview\";\r\n\r\nconst MyAccount = (props) => {\r\n  let _process = {\r\n    loading: false,\r\n    pending: false,\r\n    uploading: false,\r\n  };\r\n  const user = props.appState.auth.user;\r\n  const tab = user.roleId !== 3 ? 0 : sessionStorage.getItem(\"_tab\") ? +sessionStorage.getItem(\"_tab\") : 0\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const fileInput = useRef();\r\n  const [process, setProcess] = useState(_process);\r\n  const [selectedFile, setSelectedFile] = useState();\r\n  const [preview, setPreview] = useState();\r\n  let baseUrl = `${!config.IS_DEV ? config.API_URL_BASE_LIVE : config.API_URL_BASE_DEV}/file/images`\r\n  let fullname = `${toCapitalize(user.firstname)} ${\r\n    user.middlename && toCapitalize(user.middlename) + \" \"\r\n    }${toCapitalize(user.lastname)}`\r\n  const _initProcess = (key, val) => {\r\n    _process[key] = val;\r\n    setProcess(_process);\r\n  };\r\n\r\n  const fields = [\r\n    [\"firstname\", \"middlename\", \"lastname\"],\r\n    [\"gender\", \"birthdate\", \"mobileno\", \"email\"],\r\n    [\"street\", \"city\", \"coutry\"],\r\n    [\"department\", \"role\", \"status\"],\r\n    // [\"SSS\", \"PHIL HEALTH\", \"PAG-IBIG\"],\r\n  ];\r\n\r\n  const renderContent = (key) => {\r\n    let val = user[key];\r\n    switch (key) {\r\n      case \"address\":\r\n        return {\r\n          key,\r\n          value: `${checkNull(user.street)} ,${checkNull(\r\n            user.city\r\n          )} ,${checkNull(user.country)} `,\r\n        };\r\n      case \"mobileno\":\r\n        return { key: \"Mobile No.\", value: val };\r\n      case \"mobileno\":\r\n        return { key: \"Mobile No.\", value: val };\r\n      case \"status\":\r\n        return { key: toCapitalize(key), value: \"Active\" };\r\n      case \"SSS\":\r\n        val = user['sss'] || ''\r\n      case \"PHIL HEALTH\":\r\n        val = user['phil_health_no'] || ''\r\n      case \"PAG-IBIG\":\r\n        val = user['pag_ibig_no'] || ''\r\n      default:\r\n        if (key.includes(\"name\")) {\r\n          val = toCapitalize(val);\r\n        }\r\n        return { key: toCapitalize(key), value: val };\r\n    }\r\n  };\r\n\r\n  const UploadButtonHandler = async () => {\r\n    //  call api upload\r\n    let payload = new FormData();\r\n    payload.append(\"file\", selectedFile);\r\n    payload.append(\"employee_id\", +user.employeeId);\r\n    _initProcess(\"uploading\", true);\r\n    dispatchNotification(dispatch, { type: 'info', message: 'Please wait' })\r\n    let res = await api.post(\"/update_profile/img\", payload, true);\r\n    _initProcess(\"uploading\", false);\r\n    if (!res.error) {\r\n      _initProcess(\"pending\", false);\r\n      let updated = res.data.employee_information[0];\r\n      debugger\r\n      dispatchNotification(dispatch, { type: 'success', message: 'Success' })\r\n      dispatch(actionCreator(ActionTypes.FETCH_PROFILE_SUCCESS,updated));\r\n    } else {\r\n      dispatchNotification(dispatch, { type: 'error', message: res.message })\r\n    }\r\n    return;\r\n  };\r\n  const FileInputChangeHandler = (e) => {\r\n    if (!e.target.files || e.target.files.length === 0) {\r\n      setSelectedFile(undefined);\r\n      _initProcess(\"pending\", false);\r\n      return;\r\n    }\r\n    _initProcess(\"pending\", true);\r\n    setSelectedFile(e.target.files[0]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!selectedFile) {\r\n      _initProcess(\"pending\", false);\r\n      setPreview(undefined);\r\n      return;\r\n    }\r\n    const objectUrl = URL.createObjectURL(selectedFile);\r\n    setPreview(objectUrl);\r\n\r\n    // free memory when ever this component is unmounted\r\n    return () => {\r\n      sessionStorage.removeItem('_tab')\r\n      URL.revokeObjectURL(objectUrl)\r\n    };\r\n  }, [selectedFile]);\r\n\r\n  return (\r\n    <>\r\n      <CCard>\r\n        <CCardBody>\r\n          <CTabs activeTab={tab} onActiveTabChange={(e) => {\r\n            sessionStorage.setItem(\"_tab\", e)\r\n          }}>\r\n            <CNav variant=\"tabs\" className=\"my-tabs\">\r\n              <CNavItem  >\r\n                <CNavLink>\r\n                  <Icon path={mdiAccountCogOutline} size={1} />My Profile\r\n                </CNavLink>\r\n              </CNavItem>\r\n              {\r\n                user.roleId === 3 &&\r\n                <CNavItem >\r\n                  <CNavLink>\r\n                    <Icon path={mdiAccountStar} size={1} />My Ratings\r\n                </CNavLink>\r\n                </CNavItem>\r\n              }\r\n            </CNav>\r\n            <CTabContent>\r\n              <CTabPane>\r\n                <CRow className=\"justify-content-center\">\r\n                  <CCol {...setWidth(\"12\")}>\r\n                    <CCard>\r\n                      <CCardBody>\r\n                        <CRow gutters={false} className=\"\">\r\n                          <CCol {...setWidth(\"3\")} className=\"px-1 py-1 mr-3\">\r\n                            <img\r\n                              alt={fullname}\r\n                              src={preview ? preview : user.profile_img ? `${baseUrl}/${user.profile_img}` : res.logoSm}\r\n                              style={{ width: \"100%\" ,maxHeight:'200px' }}\r\n                            />\r\n                            <input\r\n                              type=\"file\"\r\n                              accept=\"image/*\"\r\n                              value={process.file}\r\n                              ref={fileInput}\r\n                              hidden\r\n                              onChange={FileInputChangeHandler}\r\n                            />\r\n                            <CButton\r\n                              onClick={() => {\r\n                                fileInput.current.click();\r\n                              }}\r\n                              className=\"mr-1 mt-3\"\r\n                              block\r\n                              disabled={process.uploading}\r\n                              color=\"primary\"\r\n                            >\r\n                              Change Profile Image\r\n                            </CButton>\r\n                            <CButton\r\n                              onClick={UploadButtonHandler}\r\n                              className=\"mr-1 mt-3\"\r\n                              block\r\n                              disabled={\r\n                                (process.uploading && true) || (!process.pending && true)\r\n                              }\r\n                              color=\"primary\"\r\n                            >\r\n                              {process.uploading ? (\r\n                                <CSpinner color=\"secondary\" size=\"sm\" />\r\n                              ) : (\r\n                                  \"Upload\"\r\n                                )}\r\n                            </CButton>\r\n                            <CButton\r\n                              block\r\n                              className=\"mr-1 mt-3\"\r\n                              disabled={process.uploading}\r\n                              color=\"primary\"\r\n                              onClick={() => {\r\n                                history.push(\"/change-password\")\r\n                              }}\r\n                            >\r\n                              Change Password\r\n                              </CButton>\r\n                          </CCol>\r\n                          <CCol>\r\n                            <CForm>\r\n                              {fields.map((_field, idx) => {\r\n                                return (\r\n                                  <CRow key={idx} gutters={false}>\r\n                                    {_field.map((field) => {\r\n                                      let val = renderContent(field).value;\r\n                                      return (\r\n                                        <CCol\r\n                                          className=\"px-1\"\r\n                                          {...setWidth((12 / _field.length).toString())}\r\n                                          key={field}\r\n                                        >\r\n                                          <CFormGroup>\r\n                                            <CLabel htmlFor=\"name\">\r\n                                              {\" \"}\r\n                                              <strong>{renderContent(field).key} </strong>\r\n                                            </CLabel>\r\n                                            <CInput\r\n                                              readOnly\r\n                                              value={val || ''}\r\n                                              placeholder={!val ? \"UNSET\" : \"\"}\r\n                                            />\r\n                                          </CFormGroup>\r\n                                        </CCol>\r\n                                      );\r\n                                    })}\r\n                                  </CRow>\r\n                                );\r\n                              })}\r\n                            </CForm>\r\n                          </CCol>\r\n                        </CRow>\r\n                      </CCardBody>\r\n                    </CCard>\r\n                  </CCol>\r\n                </CRow>\r\n              </CTabPane>\r\n              <CTabPane>\r\n                <PerfomanceReview />\r\n              </CTabPane>\r\n            </CTabContent>\r\n          </CTabs>\r\n        </CCardBody>\r\n      </CCard>\r\n    </>\r\n  );\r\n};\r\n// }\r\n\r\nexport default MyAccount;\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { CButton, CSelect, CRow, CCol, CContainer, CForm, CFormGroup, CLabel, CInput, CInvalidFeedback, CAlert, CSpinner } from '@coreui/react'\r\nimport { Modal, LoadingButton, ConfirmDialog } from 'reusable'\r\nimport { actionCreator, ActionTypes } from 'utils/actions'\r\nimport api from \"utils/api\";\r\nimport { APP_MESSAGES, ROLE, ACCOUNT_ROLES } from 'utils/constants/constant';\r\nimport { RULES, shallowCopy, getAge } from 'utils/helpers'\r\nimport { fetchEmployeeAccounts, retrieveEmployees } from 'utils/helpers/fetch';\r\nimport _ from 'lodash';\r\n\r\nconst defaultErrors = {\r\n  firstname: false,\r\n  lastname: false,\r\n  middlename: false,\r\n  birthdate: false,\r\n  email: false,\r\n  mobileno: false,\r\n  role: false,\r\n  // department: false,\r\n  gender: false,\r\n  street: false,\r\n  city: false,\r\n  country: false,\r\n  sss: false,\r\n  phil_health_no: false,\r\n  pag_ibig_no: false,\r\n\r\n}\r\nconst defaultEmployee = {\r\n  role: null,\r\n  accountType: null,\r\n  firstname: \"\",\r\n  lastname: \"\",\r\n  middlename: \"\",\r\n  gender: \"\",\r\n  mobileno: \"\",\r\n  birthdate: \"\",\r\n  email: \"\",\r\n  street: \"\",\r\n  city: \"\",\r\n  country: \"\",\r\n  sss: \"\",\r\n  phil_health_no: \"\",\r\n  pag_ibig_no: \"\",\r\n  isActive: 1\r\n\r\n}\r\n\r\nconst EmployeeModal = ({ isUpdate = false, data = null }) => {\r\n  let dispatch = useDispatch();\r\n  const modal = useRef();\r\n  const dialog = useRef();\r\n  const [employee, createEmployee] = useState(!data ? shallowCopy(defaultEmployee) : data)\r\n  const [errors, setError] = useState(defaultErrors)\r\n  const [disabled, setDisabled] = useState(false);\r\n  const [responseError, setResponseError] = useState();\r\n\r\n  const handleOnChange = (event) => {\r\n    setResponseError('')\r\n    setError(defaultErrors)\r\n    let _errors = shallowCopy(errors)\r\n    let Employee = shallowCopy(employee)\r\n    let { name, value } = event.target\r\n    _errors[name] = false\r\n    if (name === \"role\") {\r\n      let { role, accountType } = JSON.parse(value)\r\n      Employee['role'] = role;\r\n      Employee[\"accountType\"] = +accountType;\r\n    } else {\r\n      Employee[name] = value;\r\n    }\r\n    createEmployee(Employee)\r\n  }\r\n\r\n  const validateInfo = (name, value) => {\r\n    const { ageRules, nameRules, numberRules, emailRules } = RULES\r\n    if (name === \"birthdate\") {\r\n      return ageRules(getAge(value))\r\n    }\r\n\r\n    if (['firstname', 'lastname'].includes(name)) {\r\n      return nameRules(value)\r\n    }\r\n\r\n    if (name === 'middlename' && value !== \"\") {\r\n      return nameRules(value)\r\n    } else {\r\n      return false\r\n    }\r\n\r\n    if (name === \"mobileno\") {\r\n      return numberRules(value)\r\n    }\r\n\r\n    if (name === \"email\") {\r\n      return emailRules(value)\r\n    }\r\n\r\n    if (['sss', 'phil_health_no', 'pag_ibig_no'].includes(name)) {\r\n      return false\r\n    }\r\n    return value !== \"\" || APP_MESSAGES.INPUT_REQUIRED;\r\n  }\r\n\r\n  // const addEmployee = async () => {\r\n  //     let res = await api.post(\"/create_employee\", employee)\r\n  //     if (!res.error) {\r\n  //         employee.id = res.data.id\r\n  //         dispatch(actionCreator(ActionTypes.ADD_EMPLOYEE, employee))\r\n  //     }\r\n  //     // else {\r\n  //     //     setError(res.message)\r\n  //     // }\r\n  // }\r\n  // const updateEmployee = async () => {\r\n  //     let res = await api.post(\"/create_employee\", employee)\r\n  //     if (!res.error) {\r\n  //         employee.id = res.data.id\r\n  //         dispatch(actionCreator(ActionTypes.ADD_EMPLOYEE, employee))\r\n  //     }\r\n  //     // else {\r\n  //     //     setError(res.message)\r\n  //     // }\r\n  // }\r\n\r\n  const modalOnClose = () => {\r\n    if (!isUpdate) {\r\n      createEmployee(defaultEmployee)\r\n    }\r\n    setError(defaultErrors)\r\n    setResponseError('');\r\n  }\r\n\r\n  const onSubmit = async () => {\r\n    setDisabled(true)\r\n    let path = isUpdate ? \"update_employee\" : \"create_employee\"\r\n    let payload = shallowCopy(employee)\r\n    if (isUpdate) {\r\n      payload[\"employeeId\"] = data.employeeId;\r\n    }\r\n    let res = await api.post(`/${path}`, payload)\r\n    if (!res.error) {\r\n      let fetched = await retrieveEmployees(dispatch);\r\n      if (fetched.error) {\r\n        dispatch(actionCreator(ActionTypes.ADD_EMPLOYEE, res.data.employee_information[0]))\r\n      }\r\n      await fetchEmployeeAccounts(dispatch)\r\n    } else {\r\n      setResponseError(res.message);\r\n    }\r\n    setDisabled(false)\r\n    modal.current.toggle()\r\n    modalOnClose();\r\n  }\r\n\r\n\r\n\r\n  const validate = () => {\r\n\r\n    let _errors = shallowCopy(defaultErrors)\r\n    let {\r\n      role,\r\n      firstname,\r\n      lastname,\r\n      middlename,\r\n      gender,\r\n      mobileno,\r\n      birthdate,\r\n      email,\r\n      city,\r\n      country,\r\n      pag_ibig_no,\r\n      phil_health_no,\r\n      sss\r\n    } = employee;\r\n    let checkRequired = val => RULES.required(val)\r\n    _errors['role'] = checkRequired(role);\r\n    _errors['firstname'] = RULES.nameRules(firstname);\r\n    _errors['lastname'] = RULES.nameRules(lastname);\r\n    _errors['gender'] = checkRequired(gender);\r\n    _errors['mobileno'] = RULES.numberRules(mobileno);\r\n    _errors['birthdate'] = RULES.ageRules(getAge(birthdate));\r\n    _errors['city'] = checkRequired(city);\r\n    _errors['country'] = checkRequired(country);\r\n    _errors['email'] = checkRequired(email);\r\n    _errors['middlename'] = false;\r\n    if (middlename.length) {\r\n      _errors['middlename'] = RULES.nameRules(middlename);\r\n    }\r\n    if (sss.length) {\r\n      _errors['sss'] = RULES.numberRules(sss);\r\n    }\r\n    if (phil_health_no.length) {\r\n      _errors['phil_health_no'] = RULES.numberRules(phil_health_no);\r\n    }\r\n    if (pag_ibig_no.length) {\r\n      _errors['pag_ibig_no'] = RULES.numberRules(pag_ibig_no);\r\n    }\r\n    setError(_errors)\r\n    let isValid = true;\r\n    _.values(_errors).map(err => {\r\n      if (typeof err == 'string') {\r\n        isValid = false\r\n      }\r\n    })\r\n    //valid\r\n    if (isValid) {\r\n      dialog.current.toggle()\r\n    }\r\n  }\r\n\r\n\r\n  const renderFeedback = (message) => {\r\n    return message !== false &&\r\n      <CInvalidFeedback className=\"help-block\">\r\n        {message}\r\n      </CInvalidFeedback>\r\n  }\r\n\r\n  return (\r\n    <Modal ref={modal} {...{\r\n      modalOnClose,\r\n      size: \"lg\",\r\n      title: isUpdate ? \"Update Details\" : \"Add Employee\",\r\n      color: \"warning\",\r\n      footer:\r\n        <>\r\n          <LoadingButton  {...{ isLoading: disabled, submit: validate, btnText: !isUpdate ? \"Submit\" : \"Update\" }} />\r\n          {/* <CButton\r\n                        disabled={disabled}\r\n                        onClick={validate}\r\n                        className=\"mr-1\"\r\n                        color=\"primary\">\r\n                        {\r\n                            disabled ? <CSpinner color=\"secondary\" size=\"sm\" /> : !isUpdate ? \"Submit\" : \"Update\"\r\n                        }\r\n                    </CButton> */}\r\n        </>\r\n    }}>\r\n\r\n      <CContainer fluid>\r\n        <ConfirmDialog\r\n          id=\"cutom_dialog\"\r\n          ref={dialog}\r\n          {...{\r\n            onConfirm: () => {\r\n              onSubmit();\r\n            },\r\n            title: \"Please confirm.\",\r\n          }}\r\n        ></ConfirmDialog>\r\n        <CRow>\r\n          <CCol sm=\"12\">\r\n            {responseError && responseError.length > 0 ? <CAlert color=\"danger justify-content-center text-align-center\">{responseError}</CAlert> : null}\r\n            <CForm action=\"\" method=\"post\" >\r\n              <CFormGroup row className=\"my-0\">\r\n                <CCol xs=\"4\">\r\n                  <CFormGroup>\r\n                    <CLabel>Firstname</CLabel>\r\n                    <CInput\r\n                      onChange={handleOnChange}\r\n                      name=\"firstname\"\r\n                      value={employee.firstname || \"\"}\r\n                      placeholder=\"Enter Firstname\"\r\n                      invalid={typeof errors.firstname !== 'boolean'}\r\n                    //valid={!errors.firstname} \r\n                    />\r\n                    {renderFeedback(errors.firstname)}\r\n                  </CFormGroup>\r\n                </CCol>\r\n                <CCol xs=\"4\">\r\n                  <CFormGroup>\r\n                    <CLabel>Middlename</CLabel>\r\n                    <CInput\r\n                      onChange={handleOnChange}\r\n                      name=\"middlename\"\r\n                      value={employee.middlename || \"\"}\r\n                      placeholder=\"Enter Middlename\"\r\n                      invalid={typeof errors.middlename !== 'boolean'}\r\n                    />\r\n                    {renderFeedback(errors.middlename)}\r\n\r\n                  </CFormGroup>\r\n                </CCol>\r\n                <CCol xs=\"4\">\r\n                  <CFormGroup>\r\n                    <CLabel>Lastname</CLabel>\r\n                    <CInput\r\n                      onChange={handleOnChange}\r\n                      name=\"lastname\"\r\n                      value={employee.lastname || \"\"}\r\n                      placeholder=\"Enter Lastname\"\r\n                      invalid={typeof errors.lastname !== 'boolean'}\r\n                    />\r\n                    {renderFeedback(errors.lastname)}\r\n\r\n                  </CFormGroup>\r\n                </CCol>\r\n              </CFormGroup>\r\n              <CFormGroup row className=\"my-0\">\r\n                <CCol xs=\"6\">\r\n                  <CFormGroup>\r\n                    <CLabel>Gender</CLabel>\r\n                    <CSelect onChange={handleOnChange}\r\n                      value={employee.gender}\r\n                      invalid={typeof errors.gender !== 'boolean'}\r\n                      name=\"gender\">\r\n                      {\r\n                        !employee.gender && <option value=\"\" hidden>Select Gender</option>\r\n                      }\r\n                      <option value='male'>Male</option>\r\n                      <option value='female'>Female</option>\r\n                    </CSelect>\r\n                    {renderFeedback(APP_MESSAGES.INPUT_REQUIRED)}\r\n                  </CFormGroup>\r\n                </CCol>\r\n                <CCol xs=\"6\">\r\n                  <CFormGroup>\r\n                    <CLabel>Birthdate</CLabel>\r\n                    <CInput\r\n                      type='date'\r\n                      //valid={!errors.birthdate}\r\n                      onChange={handleOnChange}\r\n                      name=\"birthdate\"\r\n                      invalid={typeof errors.birthdate !== 'boolean'}\r\n                      onChange={handleOnChange}\r\n                      value={employee.birthdate || \"\"}\r\n                      placeholder=\"Enter Birthdate..\"\r\n                    />\r\n                    {renderFeedback(errors.birthdate)}\r\n                  </CFormGroup>\r\n                </CCol>\r\n              </CFormGroup>\r\n              <CFormGroup row className=\"my-0\">\r\n                <CCol xs=\"6\">\r\n                  <CFormGroup>\r\n                    <CLabel>Role</CLabel>\r\n                    <CSelect\r\n                      onChange={handleOnChange}\r\n                      name=\"role\"\r\n                      // value={employee.role || \"\"}\r\n                      invalid={typeof errors.role !== 'boolean'}\r\n                    >\r\n                      {\r\n                        !employee.role && <option value=\"\" hidden>Select Role</option>\r\n                      }\r\n\r\n                      {ACCOUNT_ROLES.map(role => {\r\n                        return (\r\n                          <optgroup label={role.category} key={role.category}>\r\n                            {\r\n                              role.roles.map((_role, idx) => {\r\n                                return (<option value={JSON.stringify({ role: _role, accountType: role.accountType })} key={idx} >{_role}</option>)\r\n                              })\r\n                            }\r\n                          </optgroup>)\r\n\r\n                      })}\r\n                    </CSelect>\r\n                    {renderFeedback(APP_MESSAGES.INPUT_REQUIRED)}\r\n                  </CFormGroup>\r\n                </CCol>\r\n                {/* <CCol xs=\"6\">\r\n                                    <CFormGroup>\r\n                                        <CLabel>Department</CLabel>\r\n                                        <CSelect onChange={handleOnChange}\r\n                                            value={employee.department}\r\n                                            invalid={ typeof errors.department !== false}\r\n                                            name=\"department\">\r\n                                            <option value=\"\" hidden>Select Department</option>\r\n                                            {\r\n                                                departments.map(dept => <option key={dept.department_id} value={dept.department_id}>{dept.department_name}</option>)\r\n                                            }\r\n\r\n                                        </CSelect>\r\n                                        {renderFeedback(APP_MESSAGES.INPUT_REQUIRED)}\r\n                                    </CFormGroup>\r\n                                </CCol> */}\r\n                <CCol xs=\"6\">\r\n                  <CFormGroup>\r\n                    <CLabel>Mobile Number</CLabel>\r\n                    <CInput\r\n                      invalid={typeof errors.mobileno !== 'boolean'}\r\n                      //valid={!errors.mobileno}\r\n                      onChange={handleOnChange}\r\n                      name=\"mobileno\"\r\n                      value={employee.mobileno}\r\n                      placeholder=\"Enter Mobile Number..\"\r\n\r\n                    />\r\n                    {renderFeedback(errors.mobileno)}\r\n                  </CFormGroup>\r\n                </CCol>\r\n              </CFormGroup>\r\n              <CFormGroup row className=\"my-0\">\r\n\r\n                <CCol xs=\"6\">\r\n                  <CFormGroup>\r\n                    <CLabel>Email</CLabel>\r\n                    <CInput\r\n                      onChange={handleOnChange}\r\n                      name=\"email\"\r\n                      //valid={!errors.email}\r\n                      value={employee.email || \"\"}\r\n                      invalid={typeof errors.email !== 'boolean'}\r\n                      placeholder=\"Enter Email..\"\r\n\r\n                    />\r\n                    {renderFeedback(errors.email)}\r\n                  </CFormGroup>\r\n                </CCol>\r\n                <CCol xs=\"6\">\r\n                  <CFormGroup>\r\n                    <CLabel>Status</CLabel>\r\n                    <CSelect onChange={handleOnChange}\r\n                      value={employee.isActive}\r\n                      disabled={!isUpdate}\r\n                      name=\"isActive\">\r\n                      <option value=\"\" hidden>{isUpdate ? employee.isActive === 1 ? 'Active' : 'Inactive' : 'Select Status'}</option>\r\n                      {\r\n                        [{ status: 'Active', value: 1 },\r\n                        { status: 'Inctive', value: 0 }]\r\n                          .map(st => <option key={st.value} value={st.value}>{st.status}</option>)\r\n                      }\r\n                    </CSelect>\r\n                  </CFormGroup>\r\n                </CCol>\r\n              </CFormGroup>\r\n              <CFormGroup row className=\"my-0\">\r\n                <CCol xs=\"4\">\r\n                  <CFormGroup>\r\n                    <CLabel>Street</CLabel>\r\n                    <CInput\r\n                      onChange={handleOnChange}\r\n                      name=\"street\"\r\n                      //valid={!errors.street}\r\n                      invalid={typeof errors.street !== 'boolean'}\r\n                      value={employee.street || \"\"}\r\n                      placeholder=\"Enter Street..\"\r\n\r\n                    />\r\n                    {renderFeedback(APP_MESSAGES.INPUT_REQUIRED)}\r\n                  </CFormGroup>\r\n                </CCol>\r\n                <CCol xs=\"4\">\r\n                  <CFormGroup>\r\n                    <CLabel>City</CLabel>\r\n                    <CInput\r\n                      onChange={handleOnChange}\r\n                      //valid={!errors.city}\r\n                      name=\"city\"\r\n                      invalid={typeof errors.city !== 'boolean'}\r\n                      value={employee.city || \"\"}\r\n                      placeholder=\"Enter City..\"\r\n\r\n                    />\r\n                    {renderFeedback(APP_MESSAGES.INPUT_REQUIRED)}\r\n                  </CFormGroup>\r\n                </CCol>\r\n                <CCol xs=\"4\">\r\n                  <CFormGroup>\r\n                    <CLabel>Country</CLabel>\r\n                    <CInput\r\n                      onChange={handleOnChange}\r\n                      name=\"country\"\r\n                      //valid={!errors.country}\r\n                      invalid={typeof errors.country !== 'boolean'}\r\n                      value={employee.country || \"\"}\r\n                      placeholder=\"Enter Country..\"\r\n                    />\r\n                    {renderFeedback(APP_MESSAGES.INPUT_REQUIRED)}\r\n                  </CFormGroup>\r\n                </CCol>\r\n              </CFormGroup>\r\n              <CFormGroup row className=\"my-0 d-none\">\r\n                <CCol xs=\"4\">\r\n                  <CFormGroup>\r\n                    <CLabel>SSS NO.</CLabel>\r\n                    <CInput\r\n                      onChange={handleOnChange}\r\n                      name=\"sss\"\r\n                      invalid={typeof errors.sss !== 'boolean'}\r\n                      value={employee.sss || \"\"}\r\n                      placeholder=\"SSS NO.\"\r\n\r\n                    />\r\n                  </CFormGroup>\r\n                </CCol>\r\n                <CCol xs=\"4\">\r\n                  <CFormGroup>\r\n                    <CLabel>PHIL HEALTH NO.</CLabel>\r\n                    <CInput\r\n                      onChange={handleOnChange}\r\n                      invalid={typeof errors.phil_health_no !== 'boolean'}\r\n                      name=\"phil_health_no\"\r\n                      value={employee.phil_health_no || \"\"}\r\n                      placeholder=\"PHIL HEALTH NO.\"\r\n\r\n                    />\r\n                  </CFormGroup>\r\n                </CCol>\r\n                <CCol xs=\"4\">\r\n                  <CFormGroup>\r\n                    <CLabel>PAGIBIG NO.</CLabel>\r\n                    <CInput\r\n                      onChange={handleOnChange}\r\n                      invalid={typeof errors.pag_ibig_no !== 'boolean'}\r\n                      name=\"pag_ibig_no\"\r\n                      value={employee.pag_ibig_no || \"\"}\r\n                      placeholder=\"PAGIBIG NO.\"\r\n                    />\r\n                  </CFormGroup>\r\n                </CCol>\r\n              </CFormGroup>\r\n            </CForm>\r\n          </CCol>\r\n        </CRow>\r\n      </CContainer>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default EmployeeModal;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { CBadge, CCard, CCardBody, CCol, CDataTable, CCollapse, CRow, CButton } from \"@coreui/react\";\r\nimport { QUESTIONS, RATINGS } from 'utils/constants/constant'\r\nimport colors from 'assets/theme/colors';\r\nimport { NoData } from 'reusable';\r\nconst PerformanceReview = ({ reviews = [] }) => {\r\n    const fields = [\r\n        { key: 'month_reviewed', label: \"Month\", _style: { width: '10%', textAlign: 'center' } },\r\n        { key: 'c1', label: QUESTIONS[0] },\r\n        { key: 'c2', label: QUESTIONS[1] },\r\n        { key: 'c3', label: QUESTIONS[2] },\r\n        { key: 'c4', label: QUESTIONS[3] },\r\n        { key: 'c5', label: QUESTIONS[4] },\r\n        { key: 'reviewer', label: 'Reviewer', _style: { width: '10%', textAlign: 'center' } },\r\n    ]\r\n\r\n    const renderRating = rating => {\r\n        if (rating) {\r\n            let arr = new Array(rating).fill(\"x\")\r\n            return (<td >\r\n                {arr.map((i, idx) => {\r\n                    return <span key={idx} style={{ color: colors.$orange, fontSize: 20 }}> &#9733;</span>\r\n                })}\r\n                <p>{RATINGS[rating.toString()]}</p>\r\n\r\n            </td>)\r\n        }\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xl={12}>\r\n                <CCard>\r\n                    <CCardBody>\r\n                        <CDataTable\r\n                            items={reviews}\r\n                            fields={fields}\r\n                            itemsPerPageSelect\r\n                            itemsPerPage={12}\r\n                            hover\r\n                            pagination\r\n                            noItemsViewSlot={<NoData title=\"No Reviews\" />}\r\n                            scopedSlots={{\r\n                                month_reviewed: item => {\r\n                                    return <td>\r\n                                            <span style={{ whiteSpace: 'pre-line', fontSize: 20 }}>{'\\n'}</span>\r\n                                            <p>{item.month_reviewed}</p>\r\n                                        </td>\r\n                                },\r\n                                c1: item => {\r\n                                    return renderRating(item.criteria_1)\r\n                                },\r\n                                c2: item => {\r\n                                    return renderRating(item.criteria_2)\r\n                                },\r\n                                c3: item => {\r\n                                    return renderRating(item.criteria_3)\r\n                                },\r\n                                c4: item => {\r\n                                    return renderRating(item.criteria_4)\r\n                                },\r\n                                c5: item => {\r\n                                    return renderRating(item.criteria_5)\r\n                                },\r\n                                reviewer: item => {\r\n                                    return <td>\r\n                                            <span style={{ whiteSpace: 'pre-line', fontSize: 20 }}>{'\\n'}</span>\r\n                                            <p>{item.reviewer}</p>\r\n                                        </td>\r\n                                },\r\n\r\n                            }}\r\n                        />\r\n                    </CCardBody>\r\n                </CCard>\r\n            </CCol>\r\n        </CRow >\r\n    )\r\n}\r\n\r\nexport default PerformanceReview\r\n"],"sourceRoot":""}