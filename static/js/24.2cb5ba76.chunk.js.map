{"version":3,"sources":["modules/accounts/EmployeeAccount.js"],"names":["Accounts","useState","disableAccount","setDisableAccount","resetAccount","setResetAccount","enableAccount","setEnableAccount","accountDisable","setAccountDisable","accountReset","setAccountReset","accountEnable","setAccountEnable","dialog","useRef","dispatch","useDispatch","isLoading","setIsLoading","stateAccounts","useSelector","state","appState","accounts","handleDisableAccount","a","dispatchNotification","type","message","api","post","userId","employeeId","res","error","fetchEmployeeAccounts","retrieveEmployees","handleResetAccount","handleEnableAccount","useEffect","xl","ref","id","show","onConfirm","console","log","onCloseCallback","title","className","sm","color","items","fields","key","_style","width","hover","striped","itemsPerPage","pagination","noItemsViewSlot","scopedSlots","item","employee_name","employee_username","employee_accountType","isDeactivated","header","onClick","current","toggle","user","clickedEnableBtn","path","mdiAccountOffOutline","mdiAccountCheckOutline","size","horizontal","vertical","rotate","colors","$red","$green","isPasswordChanged","mdiLockReset","$orange","$grey"],"mappings":"uPAsPeA,UAjOE,WAAO,IAAD,EAEuBC,oBAAS,GAFhC,mBAEdC,EAFc,KAEEC,EAFF,OAGmBF,oBAAS,GAH5B,mBAGdG,EAHc,KAGAC,EAHA,OAIqBJ,oBAAS,GAJ9B,mBAIdK,EAJc,KAICC,EAJD,OAKuBN,mBAAS,IALhC,mBAKdO,EALc,KAKEC,EALF,OAMmBR,mBAAS,IAN5B,mBAMdS,EANc,KAMAC,EANA,OAOqBV,mBAAS,IAP9B,mBAOdW,EAPc,KAOCC,EAPD,KAQfC,EAASC,mBACTC,EAAWC,cATI,EAUahB,oBAAS,GAVtB,mBAUdiB,EAVc,KAUHC,EAVG,KAWfC,EAAgBC,aAAY,SAACC,GACjC,OAAOA,EAAMC,SAASC,SAASA,YAgC3BC,EAAoB,uCAAG,4BAAAC,EAAA,6DAC3BP,GAAa,GACbQ,YAAqBX,EAAU,CAAEY,KAAM,OAAQC,QAAS,iBAF7B,SAGXC,IAAIC,KAAK,4BAA6B,CAAEC,OAAQxB,EAAewB,OAAQC,WAAYzB,EAAeyB,aAHvF,OAGvBC,EAHuB,OAI3Bf,GAAa,GACRe,EAAIC,MAKPR,YAAqBX,EAAU,CAAEY,KAAM,QAASC,QAASK,EAAIL,WAJ7DF,YAAqBX,EAAU,CAAEY,KAAM,UAAWC,QAAS,YAC3DO,YAAsBpB,GACtBqB,YAAkBrB,IAIpBb,GAAkB,GAZS,2CAAH,qDAepBmC,EAAkB,uCAAG,4BAAAZ,EAAA,6DACzBP,GAAa,GACbQ,YAAqBX,EAAU,CAAEY,KAAM,OAAQC,QAAS,iBAF/B,SAGTC,IAAIC,KAAK,0BAA2B,CAAEC,OAAQtB,EAAasB,SAHlD,OAGrBE,EAHqB,OAIzBf,GAAa,GACRe,EAAIC,MAKPR,YAAqBX,EAAU,CAAEY,KAAM,QAASC,QAASK,EAAIL,WAJ7DF,YAAqBX,EAAU,CAAEY,KAAM,UAAWC,QAAS,YAC3DO,YAAsBpB,GACtBqB,YAAkBrB,IAIpBX,GAAgB,GAZS,2CAAH,qDAelBkC,EAAmB,uCAAG,4BAAAb,EAAA,6DAC1BP,GAAa,GACbQ,YAAqBX,EAAU,CAAEY,KAAM,OAAQC,QAAS,iBAF9B,SAGVC,IAAIC,KAAK,2BAA4B,CAAEC,OAAQpB,EAAcoB,OAAQC,WAAYrB,EAAcqB,aAHrF,OAGtBC,EAHsB,OAI1Bf,GAAa,GACRe,EAAIC,MAKPR,YAAqBX,EAAU,CAAEY,KAAM,QAASC,QAASK,EAAIL,WAJ7DF,YAAqBX,EAAU,CAAEY,KAAM,UAAWC,QAAS,YAC3DO,YAAsBpB,GACtBqB,YAAkBrB,IAIpBT,GAAiB,GAZS,2CAAH,qDAgCzB,OAJAiC,qBAAU,cAEP,CAAChC,EAAgBE,EAAcE,IAGhC,kBAAC,KAAD,KACE,kBAAC,IAAD,CAAM6B,GAAI,IACR,kBAAC,IAAD,eACEC,IAAK5B,EACL6B,GAAG,iBACC,CACFC,KAAM9B,EACN+B,UAAW,WACT3C,EAAiBuB,IAAyBrB,EAAekC,IAAuBhC,EAAgBiC,IAAwBO,QAAQC,OAElIC,gBAAiB,WACf7C,GAAkB,GAClBE,GAAgB,GAChBE,GAAiB,IAEnB0C,MAAM,mBAAD,OAAqB/C,EAAiB,aAAeE,EAAe,QAAUE,EAAgB,WAAa,GAA3G,qBAIT,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,KAAD,CAAM4C,UAAU,QACd,kBAAC,IAAD,CAAMC,GAAG,KACP,wBAAID,UAAU,mBAAd,aAGF,kBAAC,IAAD,CAAMC,GAAG,KACP,yBAAKD,UAAU,eAEXhC,GAAa,kBAAC,KAAD,CAAUkC,MAAM,eAKrC,kBAAC,IAAD,CACEC,MAAOjC,EACPkC,OA7HG,CACb,CAAEC,IAAK,OAAQC,OAAQ,CAAEC,MAAO,QAChC,CAAEF,IAAK,WAAYC,OAAQ,CAAEC,MAAO,QACpC,CAAEF,IAAK,eAAgBC,OAAQ,CAAEC,MAAO,QACxC,CAAEF,IAAK,SAAUC,OAAQ,CAAEC,MAAO,QAClC,CAAEF,IAAK,SAAUC,OAAQ,CAAEC,MAAO,SAyHxBC,OAAK,EACLC,SAAO,EACPC,aAAc,GACdC,YAAU,EACVC,gBAAiB,kBAAC,IAAD,MAEjBC,YAAa,CACX,KACE,SAACC,GAAD,OACE,sCACMA,EAAKC,iBAGf,SACE,SAACD,GAAD,OACE,sCACMA,EAAKE,qBAGf,eACE,SAACF,GAAD,OACE,4BACiC,IAA9BA,EAAKG,qBAA6B,qBAAqD,IAA9BH,EAAKG,qBAA6B,WAAa,UAG/G,OACE,SAACH,GAAD,OACE,4BACE,kBAAC,IAAD,CAAQZ,MAA8B,IAAvBY,EAAKI,cAAsB,UAAY,UAC5B,IAAvBJ,EAAKI,cAAsB,YAAc,iBAIlD,OACE,SAACJ,GAAD,OACE,4BACE,kBAAC,KAAD,CAAUK,OAAM,UAA4B,IAAvBL,EAAKI,cAAsB,aAAe,WAA/C,aACd,kBAAC,IAAD,CAASE,QAAS,WACO,IAAvBN,EAAKI,eA3J3B3D,EA2JmEuD,GA1JnElD,EAAOyD,QAAQC,SACfrE,GAAkB,IAGK,SAACsE,GACxB5D,EAAiB4D,GACjB3D,EAAOyD,QAAQC,SACfjE,GAAiB,GAmJ0DmE,CAAiBV,KAEtE,kBAAC,IAAD,CAAMW,KAA6B,IAAvBX,EAAKI,cAAsBQ,IAAuBC,IAC5DC,KAAM,EACNC,YAAU,EACVC,UAAQ,EACRC,OAAQ,IACR7B,MAA8B,IAAvBY,EAAKI,cAAsBc,IAAOC,KAAOD,IAAOE,WAKpC,IAAvBpB,EAAKI,eACL,kBAAC,KAAD,CAAUC,OAAmC,IAA3BL,EAAKqB,kBAA0B,iBAAmB,sBAClE,kBAAC,IAAD,CACEf,QAAS,WACwB,IAA3BN,EAAKqB,oBA/JnC1E,EAgK4CqD,GA/J5ClD,EAAOyD,QAAQC,SACfnE,GAAgB,MAkKQ,kBAAC,IAAD,CAAMsE,KAAMW,IACVR,KAAM,EACNC,YAAU,EACVC,UAAQ,EACRC,OAAQ,IACR7B,MAAkC,IAA3BY,EAAKqB,kBAA0BH,IAAOK,QAAUL,IAAOM","file":"static/js/24.2cb5ba76.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {\r\n  CBadge,\r\n  CCard,\r\n  CCardBody,\r\n  CCol,\r\n  CDataTable,\r\n  CRow,\r\n  CButton,\r\n  CSpinner,\r\n  CPopover\r\n} from '@coreui/react'\r\nimport { NoData, ConfirmDialog } from 'reusable'\r\nimport Icon from '@mdi/react';\r\nimport { mdiAccountOffOutline, mdiLockReset, mdiAccountCheckOutline, mdiInformation } from '@mdi/js';\r\nimport colors from 'assets/theme/colors';\r\nimport { fetchEmployeeAccounts, retrieveEmployees } from 'utils/helpers/fetch';\r\nimport api from 'utils/api';\r\nimport { dispatchNotification } from 'utils/helpers'\r\n\r\nconst Accounts = () => {\r\n\r\n  const [disableAccount, setDisableAccount] = useState(false)\r\n  const [resetAccount, setResetAccount] = useState(false)\r\n  const [enableAccount, setEnableAccount] = useState(false)\r\n  const [accountDisable, setAccountDisable] = useState({})\r\n  const [accountReset, setAccountReset] = useState({})\r\n  const [accountEnable, setAccountEnable] = useState({})\r\n  const dialog = useRef();\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const stateAccounts = useSelector((state) => {\r\n    return state.appState.accounts.accounts\r\n    // .filter(emp => {\r\n    //   return emp.employeeId !== state.appState.auth.user.employeeId\r\n    // })\r\n  });\r\n\r\n  const fields = [\r\n    { key: 'name', _style: { width: '25%' } },\r\n    { key: 'username', _style: { width: '20%' } },\r\n    { key: 'account type', _style: { width: '20%' } },\r\n    { key: 'status', _style: { width: '20%' } },\r\n    { key: 'action', _style: { width: '20%' } },\r\n  ]\r\n\r\n  const clickedDisableBtn = (user) => { // Disable Account Button\r\n    setAccountDisable(user)\r\n    dialog.current.toggle()\r\n    setDisableAccount(true)\r\n  }\r\n\r\n  const clickedEnableBtn = (user) => { // Enable Account Button\r\n    setAccountEnable(user)\r\n    dialog.current.toggle()\r\n    setEnableAccount(true)\r\n  }\r\n\r\n  const clickedResetBtn = (user) => { // Reset Account Button\r\n    setAccountReset(user)\r\n    dialog.current.toggle()\r\n    setResetAccount(true)\r\n  }\r\n\r\n  const handleDisableAccount = async () => {\r\n    setIsLoading(true)\r\n    dispatchNotification(dispatch, { type: 'info', message: \"Please wait.\" })\r\n    let res = await api.post('/disable_employee_account', { userId: accountDisable.userId, employeeId: accountDisable.employeeId })\r\n    setIsLoading(false)\r\n    if (!res.error) {\r\n      dispatchNotification(dispatch, { type: 'success', message: 'Success' })\r\n      fetchEmployeeAccounts(dispatch)\r\n      retrieveEmployees(dispatch)\r\n    } else {\r\n      dispatchNotification(dispatch, { type: 'error', message: res.message })\r\n    }\r\n    setDisableAccount(false)\r\n  }\r\n\r\n  const handleResetAccount = async () => { // Lacking\r\n    setIsLoading(true)\r\n    dispatchNotification(dispatch, { type: 'info', message: \"Please wait.\" })\r\n    let res = await api.post('/reset_employee_account', { userId: accountReset.userId })\r\n    setIsLoading(false)\r\n    if (!res.error) {\r\n      dispatchNotification(dispatch, { type: 'success', message: 'Success' })\r\n      fetchEmployeeAccounts(dispatch)\r\n      retrieveEmployees(dispatch)\r\n    } else {\r\n      dispatchNotification(dispatch, { type: 'error', message: res.message })\r\n    }\r\n    setResetAccount(false)\r\n  }\r\n\r\n  const handleEnableAccount = async () => {\r\n    setIsLoading(true)\r\n    dispatchNotification(dispatch, { type: 'info', message: \"Please wait.\" })\r\n    let res = await api.post('/enable_employee_account', { userId: accountEnable.userId, employeeId: accountEnable.employeeId})\r\n    setIsLoading(false)\r\n    if (!res.error) {\r\n      dispatchNotification(dispatch, { type: 'success', message: 'Success' })\r\n      fetchEmployeeAccounts(dispatch)\r\n      retrieveEmployees(dispatch)\r\n    } else {\r\n      dispatchNotification(dispatch, { type: 'error', message: res.message })\r\n    }\r\n    setEnableAccount(false)\r\n\r\n  }\r\n\r\n  const _renderIcon = () => {\r\n    return (<>\r\n      {[1,2].map((i) => {\r\n        return (\r\n          <h6 key={i} className=\"card-title mb-0\">\r\n            <Icon path={mdiInformation} size={0.8} />test\r\n          </h6>\r\n        )\r\n      })}\r\n    </>)\r\n  }\r\n\r\n  useEffect(() => {\r\n    return\r\n  }, [accountDisable, accountReset, accountEnable])\r\n\r\n  return (\r\n    <CRow>\r\n      <CCol xl={12}>\r\n        <ConfirmDialog\r\n          ref={dialog}\r\n          id=\"custom_dialog\"\r\n          {...{\r\n            show: dialog,\r\n            onConfirm: () => {\r\n              disableAccount ? handleDisableAccount() : resetAccount ? handleResetAccount() : enableAccount ? handleEnableAccount() : console.log()\r\n            },\r\n            onCloseCallback: () => {\r\n              setDisableAccount(false)\r\n              setResetAccount(false)\r\n              setEnableAccount(false)\r\n            },\r\n            title: `Are you sure to ${disableAccount ? \"deactivate\" : resetAccount ? \"reset\" : enableAccount ? \"activate\" : \"\"} this account?`\r\n          }}\r\n        >\r\n        </ConfirmDialog>\r\n        <CCard>\r\n          <CCardBody>\r\n            <CRow className=\"mb-3\">\r\n              <CCol sm=\"5\">\r\n                <h4 className=\"card-title mb-0\">Accounts\r\n                </h4>\r\n              </CCol>\r\n              <CCol sm=\"7\">\r\n                <div className=\"float-right\">\r\n                  {\r\n                    isLoading && <CSpinner color=\"primary\" />\r\n                  }\r\n                </div>\r\n              </CCol>\r\n            </CRow>\r\n            <CDataTable\r\n              items={stateAccounts}\r\n              fields={fields}\r\n              hover\r\n              striped\r\n              itemsPerPage={10}\r\n              pagination\r\n              noItemsViewSlot={<NoData />}\r\n              // activePage={page}\r\n              scopedSlots={{\r\n                'name':\r\n                  (item) => (\r\n                    <td>\r\n                      {`${item.employee_name}`}\r\n                    </td>\r\n                  ),\r\n                'username':\r\n                  (item) => (\r\n                    <td>\r\n                      {`${item.employee_username}`}\r\n                    </td>\r\n                  ),\r\n                'account type':\r\n                  (item) => (\r\n                    <td>\r\n                      {item.employee_accountType === 2 ? \"Manager/Supervisor\" : item.employee_accountType === 3 ? \"Employee\" : \"Admin\"}\r\n                    </td>\r\n                  ),\r\n                'status':\r\n                  (item) => (\r\n                    <td>\r\n                      <CBadge color={item.isDeactivated === 0 ? \"success\" : \"danger\"}>\r\n                        {item.isDeactivated === 0 ? \"Activated\" : \"Deactivated\"}\r\n                      </CBadge>\r\n                    </td>\r\n                  ),\r\n                'action':\r\n                  (item) => (\r\n                    <td>\r\n                      <CPopover header={`${item.isDeactivated === 0 ? \"Deactivate\" : \"Activate\"} Account`}>\r\n                        <CButton onClick={() => {\r\n                          item.isDeactivated === 0 ? clickedDisableBtn(item) : clickedEnableBtn(item)\r\n                        }}>\r\n                          <Icon path={item.isDeactivated === 0 ? mdiAccountOffOutline : mdiAccountCheckOutline}\r\n                            size={1}\r\n                            horizontal\r\n                            vertical\r\n                            rotate={180}\r\n                            color={item.isDeactivated === 0 ? colors.$red : colors.$green}\r\n                          />\r\n                        </CButton>\r\n                      </CPopover>\r\n                      {\r\n                        item.isDeactivated === 0 &&\r\n                        <CPopover header={item.isPasswordChanged !== 0 ? \"Reset Password\" : \"Unchanged Password\"}>\r\n                          <CButton\r\n                            onClick={() => {\r\n                              if (item.isPasswordChanged !== 0) {\r\n                                clickedResetBtn(item)\r\n                              }\r\n                            }}\r\n                          >\r\n                            <Icon path={mdiLockReset}\r\n                              size={1}\r\n                              horizontal\r\n                              vertical\r\n                              rotate={180}\r\n                              color={item.isPasswordChanged !== 0 ? colors.$orange : colors.$grey}\r\n                            />\r\n                          </CButton>\r\n                        </CPopover>\r\n\r\n                      }\r\n                    </td>\r\n                  )\r\n              }}\r\n            />\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow >\r\n  )\r\n}\r\n\r\nexport default Accounts\r\n"],"sourceRoot":""}