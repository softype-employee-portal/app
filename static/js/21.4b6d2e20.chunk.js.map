{"version":3,"sources":["modules/employee/Employees.js","modules/employee/EmployeeModal.js"],"names":["getBadge","status","headers","key","_classes","_style","width","label","sorter","filter","Users","props","history","location","user","appState","auth","usersData","employee","employees","emp","employeeId","queryPage","search","match","currentPage","Number","useState","page","setPage","useEffect","xl","className","sm","accountType","retrieveEmployees","items","fields","hover","itemsPerPage","activePage","pagination","noItemsViewSlot","onPageChange","e","newPage","push","clickableRows","onRowClick","scopedSlots","item","toCapitalize","lastname","firstname","middlename","department_name","department_nameM","department_nameH","color","isActive","defaultErrors","birthdate","email","mobileno","role","gender","street","city","country","sss","phil_health_no","pag_ibig_no","defaultEmployee","EmployeeModal","isUpdate","data","dispatch","useDispatch","modal","useRef","dialog","shallowCopy","createEmployee","errors","setError","disabled","setDisabled","responseError","setResponseError","handleOnChange","event","_errors","Employee","target","name","value","JSON","parse","modalOnClose","onSubmit","a","path","payload","api","post","res","error","actionCreator","ActionTypes","ADD_EMPLOYEE","employee_information","fetchEmployeeAccounts","message","current","toggle","renderFeedback","ref","size","title","footer","isLoading","submit","checkRequired","val","RULES","required","nameRules","numberRules","ageRules","getAge","length","isValid","_","values","map","err","btnText","fluid","id","onConfirm","action","method","row","xs","onChange","placeholder","invalid","hidden","APP_MESSAGES","INPUT_REQUIRED","type","ACCOUNT_ROLES","category","roles","_role","idx","stringify","st"],"mappings":"6KAeMA,EAAW,SAAAC,GACb,OAAQA,GACJ,KAAK,EAAG,MAAO,UACf,KAAK,EAAG,MAAO,cAGnBC,EAAU,CAEV,CAAEC,IAAK,OAAQC,SAAU,mBAAoBC,OAAQ,CAAEC,MAAO,QAC9D,CAAEH,IAAK,WAAYI,MAAO,aAAcF,OAAQ,CAAEC,MAAO,QACzD,CAAEH,IAAK,QAASE,OAAQ,CAAEC,MAAO,QACjC,CACIH,IAAK,OACLI,MAAO,WACPC,QAAQ,EACRC,QAAQ,GAEZ,SACA,YACA,CAAEN,IAAK,kBAAmBI,MAAO,cACjC,CAAEJ,IAAK,WAAYI,MAAO,WAoFfG,UAjFD,SAACC,GAAW,IACdC,EAAsBD,EAAtBC,QAASC,EAAaF,EAAbE,SACXC,EAAOH,EAAMI,SAASC,KAAKF,KAC3BG,EAAYN,EAAMI,SAASG,SAASC,UAAUV,QAAO,SAAAW,GAAG,OAAIA,EAAIC,aAAeP,EAAKO,cACpFC,EAAYT,EAASU,OAAOC,MAAM,gBAAiB,IACnDC,EAAcC,OAAOJ,GAAaA,EAAU,GAAKA,EAAU,GAAK,GALjD,EAMGK,mBAASF,GANZ,mBAMdG,EANc,KAMRC,EANQ,KAcrB,OAJAC,qBAAU,WACNL,IAAgBG,GAAQC,EAAQJ,KACjC,CAACA,EAAaG,IAGb,kBAAC,KAAD,KACI,kBAAC,IAAD,CAAMG,GAAI,IACN,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,KAAD,CAAMC,UAAU,QACZ,kBAAC,IAAD,CAAMC,GAAG,KACL,wBAAID,UAAU,mBAAd,cAGmB,IAArBlB,EAAKoB,YACL,kBAAC,IAAD,CAAMD,GAAG,IAAID,UAAU,qBACrB,yBAAKA,UAAU,eACX,kBAAC,IAAD,CAAeG,kBAAmBxB,EAAMwB,sBAG7C,IAGP,kBAAC,IAAD,CACIC,MAAOnB,EACPoB,OAAQnC,EACRoC,OAAK,EACLC,aAAc,GACdC,WAAYZ,EACZa,YAAU,EACVC,gBAAiB,kBAAC,IAAD,MACjBC,aAAc,SAACC,GAlCpB,IAAAC,EACfpB,KADeoB,EAmCoBD,IAlCRhC,EAAQkC,KAAR,0BAAgCD,KAoCvCE,eAAa,EACbC,WAAY,SAAC5B,GACTR,EAAQkC,KAAR,6BAAmC1B,EAAIC,cAE3C4B,YAAa,CACT,KACI,SAACC,GAAD,OACI,sCACQC,YAAaD,EAAKE,UAD1B,aACwCD,YAAaD,EAAKG,WAD1D,YACwEF,YAAaD,EAAKI,YAAcJ,EAAKI,WAAW,IAAM,OAGtI,gBACI,SAACJ,GACG,OACI,4BACKA,EAAKK,gBAAkBL,EAAKK,gBAAkBL,EAAKM,iBAAoBN,EAAKM,iBAAmBN,EAAKO,iBAAoBP,EAAKO,iBAAmB,uCAIjK,SACI,SAACP,GAAD,OACI,4BACI,kBAAC,IAAD,CAAQQ,MAAO1D,EAASkD,EAAKS,WACN,IAAlBT,EAAKS,SAAiB,SAAW,uB,8KC9F5EC,EAAgB,CACpBP,WAAW,EACXD,UAAU,EACVE,YAAY,EACZO,WAAW,EACXC,OAAO,EACPC,UAAU,EACVC,MAAM,EAENC,QAAQ,EACRC,QAAQ,EACRC,MAAM,EACNC,SAAS,EACTC,KAAK,EACLC,gBAAgB,EAChBC,aAAa,GAGTC,EAAkB,CACtBR,KAAM,KACN9B,YAAa,KACbmB,UAAW,GACXD,SAAU,GACVE,WAAY,GACZW,OAAQ,GACRF,SAAU,GACVF,UAAW,GACXC,MAAO,GACPI,OAAQ,GACRC,KAAM,GACNC,QAAS,GACTC,IAAK,GACLC,eAAgB,GAChBC,YAAa,GACbZ,SAAU,GA8dGc,IA1dO,SAAC,GAAuC,IAAD,MAApCC,gBAAoC,aAAlBC,YAAkB,MAAX,KAAW,EACvDC,EAAWC,cACTC,EAAQC,mBACRC,EAASD,mBAH4C,EAIxBpD,mBAAUgD,GAAOM,YAAYT,IAJL,mBAIpDtD,EAJoD,KAI1CgE,EAJ0C,OAKhCvD,mBAASiC,GALuB,mBAKpDuB,EALoD,KAK5CC,EAL4C,OAM3BzD,oBAAS,GANkB,mBAMpD0D,EANoD,KAM1CC,EAN0C,OAOjB3D,qBAPiB,mBAOpD4D,EAPoD,KAOrCC,EAPqC,KASrDC,EAAiB,SAACC,GACtBF,EAAiB,IACjBJ,EAASxB,GACT,IAAI+B,EAAUV,YAAYE,GACtBS,EAAWX,YAAY/D,GAJK,EAKVwE,EAAMG,OAAtBC,EAL0B,EAK1BA,KAAMC,EALoB,EAKpBA,MAEZ,GADAJ,EAAQG,IAAQ,EACH,SAATA,EAAiB,CAAC,IAAD,EACSE,KAAKC,MAAMF,GAAjC/B,EADa,EACbA,KAAM9B,EADO,EACPA,YACZ0D,EAAQ,KAAW5B,EACnB4B,EAAQ,aAAmB1D,OAE3B0D,EAASE,GAAQC,EAEnBb,EAAeU,IAsDXM,EAAe,WACdxB,GACHQ,EAAeV,GAEjBY,EAASxB,GACT4B,EAAiB,KAGbW,EAAQ,uCAAG,gCAAAC,EAAA,6DACfd,GAAY,GACRe,EAAO3B,EAAW,kBAAoB,kBACtC4B,EAAUrB,YAAY/D,GACtBwD,IACF4B,EAAO,WAAiB3B,EAAKtD,YALhB,SAOCkF,IAAIC,KAAJ,WAAaH,GAAQC,GAPtB,WAOXG,EAPW,QAQNC,MARM,kCASOvE,YAAkByC,GATzB,sBAUD8B,OACV9B,EAAS+B,YAAcC,IAAYC,aAAcJ,EAAI9B,KAAKmC,qBAAqB,KAXpE,UAaPC,YAAsBnC,GAbf,gCAebY,EAAiBiB,EAAIO,SAfR,QAiBf1B,GAAY,GACZR,EAAMmC,QAAQC,SACdhB,IAnBe,4CAAH,qDA+ERiB,EAAiB,SAACH,GACtB,OAAmB,IAAZA,GACL,kBAAC,IAAD,CAAkBhF,UAAU,cACzBgF,IAIP,OACE,kBAAC,IAAD,eAAOI,IAAKtC,GAAW,CACrBoB,eACAmB,KAAM,KACNC,MAAO5C,EAAW,iBAAmB,eACrChB,MAAO,UACP6D,OACE,oCACE,kBAAC,IAAmB,CAAEC,UAAWnC,EAAUoC,OAtElC,WAEf,IAAI9B,EAAUV,YAAYrB,GAExBI,EAaE9C,EAbF8C,KACAX,EAYEnC,EAZFmC,UACAD,EAWElC,EAXFkC,SACAE,EAUEpC,EAVFoC,WACAW,EASE/C,EATF+C,OACAF,EAQE7C,EARF6C,SACAF,EAOE3C,EAPF2C,UACAC,EAME5C,EANF4C,MACAK,EAKEjD,EALFiD,KACAC,EAIElD,EAJFkD,QACAG,EAGErD,EAHFqD,YACAD,EAEEpD,EAFFoD,eACAD,EACEnD,EADFmD,IAEEqD,EAAgB,SAAAC,GAAG,OAAIC,IAAMC,SAASF,IAC1ChC,EAAO,KAAW+B,EAAc1D,GAChC2B,EAAO,UAAgBiC,IAAME,UAAUzE,GACvCsC,EAAO,SAAeiC,IAAME,UAAU1E,GACtCuC,EAAO,OAAa+B,EAAczD,GAClC0B,EAAO,SAAeiC,IAAMG,YAAYhE,GACxC4B,EAAO,UAAgBiC,IAAMI,SAASC,YAAOpE,IAC7C8B,EAAO,KAAW+B,EAAcvD,GAChCwB,EAAO,QAAc+B,EAActD,GACnCuB,EAAO,MAAY+B,EAAc5D,GACjC6B,EAAO,YAAiB,EACpBrC,EAAW4E,SACbvC,EAAO,WAAiBiC,IAAME,UAAUxE,IAEtCe,EAAI6D,SACNvC,EAAO,IAAUiC,IAAMG,YAAY1D,IAEjCC,EAAe4D,SACjBvC,EAAO,eAAqBiC,IAAMG,YAAYzD,IAE5CC,EAAY2D,SACdvC,EAAO,YAAkBiC,IAAMG,YAAYxD,IAE7Ca,EAASO,GACT,IAAIwC,GAAU,EACdC,IAAEC,OAAO1C,GAAS2C,KAAI,SAAAC,GACF,iBAAPA,IACTJ,GAAU,MAIVA,GACFnD,EAAOiC,QAAQC,UAoBkDsB,QAAU9D,EAAsB,SAAX,cAatF,kBAAC,IAAD,CAAY+D,OAAK,GACf,kBAAC,IAAD,eACEC,GAAG,eACHtB,IAAKpC,GACD,CACF2D,UAAW,WACTxC,KAEFmB,MAAO,qBAGX,kBAAC,KAAD,KACE,kBAAC,IAAD,CAAMrF,GAAG,MACNsD,GAAiBA,EAAc2C,OAAS,EAAI,kBAAC,IAAD,CAAQxE,MAAM,mDAAmD6B,GAA0B,KACxI,kBAAC,IAAD,CAAOqD,OAAO,GAAGC,OAAO,QACtB,kBAAC,IAAD,CAAYC,KAAG,EAAC9G,UAAU,QACxB,kBAAC,IAAD,CAAM+G,GAAG,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,kBACA,kBAAC,IAAD,CACEC,SAAUvD,EACVK,KAAK,YACLC,MAAO7E,EAASmC,WAAa,GAC7B4F,YAAY,kBACZC,QAAqC,mBAArB/D,EAAO9B,YAGxB8D,EAAehC,EAAO9B,aAG3B,kBAAC,IAAD,CAAM0F,GAAG,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,mBACA,kBAAC,IAAD,CACEC,SAAUvD,EACVK,KAAK,aACLC,MAAO7E,EAASoC,YAAc,GAC9B2F,YAAY,mBACZC,QAAsC,mBAAtB/D,EAAO7B,aAExB6D,EAAehC,EAAO7B,cAI3B,kBAAC,IAAD,CAAMyF,GAAG,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,iBACA,kBAAC,IAAD,CACEC,SAAUvD,EACVK,KAAK,WACLC,MAAO7E,EAASkC,UAAY,GAC5B6F,YAAY,iBACZC,QAAoC,mBAApB/D,EAAO/B,WAExB+D,EAAehC,EAAO/B,aAK7B,kBAAC,IAAD,CAAY0F,KAAG,EAAC9G,UAAU,QACxB,kBAAC,IAAD,CAAM+G,GAAG,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,eACA,kBAAC,KAAD,CAASC,SAAUvD,EACjBM,MAAO7E,EAAS+C,OAChBiF,QAAkC,mBAAlB/D,EAAOlB,OACvB6B,KAAK,WAEF5E,EAAS+C,QAAU,4BAAQ8B,MAAM,GAAGoD,QAAM,GAAvB,iBAEtB,4BAAQpD,MAAM,QAAd,QACA,4BAAQA,MAAM,UAAd,WAEDoB,EAAeiC,IAAaC,kBAGjC,kBAAC,IAAD,CAAMN,GAAG,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,kBACA,kBAAC,KAAD,GACEO,KAAK,OAELN,SAAUvD,EACVK,KAAK,YACLoD,QAAqC,mBAArB/D,EAAOtB,WALzB,yBAMY4B,GANZ,sBAOSvE,EAAS2C,WAAa,IAP/B,4BAQc,qBARd,IAUCsD,EAAehC,EAAOtB,cAI7B,kBAAC,IAAD,CAAYiF,KAAG,EAAC9G,UAAU,QACxB,kBAAC,IAAD,CAAM+G,GAAG,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,aACA,kBAAC,KAAD,CACEC,SAAUvD,EACVK,KAAK,OAELoD,QAAgC,mBAAhB/D,EAAOnB,OAGpB9C,EAAS8C,MAAQ,4BAAQ+B,MAAM,GAAGoD,QAAM,GAAvB,eAGnBI,IAAcjB,KAAI,SAAAtE,GACjB,OACE,8BAAUzD,MAAOyD,EAAKwF,SAAUrJ,IAAK6D,EAAKwF,UAEtCxF,EAAKyF,MAAMnB,KAAI,SAACoB,EAAOC,GACrB,OAAQ,4BAAQ5D,MAAOC,KAAK4D,UAAU,CAAE5F,KAAM0F,EAAOxH,YAAa8B,EAAK9B,cAAgB/B,IAAKwJ,GAAOD,WAO9GvC,EAAeiC,IAAaC,kBAmBjC,kBAAC,IAAD,CAAMN,GAAG,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,sBACA,kBAAC,IAAD,CACEG,QAAoC,mBAApB/D,EAAOpB,SAEvBiF,SAAUvD,EACVK,KAAK,WACLC,MAAO7E,EAAS6C,SAChBkF,YAAY,0BAGb9B,EAAehC,EAAOpB,aAI7B,kBAAC,IAAD,CAAY+E,KAAG,EAAC9G,UAAU,QAExB,kBAAC,IAAD,CAAM+G,GAAG,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,cACA,kBAAC,IAAD,CACEC,SAAUvD,EACVK,KAAK,QAELC,MAAO7E,EAAS4C,OAAS,GACzBoF,QAAiC,mBAAjB/D,EAAOrB,MACvBmF,YAAY,kBAGb9B,EAAehC,EAAOrB,SAG3B,kBAAC,IAAD,CAAMiF,GAAG,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,eACA,kBAAC,KAAD,CAASC,SAAUvD,EACjBM,MAAO7E,EAASyC,SAChB0B,UAAWX,EACXoB,KAAK,YACL,4BAAQC,MAAM,GAAGoD,QAAM,GAAEzE,EAAiC,IAAtBxD,EAASyC,SAAiB,SAAW,WAAa,iBAEpF,CAAC,CAAE1D,OAAQ,SAAU8F,MAAO,GAC5B,CAAE9F,OAAQ,UAAW8F,MAAO,IACzBuC,KAAI,SAAAuB,GAAE,OAAI,4BAAQ1J,IAAK0J,EAAG9D,MAAOA,MAAO8D,EAAG9D,OAAQ8D,EAAG5J,eAMnE,kBAAC,IAAD,CAAY6I,KAAG,EAAC9G,UAAU,QACxB,kBAAC,IAAD,CAAM+G,GAAG,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,eACA,kBAAC,IAAD,CACEC,SAAUvD,EACVK,KAAK,SAELoD,QAAkC,mBAAlB/D,EAAOjB,OACvB6B,MAAO7E,EAASgD,QAAU,GAC1B+E,YAAY,mBAGb9B,EAAeiC,IAAaC,kBAGjC,kBAAC,IAAD,CAAMN,GAAG,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,aACA,kBAAC,IAAD,CACEC,SAAUvD,EAEVK,KAAK,OACLoD,QAAgC,mBAAhB/D,EAAOhB,KACvB4B,MAAO7E,EAASiD,MAAQ,GACxB8E,YAAY,iBAGb9B,EAAeiC,IAAaC,kBAGjC,kBAAC,IAAD,CAAMN,GAAG,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,gBACA,kBAAC,IAAD,CACEC,SAAUvD,EACVK,KAAK,UAELoD,QAAmC,mBAAnB/D,EAAOf,QACvB2B,MAAO7E,EAASkD,SAAW,GAC3B6E,YAAY,oBAEb9B,EAAeiC,IAAaC,mBAInC,kBAAC,IAAD,CAAYP,KAAG,EAAC9G,UAAU,eACxB,kBAAC,IAAD,CAAM+G,GAAG,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,gBACA,kBAAC,IAAD,CACEC,SAAUvD,EACVK,KAAK,MACLoD,QAA+B,mBAAf/D,EAAOd,IACvB0B,MAAO7E,EAASmD,KAAO,GACvB4E,YAAY,cAKlB,kBAAC,IAAD,CAAMF,GAAG,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,wBACA,kBAAC,IAAD,CACEC,SAAUvD,EACVyD,QAA0C,mBAA1B/D,EAAOb,eACvBwB,KAAK,iBACLC,MAAO7E,EAASoD,gBAAkB,GAClC2E,YAAY,sBAKlB,kBAAC,IAAD,CAAMF,GAAG,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,oBACA,kBAAC,IAAD,CACEC,SAAUvD,EACVyD,QAAuC,mBAAvB/D,EAAOZ,YACvBuB,KAAK,cACLC,MAAO7E,EAASqD,aAAe,GAC/B0E,YAAY","file":"static/js/21.4b6d2e20.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n    CBadge,\r\n    CCard,\r\n    CCardBody,\r\n    CCol,\r\n    CDataTable,\r\n    CRow,\r\n    CPagination\r\n} from '@coreui/react'\r\nimport EmployeeModal from './EmployeeModal';\r\nimport { toCapitalize } from 'utils/helpers';\r\nimport { NoData } from 'reusable'\r\n\r\n\r\nconst getBadge = status => {\r\n    switch (status) {\r\n        case 1: return 'success'\r\n        case 0: return 'secondary'\r\n    }\r\n}\r\nlet headers = [\r\n\r\n    { key: 'Name', _classes: 'font-weight-bold', _style: { width: \"15%\" }, },\r\n    { key: 'mobileno', label: \"Mobile No.\", _style: { width: \"10%\" } },\r\n    { key: 'email', _style: { width: \"15%\" } },\r\n    {\r\n        key: \"role\",\r\n        label: \"Position\",\r\n        sorter: false,\r\n        filter: false,\r\n    },\r\n    'gender',\r\n    'birthdate',\r\n    { key: 'department_name', label: \"Department\" },\r\n    { key: 'isActive', label: 'Status' }\r\n]\r\n\r\nconst Users = (props) => {\r\n    const { history, location } = props\r\n    const user = props.appState.auth.user\r\n    const usersData = props.appState.employee.employees.filter(emp => emp.employeeId !== user.employeeId)\r\n    const queryPage = location.search.match(/page=([0-9]+)/, '')\r\n    const currentPage = Number(queryPage && queryPage[1] ? queryPage[1] : 1)\r\n    const [page, setPage] = useState(currentPage)\r\n    const pageChange = newPage => {\r\n        currentPage !== newPage && history.push(`/employees?page=${newPage}`)\r\n    }\r\n    useEffect(() => {\r\n        currentPage !== page && setPage(currentPage)\r\n    }, [currentPage, page])\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xl={12}>\r\n                <CCard>\r\n                    <CCardBody>\r\n                        <CRow className=\"mb-2\">\r\n                            <CCol sm=\"5\">\r\n                                <h4 className=\"card-title mb-0\">Employees</h4>\r\n                            </CCol>\r\n                            {\r\n                              user.accountType === 1 ?\r\n                              <CCol sm=\"7\" className=\"d-none d-md-block\">\r\n                                <div className=\"float-right\" >\r\n                                    <EmployeeModal retrieveEmployees={props.retrieveEmployees} />\r\n                                </div>\r\n                            </CCol>\r\n                             : \"\"\r\n                            }\r\n                        </CRow>\r\n                        <CDataTable\r\n                            items={usersData}\r\n                            fields={headers}\r\n                            hover\r\n                            itemsPerPage={10}\r\n                            activePage={page}\r\n                            pagination\r\n                            noItemsViewSlot={<NoData />}\r\n                            onPageChange={(e) => {\r\n                                pageChange(e);\r\n                            }}\r\n                            clickableRows\r\n                            onRowClick={(emp) => {\r\n                                history.push(`/employees/profile/${emp.employeeId}`)\r\n                            }}\r\n                            scopedSlots={{\r\n                                'Name':\r\n                                    (item) => (\r\n                                        <td>\r\n                                            {`${toCapitalize(item.lastname)}, ${toCapitalize(item.firstname)} ${toCapitalize(item.middlename && item.middlename[0]) + \".\"}`}\r\n                                        </td>\r\n                                    ),\r\n                                'department_name':\r\n                                    (item) => {\r\n                                        return (\r\n                                            <td>\r\n                                                {item.department_name ? item.department_name : item.department_nameM ?  item.department_nameM : item.department_nameH ?  item.department_nameH : <em>UNSET</em>}\r\n                                            </td>\r\n                                        )\r\n                                    },\r\n                                'isActive':\r\n                                    (item) => (\r\n                                        <td>\r\n                                            <CBadge color={getBadge(item.isActive)}>\r\n                                                {item.isActive === 1 ? 'active' : 'inactive'}\r\n                                            </CBadge>\r\n                                        </td>\r\n                                    )\r\n                            }}\r\n                        />\r\n\r\n                    </CCardBody>\r\n                </CCard>\r\n            </CCol>\r\n        </CRow>\r\n    )\r\n}\r\n\r\nexport default Users\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { CButton, CSelect, CRow, CCol, CContainer, CForm, CFormGroup, CLabel, CInput, CInvalidFeedback, CAlert, CSpinner } from '@coreui/react'\r\nimport { Modal, LoadingButton, ConfirmDialog } from 'reusable'\r\nimport { actionCreator, ActionTypes } from 'utils/actions'\r\nimport api from \"utils/api\";\r\nimport { APP_MESSAGES, ROLE, ACCOUNT_ROLES } from 'utils/constants/constant';\r\nimport { RULES, shallowCopy, getAge } from 'utils/helpers'\r\nimport { fetchEmployeeAccounts, retrieveEmployees } from 'utils/helpers/fetch';\r\nimport _ from 'lodash';\r\n\r\nconst defaultErrors = {\r\n  firstname: false,\r\n  lastname: false,\r\n  middlename: false,\r\n  birthdate: false,\r\n  email: false,\r\n  mobileno: false,\r\n  role: false,\r\n  // department: false,\r\n  gender: false,\r\n  street: false,\r\n  city: false,\r\n  country: false,\r\n  sss: false,\r\n  phil_health_no: false,\r\n  pag_ibig_no: false,\r\n\r\n}\r\nconst defaultEmployee = {\r\n  role: null,\r\n  accountType: null,\r\n  firstname: \"\",\r\n  lastname: \"\",\r\n  middlename: \"\",\r\n  gender: \"\",\r\n  mobileno: \"\",\r\n  birthdate: \"\",\r\n  email: \"\",\r\n  street: \"\",\r\n  city: \"\",\r\n  country: \"\",\r\n  sss: \"\",\r\n  phil_health_no: \"\",\r\n  pag_ibig_no: \"\",\r\n  isActive: 1\r\n\r\n}\r\n\r\nconst EmployeeModal = ({ isUpdate = false, data = null }) => {\r\n  let dispatch = useDispatch();\r\n  const modal = useRef();\r\n  const dialog = useRef();\r\n  const [employee, createEmployee] = useState(!data ? shallowCopy(defaultEmployee) : data)\r\n  const [errors, setError] = useState(defaultErrors)\r\n  const [disabled, setDisabled] = useState(false);\r\n  const [responseError, setResponseError] = useState();\r\n\r\n  const handleOnChange = (event) => {\r\n    setResponseError('')\r\n    setError(defaultErrors)\r\n    let _errors = shallowCopy(errors)\r\n    let Employee = shallowCopy(employee)\r\n    let { name, value } = event.target\r\n    _errors[name] = false\r\n    if (name === \"role\") {\r\n      let { role, accountType } = JSON.parse(value)\r\n      Employee['role'] = role;\r\n      Employee[\"accountType\"] = +accountType;\r\n    } else {\r\n      Employee[name] = value;\r\n    }\r\n    createEmployee(Employee)\r\n  }\r\n\r\n  const validateInfo = (name, value) => {\r\n    const { ageRules, nameRules, numberRules, emailRules } = RULES\r\n    if (name === \"birthdate\") {\r\n      return ageRules(getAge(value))\r\n    }\r\n\r\n    if (['firstname', 'lastname'].includes(name)) {\r\n      return nameRules(value)\r\n    }\r\n\r\n    if (name === 'middlename' && value !== \"\") {\r\n      return nameRules(value)\r\n    } else {\r\n      return false\r\n    }\r\n\r\n    if (name === \"mobileno\") {\r\n      return numberRules(value)\r\n    }\r\n\r\n    if (name === \"email\") {\r\n      return emailRules(value)\r\n    }\r\n\r\n    if (['sss', 'phil_health_no', 'pag_ibig_no'].includes(name)) {\r\n      return false\r\n    }\r\n    return value !== \"\" || APP_MESSAGES.INPUT_REQUIRED;\r\n  }\r\n\r\n  // const addEmployee = async () => {\r\n  //     let res = await api.post(\"/create_employee\", employee)\r\n  //     if (!res.error) {\r\n  //         employee.id = res.data.id\r\n  //         dispatch(actionCreator(ActionTypes.ADD_EMPLOYEE, employee))\r\n  //     }\r\n  //     // else {\r\n  //     //     setError(res.message)\r\n  //     // }\r\n  // }\r\n  // const updateEmployee = async () => {\r\n  //     let res = await api.post(\"/create_employee\", employee)\r\n  //     if (!res.error) {\r\n  //         employee.id = res.data.id\r\n  //         dispatch(actionCreator(ActionTypes.ADD_EMPLOYEE, employee))\r\n  //     }\r\n  //     // else {\r\n  //     //     setError(res.message)\r\n  //     // }\r\n  // }\r\n\r\n  const modalOnClose = () => {\r\n    if (!isUpdate) {\r\n      createEmployee(defaultEmployee)\r\n    }\r\n    setError(defaultErrors)\r\n    setResponseError('');\r\n  }\r\n\r\n  const onSubmit = async () => {\r\n    setDisabled(true)\r\n    let path = isUpdate ? \"update_employee\" : \"create_employee\"\r\n    let payload = shallowCopy(employee)\r\n    if (isUpdate) {\r\n      payload[\"employeeId\"] = data.employeeId;\r\n    }\r\n    let res = await api.post(`/${path}`, payload)\r\n    if (!res.error) {\r\n      let fetched = await retrieveEmployees(dispatch);\r\n      if (fetched.error) {\r\n        dispatch(actionCreator(ActionTypes.ADD_EMPLOYEE, res.data.employee_information[0]))\r\n      }\r\n      await fetchEmployeeAccounts(dispatch)\r\n    } else {\r\n      setResponseError(res.message);\r\n    }\r\n    setDisabled(false)\r\n    modal.current.toggle()\r\n    modalOnClose();\r\n  }\r\n\r\n\r\n\r\n  const validate = () => {\r\n\r\n    let _errors = shallowCopy(defaultErrors)\r\n    let {\r\n      role,\r\n      firstname,\r\n      lastname,\r\n      middlename,\r\n      gender,\r\n      mobileno,\r\n      birthdate,\r\n      email,\r\n      city,\r\n      country,\r\n      pag_ibig_no,\r\n      phil_health_no,\r\n      sss\r\n    } = employee;\r\n    let checkRequired = val => RULES.required(val)\r\n    _errors['role'] = checkRequired(role);\r\n    _errors['firstname'] = RULES.nameRules(firstname);\r\n    _errors['lastname'] = RULES.nameRules(lastname);\r\n    _errors['gender'] = checkRequired(gender);\r\n    _errors['mobileno'] = RULES.numberRules(mobileno);\r\n    _errors['birthdate'] = RULES.ageRules(getAge(birthdate));\r\n    _errors['city'] = checkRequired(city);\r\n    _errors['country'] = checkRequired(country);\r\n    _errors['email'] = checkRequired(email);\r\n    _errors['middlename'] = false;\r\n    if (middlename.length) {\r\n      _errors['middlename'] = RULES.nameRules(middlename);\r\n    }\r\n    if (sss.length) {\r\n      _errors['sss'] = RULES.numberRules(sss);\r\n    }\r\n    if (phil_health_no.length) {\r\n      _errors['phil_health_no'] = RULES.numberRules(phil_health_no);\r\n    }\r\n    if (pag_ibig_no.length) {\r\n      _errors['pag_ibig_no'] = RULES.numberRules(pag_ibig_no);\r\n    }\r\n    setError(_errors)\r\n    let isValid = true;\r\n    _.values(_errors).map(err => {\r\n      if (typeof err == 'string') {\r\n        isValid = false\r\n      }\r\n    })\r\n    //valid\r\n    if (isValid) {\r\n      dialog.current.toggle()\r\n    }\r\n  }\r\n\r\n\r\n  const renderFeedback = (message) => {\r\n    return message !== false &&\r\n      <CInvalidFeedback className=\"help-block\">\r\n        {message}\r\n      </CInvalidFeedback>\r\n  }\r\n\r\n  return (\r\n    <Modal ref={modal} {...{\r\n      modalOnClose,\r\n      size: \"lg\",\r\n      title: isUpdate ? \"Update Details\" : \"Add Employee\",\r\n      color: \"warning\",\r\n      footer:\r\n        <>\r\n          <LoadingButton  {...{ isLoading: disabled, submit: validate, btnText: !isUpdate ? \"Submit\" : \"Update\" }} />\r\n          {/* <CButton\r\n                        disabled={disabled}\r\n                        onClick={validate}\r\n                        className=\"mr-1\"\r\n                        color=\"primary\">\r\n                        {\r\n                            disabled ? <CSpinner color=\"secondary\" size=\"sm\" /> : !isUpdate ? \"Submit\" : \"Update\"\r\n                        }\r\n                    </CButton> */}\r\n        </>\r\n    }}>\r\n\r\n      <CContainer fluid>\r\n        <ConfirmDialog\r\n          id=\"cutom_dialog\"\r\n          ref={dialog}\r\n          {...{\r\n            onConfirm: () => {\r\n              onSubmit();\r\n            },\r\n            title: \"Please confirm.\",\r\n          }}\r\n        ></ConfirmDialog>\r\n        <CRow>\r\n          <CCol sm=\"12\">\r\n            {responseError && responseError.length > 0 ? <CAlert color=\"danger justify-content-center text-align-center\">{responseError}</CAlert> : null}\r\n            <CForm action=\"\" method=\"post\" >\r\n              <CFormGroup row className=\"my-0\">\r\n                <CCol xs=\"4\">\r\n                  <CFormGroup>\r\n                    <CLabel>Firstname</CLabel>\r\n                    <CInput\r\n                      onChange={handleOnChange}\r\n                      name=\"firstname\"\r\n                      value={employee.firstname || \"\"}\r\n                      placeholder=\"Enter Firstname\"\r\n                      invalid={typeof errors.firstname !== 'boolean'}\r\n                    //valid={!errors.firstname} \r\n                    />\r\n                    {renderFeedback(errors.firstname)}\r\n                  </CFormGroup>\r\n                </CCol>\r\n                <CCol xs=\"4\">\r\n                  <CFormGroup>\r\n                    <CLabel>Middlename</CLabel>\r\n                    <CInput\r\n                      onChange={handleOnChange}\r\n                      name=\"middlename\"\r\n                      value={employee.middlename || \"\"}\r\n                      placeholder=\"Enter Middlename\"\r\n                      invalid={typeof errors.middlename !== 'boolean'}\r\n                    />\r\n                    {renderFeedback(errors.middlename)}\r\n\r\n                  </CFormGroup>\r\n                </CCol>\r\n                <CCol xs=\"4\">\r\n                  <CFormGroup>\r\n                    <CLabel>Lastname</CLabel>\r\n                    <CInput\r\n                      onChange={handleOnChange}\r\n                      name=\"lastname\"\r\n                      value={employee.lastname || \"\"}\r\n                      placeholder=\"Enter Lastname\"\r\n                      invalid={typeof errors.lastname !== 'boolean'}\r\n                    />\r\n                    {renderFeedback(errors.lastname)}\r\n\r\n                  </CFormGroup>\r\n                </CCol>\r\n              </CFormGroup>\r\n              <CFormGroup row className=\"my-0\">\r\n                <CCol xs=\"6\">\r\n                  <CFormGroup>\r\n                    <CLabel>Gender</CLabel>\r\n                    <CSelect onChange={handleOnChange}\r\n                      value={employee.gender}\r\n                      invalid={typeof errors.gender !== 'boolean'}\r\n                      name=\"gender\">\r\n                      {\r\n                        !employee.gender && <option value=\"\" hidden>Select Gender</option>\r\n                      }\r\n                      <option value='male'>Male</option>\r\n                      <option value='female'>Female</option>\r\n                    </CSelect>\r\n                    {renderFeedback(APP_MESSAGES.INPUT_REQUIRED)}\r\n                  </CFormGroup>\r\n                </CCol>\r\n                <CCol xs=\"6\">\r\n                  <CFormGroup>\r\n                    <CLabel>Birthdate</CLabel>\r\n                    <CInput\r\n                      type='date'\r\n                      //valid={!errors.birthdate}\r\n                      onChange={handleOnChange}\r\n                      name=\"birthdate\"\r\n                      invalid={typeof errors.birthdate !== 'boolean'}\r\n                      onChange={handleOnChange}\r\n                      value={employee.birthdate || \"\"}\r\n                      placeholder=\"Enter Birthdate..\"\r\n                    />\r\n                    {renderFeedback(errors.birthdate)}\r\n                  </CFormGroup>\r\n                </CCol>\r\n              </CFormGroup>\r\n              <CFormGroup row className=\"my-0\">\r\n                <CCol xs=\"6\">\r\n                  <CFormGroup>\r\n                    <CLabel>Role</CLabel>\r\n                    <CSelect\r\n                      onChange={handleOnChange}\r\n                      name=\"role\"\r\n                      // value={employee.role || \"\"}\r\n                      invalid={typeof errors.role !== 'boolean'}\r\n                    >\r\n                      {\r\n                        !employee.role && <option value=\"\" hidden>Select Role</option>\r\n                      }\r\n\r\n                      {ACCOUNT_ROLES.map(role => {\r\n                        return (\r\n                          <optgroup label={role.category} key={role.category}>\r\n                            {\r\n                              role.roles.map((_role, idx) => {\r\n                                return (<option value={JSON.stringify({ role: _role, accountType: role.accountType })} key={idx} >{_role}</option>)\r\n                              })\r\n                            }\r\n                          </optgroup>)\r\n\r\n                      })}\r\n                    </CSelect>\r\n                    {renderFeedback(APP_MESSAGES.INPUT_REQUIRED)}\r\n                  </CFormGroup>\r\n                </CCol>\r\n                {/* <CCol xs=\"6\">\r\n                                    <CFormGroup>\r\n                                        <CLabel>Department</CLabel>\r\n                                        <CSelect onChange={handleOnChange}\r\n                                            value={employee.department}\r\n                                            invalid={ typeof errors.department !== false}\r\n                                            name=\"department\">\r\n                                            <option value=\"\" hidden>Select Department</option>\r\n                                            {\r\n                                                departments.map(dept => <option key={dept.department_id} value={dept.department_id}>{dept.department_name}</option>)\r\n                                            }\r\n\r\n                                        </CSelect>\r\n                                        {renderFeedback(APP_MESSAGES.INPUT_REQUIRED)}\r\n                                    </CFormGroup>\r\n                                </CCol> */}\r\n                <CCol xs=\"6\">\r\n                  <CFormGroup>\r\n                    <CLabel>Mobile Number</CLabel>\r\n                    <CInput\r\n                      invalid={typeof errors.mobileno !== 'boolean'}\r\n                      //valid={!errors.mobileno}\r\n                      onChange={handleOnChange}\r\n                      name=\"mobileno\"\r\n                      value={employee.mobileno}\r\n                      placeholder=\"Enter Mobile Number..\"\r\n\r\n                    />\r\n                    {renderFeedback(errors.mobileno)}\r\n                  </CFormGroup>\r\n                </CCol>\r\n              </CFormGroup>\r\n              <CFormGroup row className=\"my-0\">\r\n\r\n                <CCol xs=\"6\">\r\n                  <CFormGroup>\r\n                    <CLabel>Email</CLabel>\r\n                    <CInput\r\n                      onChange={handleOnChange}\r\n                      name=\"email\"\r\n                      //valid={!errors.email}\r\n                      value={employee.email || \"\"}\r\n                      invalid={typeof errors.email !== 'boolean'}\r\n                      placeholder=\"Enter Email..\"\r\n\r\n                    />\r\n                    {renderFeedback(errors.email)}\r\n                  </CFormGroup>\r\n                </CCol>\r\n                <CCol xs=\"6\">\r\n                  <CFormGroup>\r\n                    <CLabel>Status</CLabel>\r\n                    <CSelect onChange={handleOnChange}\r\n                      value={employee.isActive}\r\n                      disabled={!isUpdate}\r\n                      name=\"isActive\">\r\n                      <option value=\"\" hidden>{isUpdate ? employee.isActive === 1 ? 'Active' : 'Inactive' : 'Select Status'}</option>\r\n                      {\r\n                        [{ status: 'Active', value: 1 },\r\n                        { status: 'Inctive', value: 0 }]\r\n                          .map(st => <option key={st.value} value={st.value}>{st.status}</option>)\r\n                      }\r\n                    </CSelect>\r\n                  </CFormGroup>\r\n                </CCol>\r\n              </CFormGroup>\r\n              <CFormGroup row className=\"my-0\">\r\n                <CCol xs=\"4\">\r\n                  <CFormGroup>\r\n                    <CLabel>Street</CLabel>\r\n                    <CInput\r\n                      onChange={handleOnChange}\r\n                      name=\"street\"\r\n                      //valid={!errors.street}\r\n                      invalid={typeof errors.street !== 'boolean'}\r\n                      value={employee.street || \"\"}\r\n                      placeholder=\"Enter Street..\"\r\n\r\n                    />\r\n                    {renderFeedback(APP_MESSAGES.INPUT_REQUIRED)}\r\n                  </CFormGroup>\r\n                </CCol>\r\n                <CCol xs=\"4\">\r\n                  <CFormGroup>\r\n                    <CLabel>City</CLabel>\r\n                    <CInput\r\n                      onChange={handleOnChange}\r\n                      //valid={!errors.city}\r\n                      name=\"city\"\r\n                      invalid={typeof errors.city !== 'boolean'}\r\n                      value={employee.city || \"\"}\r\n                      placeholder=\"Enter City..\"\r\n\r\n                    />\r\n                    {renderFeedback(APP_MESSAGES.INPUT_REQUIRED)}\r\n                  </CFormGroup>\r\n                </CCol>\r\n                <CCol xs=\"4\">\r\n                  <CFormGroup>\r\n                    <CLabel>Country</CLabel>\r\n                    <CInput\r\n                      onChange={handleOnChange}\r\n                      name=\"country\"\r\n                      //valid={!errors.country}\r\n                      invalid={typeof errors.country !== 'boolean'}\r\n                      value={employee.country || \"\"}\r\n                      placeholder=\"Enter Country..\"\r\n                    />\r\n                    {renderFeedback(APP_MESSAGES.INPUT_REQUIRED)}\r\n                  </CFormGroup>\r\n                </CCol>\r\n              </CFormGroup>\r\n              <CFormGroup row className=\"my-0 d-none\">\r\n                <CCol xs=\"4\">\r\n                  <CFormGroup>\r\n                    <CLabel>SSS NO.</CLabel>\r\n                    <CInput\r\n                      onChange={handleOnChange}\r\n                      name=\"sss\"\r\n                      invalid={typeof errors.sss !== 'boolean'}\r\n                      value={employee.sss || \"\"}\r\n                      placeholder=\"SSS NO.\"\r\n\r\n                    />\r\n                  </CFormGroup>\r\n                </CCol>\r\n                <CCol xs=\"4\">\r\n                  <CFormGroup>\r\n                    <CLabel>PHIL HEALTH NO.</CLabel>\r\n                    <CInput\r\n                      onChange={handleOnChange}\r\n                      invalid={typeof errors.phil_health_no !== 'boolean'}\r\n                      name=\"phil_health_no\"\r\n                      value={employee.phil_health_no || \"\"}\r\n                      placeholder=\"PHIL HEALTH NO.\"\r\n\r\n                    />\r\n                  </CFormGroup>\r\n                </CCol>\r\n                <CCol xs=\"4\">\r\n                  <CFormGroup>\r\n                    <CLabel>PAGIBIG NO.</CLabel>\r\n                    <CInput\r\n                      onChange={handleOnChange}\r\n                      invalid={typeof errors.pag_ibig_no !== 'boolean'}\r\n                      name=\"pag_ibig_no\"\r\n                      value={employee.pag_ibig_no || \"\"}\r\n                      placeholder=\"PAGIBIG NO.\"\r\n                    />\r\n                  </CFormGroup>\r\n                </CCol>\r\n              </CFormGroup>\r\n            </CForm>\r\n          </CCol>\r\n        </CRow>\r\n      </CContainer>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default EmployeeModal;\r\n"],"sourceRoot":""}