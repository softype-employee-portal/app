{"version":3,"sources":["modules/repository/RepositoryFiles.js","modules/repository/RepositoryModal.js"],"names":["RepositoryFiles","props","dispatch","useDispatch","dialogRef","useRef","fileType","match","params","type","files","useSelector","state","appState","useState","iconIndex","setIconIndex","$blue","colors","$orange","$green","$red","loading","setLoading","onQueue","setOnQueue","pendingDeleteItem","setPendingDeleteItem","$theme","theme","setTheme","deleteFile","a","id","api","post","res","removeFromQueue","path","dispatchNotification","message","error","retrieveFiles","queuedItems","copyArray","filter","item","toLowerCase","fetchCompanyVideos","fetchCompanyImages","fetchCompanyDocuments","fetchCompanyFiles","useEffect","fluid","isHidden","ref","show","onConfirm","title","bg","length","map","file","filename","description","includes","sm","md","lg","key","accentColor","style","maxHeight","className","textAlign","FILE_TYPES","size","color","onClick","route","document","createElement","display","href","target","body","appendChild","click","redirect","getBaseUrl","mdiEye","_file","current","toggle","mdiTrashCan","header","content","formatDate","mdiInformationOutline","RepositoryModal","isUpdate","employeeId","auth","user","modal","fileInput","setFile","setDescription","isLoading","setIsLoading","setType","setError","modalOnCloseCallback","uploadFile","payload","FormData","append","toggleModal","console","log","mdiPlus","centered","hidden","btnTitle","modalOnClose","footer","submit","_errors","push","trim","split","Set","btnText","hideCancelButton","whiteSpace","margin","join","cursor","some","v","mdiFilePlusOutline","$grey_light","name","onChange","e","value","extension","getFileExtension","idx","file_type","extensions","_onError","placeholder","rows","invalid"],"mappings":"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","file":"static/js/22.1f9eeb72.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { toCapitalize, getFileExtension, dispatchNotification, downloadFile, copyArray, getBaseUrl, formatDate } from 'utils/helpers';\r\nimport { NoData, ConfirmDialog, Loader } from 'reusable';\r\nimport api from \"utils/api\";\r\nimport { CContainer, CRow, CCol, CCard, CLink, CCardHeader, CCardBody, CCardFooter, CPopover } from '@coreui/react';\r\nimport { mdiDownload, mdiProgressDownload, mdiTrashCan, mdiFilePdf, mdiInformationOutline, mdiEye } from '@mdi/js'\r\nimport Icon from '@mdi/react'\r\nimport colors from 'assets/theme/colors'\r\nimport RepositoryModal from './RepositoryModal';\r\nimport { FILE_TYPES } from 'utils/constants/constant'\r\n\r\n\r\nimport {\r\n    fetchCompanyFiles,\r\n    fetchCompanyVideos,\r\n    fetchCompanyImages,\r\n    fetchCompanyDocuments\r\n} from 'utils/helpers/fetch'\r\n\r\nconst RepositoryFiles = (props) => {\r\n    const dispatch = useDispatch()\r\n    const dialogRef = useRef()\r\n    const { match } = props\r\n    const fileType = match.params.type\r\n    const files = useSelector(state => state.appState.files[fileType])\r\n    const [iconIndex, setIconIndex] = useState(0)\r\n    const { $blue, $orange, $green, $red } = colors;\r\n    const [loading, setLoading] = useState(true)\r\n    const [onQueue, setOnQueue] = useState([])\r\n    const [pendingDeleteItem, setPendingDeleteItem] = useState()\r\n    const $theme = [\r\n        ['info', 'primary', 'danger', 'success'],\r\n        [$blue, $orange, $red, $green]\r\n    ]\r\n    const [theme, setTheme] = useState(0)\r\n    const deleteFile = async () => {\r\n        let id = pendingDeleteItem['file id']\r\n        setLoading(true)\r\n        let res = await api.post(`/delete_file/${id}`)\r\n        removeFromQueue(pendingDeleteItem.path)\r\n        dispatchNotification(dispatch, { type: 'info', message: 'Please wait.' })\r\n\r\n        if (!res.error) {\r\n            await retrieveFiles()\r\n            setLoading(false)\r\n            dispatchNotification(dispatch, { type: 'success', message: 'Success' })\r\n        } else {\r\n            dispatchNotification(dispatch, { type: 'error', message: res.message })\r\n        }\r\n        setPendingDeleteItem(\"\")\r\n    }\r\n\r\n    const removeFromQueue = (path) => {\r\n        let queuedItems = copyArray(onQueue);\r\n        queuedItems = queuedItems.filter(item => item !== path)\r\n        setOnQueue(queuedItems)\r\n    }\r\n    const beforeDelete = (_file) => {\r\n        dialogRef.current.toggle()\r\n        setPendingDeleteItem(_file)\r\n    }\r\n    const addToQueue = (path) => {\r\n        let queuedItems = copyArray(onQueue);\r\n        queuedItems.push(path)\r\n        setOnQueue(queuedItems)\r\n    }\r\n    const redirect = (route) => {\r\n        const a = document.createElement(\"a\");\r\n        a.style.display = \"none\";\r\n        a.href = route;\r\n        a.target = \"_blank\";\r\n        document.body.appendChild(a);\r\n        a.click();\r\n    }\r\n    const download = (path, filename) => {\r\n        let uri = `${getBaseUrl()}/file/${fileType}/${path}`\r\n        addToQueue(path)\r\n        downloadFile(uri, filename, (success, err) => {\r\n            if (!success) {\r\n                console.log(err)\r\n            }\r\n            setTimeout(() => {\r\n                return removeFromQueue(path)\r\n            }, 500);\r\n        })\r\n    }\r\n\r\n    const retrieveFiles = async () => {\r\n        switch (fileType.toLowerCase()) {\r\n            case 'videos':\r\n                setTheme(2);\r\n                setIconIndex(2)\r\n                await fetchCompanyVideos(dispatch)\r\n                break;\r\n            case 'images':\r\n                setIconIndex(1)\r\n                setTheme(1);\r\n                await fetchCompanyImages(dispatch)\r\n                break;\r\n            case 'documents':\r\n                setIconIndex(0)\r\n                setTheme(0);\r\n                await fetchCompanyDocuments(dispatch)\r\n                break;\r\n            case 'others':\r\n                setIconIndex(3)\r\n                setTheme(3);\r\n                await fetchCompanyFiles(dispatch)\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        retrieveFiles()\r\n        setLoading(false)\r\n    }, [])\r\n    return (\r\n        <CContainer fluid>\r\n            <RepositoryModal {...{ type: fileType, isHidden: true }} />\r\n            <ConfirmDialog\r\n                ref={dialogRef}\r\n                {...{\r\n                    show: true,\r\n                    onConfirm: () => {\r\n                        deleteFile()\r\n                    },\r\n                    title: `Confirm Delete`,\r\n                }}\r\n            ></ConfirmDialog>\r\n            {loading ? <Loader bg=\"rgba(255,255,255,0.5)\" /> :\r\n                (files && !files.length) ? <NoData  {...{ title: 'No Files' }} />\r\n                    :\r\n                    <CRow>\r\n                        {files.map(file => {\r\n\r\n                            const { filename, description, path } = file\r\n                            let queued = onQueue.includes(path)\r\n                            return (\r\n                                <CCol sm=\"4\" md=\"3\" lg=\"3\" key={file.path} >\r\n                                    <CCard accentColor={$theme[0][theme]} style={{ maxHeight: '220px' }}>\r\n                                        <CCardHeader className=\"font-weight-bold text-truncate\">\r\n                                            <small> <strong>{filename}</strong></small>\r\n                                        </CCardHeader>\r\n\r\n                                        <CCardBody style={{ textAlign: \"center\" }}>\r\n                                            <Icon path={FILE_TYPES[iconIndex]['icon']} size={4} color={$theme[1][theme]} />\r\n                                        </CCardBody>\r\n                                        <CCardFooter>\r\n                                            <div className=\"card-header-actions\">\r\n                                                <CLink className=\"card-header-action\" onClick={() => {\r\n                                                    redirect(`${getBaseUrl()}/file/${fileType}/${path}`)\r\n                                                }}>\r\n                                                    <Icon path={mdiEye} size={0.9} color=\"black\" />\r\n                                                </CLink>\r\n                                                {/* <CLink className=\"card-header-action\" onClick={() => {\r\n                                                    if (!queued) {\r\n                                                        return download(path, filename)\r\n                                                    }\r\n                                                    dispatchNotification(dispatch, { type: 'info', message: 'Dowload on progress' })\r\n                                                }}>\r\n                                                    <Icon path={queued ? mdiProgressDownload : mdiDownload} size={0.9} color=\"black\" />\r\n                                                </CLink> */}\r\n\r\n                                                <CLink className=\"card-header-action\" onClick={() => {\r\n                                                    beforeDelete(file)\r\n                                                }}>\r\n                                                    <Icon path={mdiTrashCan} size={0.8} color=\"black\" />\r\n                                                </CLink>\r\n                                                <CPopover header=\"File Information\" content={<>\r\n                                                    <p><strong>Filename :</strong> {filename}</p>\r\n                                                    <p><strong>Description :</strong> {description}</p>\r\n                                                    <p><strong>Uploaded by :</strong> {file['uploaded by']}</p>\r\n                                                    <p><strong>Date Uploaded :</strong> {formatDate(file['uploaded at'])}</p>\r\n                                                </>}>\r\n                                                    <CLink className=\"card-header-action\" onClick={() => { }}>\r\n                                                        <Icon path={mdiInformationOutline} size={0.8} color=\"black\" />\r\n                                                    </CLink>\r\n                                                </CPopover>\r\n                                            </div>\r\n                                        </CCardFooter>\r\n                                    </CCard>\r\n                                </CCol>\r\n                            )\r\n                        })}\r\n                    </CRow>\r\n            }\r\n        </CContainer>\r\n    )\r\n}\r\n\r\nexport default RepositoryFiles; ","import React, { useState, useRef, useEffect } from 'react';\r\nimport {\r\n    CButton, CCard, CCardBody,\r\n    CInput,\r\n    CInvalidFeedback,\r\n    CRow,\r\n    CCol,\r\n    CTextarea,\r\n    CAlert\r\n} from \"@coreui/react\";\r\nimport { Modal, LoadingButton } from 'reusable'\r\nimport Icon from '@mdi/react';\r\nimport { mdiFilePlusOutline, mdiPlus } from '@mdi/js'\r\nimport colors from 'assets/theme/colors'\r\nimport { FILE_TYPES } from 'utils/constants/constant'\r\nimport { getFileExtension, dispatchNotification } from 'utils/helpers'\r\nimport {\r\n    fetchCompanyFiles,\r\n    fetchCompanyVideos,\r\n    fetchCompanyImages,\r\n    fetchCompanyDocuments,\r\n    fetchDepartments,\r\n} from 'utils/helpers/fetch';\r\nimport api from 'utils/api';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nconst RepositoryModal = ({ isUpdate = false, isHidden = false }) => {\r\n    const dispatch = useDispatch()\r\n    const employeeId = useSelector(state => state.appState.auth.user.employeeId)\r\n    let modal = useRef();\r\n    let fileInput = useRef();\r\n    const [file, setFile] = useState([]);\r\n    const [description, setDescription] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [type, setType] = useState('')\r\n    const [error, setError] = useState([])\r\n\r\n\r\n    const modalOnCloseCallback = () => {\r\n        if (!isLoading) {\r\n            setFile(\"\");\r\n            setDescription(\"\");\r\n            setError([]);\r\n        }\r\n    }\r\n    const _onError = message => {\r\n        // let currentError = copyArray(error)\r\n        //\r\n        if (!error.includes(message)) {\r\n            return setError([...error, message])\r\n        }\r\n        // currentError.push(message)\r\n        // setError(currentError)\r\n        // currentError = []\r\n    }\r\n    const fileInputChangeHandler = (e) => {\r\n        setError([])\r\n        let { files } = e.target\r\n        if (!files || files.length === 0) {\r\n            _onError(\"Please attatch some file.\")\r\n            return\r\n        }\r\n        let value = files[0]\r\n        setFile(value)\r\n        let extension = getFileExtension(value.name)\r\n        for (let idx = 0; idx < FILE_TYPES.length; idx++) {\r\n            const file_type = FILE_TYPES[idx];\r\n            if (file_type.extensions.includes(extension.toLowerCase())) {\r\n                setType(file_type.name.toLowerCase());\r\n                break;\r\n            } else {\r\n                setType(\"others\")\r\n            }\r\n        }\r\n    }\r\n    const uploadFile = async () => {\r\n        let payload = new FormData()\r\n        payload.append('file', file);\r\n        payload.append(\"description\", description)\r\n        payload.append(\"type\", type)\r\n        payload.append(\"employeeId\", +employeeId)\r\n        dispatchNotification(dispatch, { type: 'info', message: 'Uploading' })\r\n        setIsLoading(true)\r\n        let res = await api.post(\"/add_file\", payload, true);\r\n        if (res.error) {\r\n            setError([res.message])\r\n            dispatchNotification(dispatch, { type: 'error', message: 'Error in uploading file' })\r\n        } else {\r\n            switch (type) {\r\n                case 'videos':\r\n                    await fetchCompanyVideos(dispatch)\r\n                    break;\r\n                case 'images':\r\n                    await fetchCompanyImages(dispatch)\r\n                    break;\r\n                case 'documents':\r\n                    await fetchCompanyDocuments(dispatch)\r\n                    break;\r\n                default:\r\n                    await fetchCompanyFiles(dispatch)\r\n                    break;\r\n            }\r\n        }\r\n        setIsLoading(false)\r\n        toggleModal()\r\n    }\r\n\r\n    const renderError = () => {\r\n        return error.length ? (<CAlert color=\"danger justify-content-center text-align-center\">\r\n            {\r\n                <p style={{ whiteSpace: 'pre', margin: '0' }}> {error.join(`\\r\\n`)}</p>\r\n\r\n            }\r\n        </CAlert>) : null\r\n    }\r\n\r\n    // \r\n    const preUpload = () => {\r\n        let _errors = []\r\n        setError([])\r\n        if (!file || file.length === 0) {\r\n            _errors.push(\"File is required.\");\r\n        }\r\n        if (!description) {\r\n            _errors.push(\"Description is required.\");\r\n        }\r\n        if (description.trim().split(\" \").length > 50) {\r\n            _errors.push(\"Descrition must not be greater than 50 characters.\");\r\n        }\r\n        setError([...new Set(_errors)])\r\n        if (file !== [] && description) {\r\n            return uploadFile()\r\n        }\r\n    }\r\n    const toggleModal = () => {\r\n        modal.current.toggle()\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(error);\r\n    }, [error])\r\n\r\n    return (\r\n        <>\r\n            <button className=\"btn  btn-primary fab\" onClick={toggleModal}>\r\n                <Icon size={2} path={mdiPlus} />\r\n            </button>\r\n            <Modal\r\n                ref={modal}\r\n                centered\r\n                hidden={isHidden}\r\n                btnTitle={`Upload File`}\r\n                title={isUpdate ? 'Update' : 'New File'}\r\n                modalOnClose={modalOnCloseCallback}\r\n                footer={\r\n                    <>\r\n                        <LoadingButton {...{ isLoading, submit: preUpload, btnText: 'Upload' }} />\r\n                        <CButton color=\"danger\" onClick={() => {\r\n                            modal.current.toggle()\r\n                            modalOnCloseCallback()\r\n                        }} >Cancel</CButton>\r\n                    </>\r\n                }\r\n                hideCancelButton\r\n            >\r\n                {renderError()}\r\n                <CRow className=\"justify-content-center\">\r\n                    <CCol  >\r\n                        <CCard style={{ cursor: 'pointer' }} accentColor={error.some(v => v.includes('file')) || !file.length ? 'danger' : file.length && 'info'} onClick={() => {\r\n                            fileInput.current.click();\r\n                        }}>\r\n                            <CCardBody style={{ textAlign: \"center\" }}>\r\n                                <CRow>\r\n                                    <CCol>\r\n                                        <Icon path={mdiFilePlusOutline} size={5} color={!file ? colors.$grey_light : colors.$blue} />\r\n                                    </CCol>\r\n                                </CRow>\r\n                                <CRow>\r\n                                    <CCol>\r\n                                        <span style={{ color: file ? colors.$blue : colors.$grey_light }}>{file ? file.name : 'click here to add a file'}  </span>\r\n                                    </CCol>\r\n                                </CRow>\r\n                            </CCardBody>\r\n                        </CCard>\r\n                        <CInput hidden />\r\n                    </CCol>\r\n                </CRow>\r\n                <CRow className=\"justify-content-center\">\r\n                    <input type=\"file\" ref={fileInput} hidden onChange={fileInputChangeHandler} />\r\n                    <CCol >\r\n                        <CTextarea\r\n                            value={description || \"\"}\r\n                            placeholder=\"Description (max is 50 words)\"\r\n                            name=\"description\"\r\n                            rows=\"4\"\r\n                            invalid={(error.some(v => v.toLowerCase().includes('description')))}\r\n                            onChange={(e) => {\r\n                                setError([])\r\n                                setDescription(e.target.value)\r\n                            }}\r\n                        />\r\n                    </CCol>\r\n                </CRow>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RepositoryModal\r\n"],"sourceRoot":""}