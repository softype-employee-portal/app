{"version":3,"sources":["modules/login/Loginv1.js"],"names":["Login","state","credentials","username","config","IS_DEV","password","camera","changed","isLoading","error","cameraError","showError","dialog","createRef","handleChange","e","setState","copy","shallowCopy","target","name","value","toggleDialog","current","toggle","loginAttempt","a","props","already_logged","dispatch","history","APP_MESSAGES","INPUT_REQUIRED","actionCreator","ActionTypes","FETCH_PROFILE_PENDING","api","post","res","message","data","access_token","account_information","length","user","localStorage","setItem","userId","FETCH_PROFILE_SUCCESS","FETCH_LEAVE_REQUEST","LOGIN","replace","sessionStorage","clear","this","checkCamera","then","catch","err","to","id","ref","confirmButton","title","cancelButtonText","className","color","type","placeholder","disabled","autoComplete","invalid","onChange","block","onClick","email","size","data-content","variant","push","Component","connect","appState","auth"],"mappings":"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","file":"static/js/30.ecd02f30.chunk.js","sourcesContent":["import React, { Component, createRef } from \"react\";\r\nimport {\r\n  CButton,\r\n  CForm,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CSpinner,\r\n  CAlert,\r\n  CInvalidFeedback,\r\n} from \"@coreui/react\";\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { shallowCopy, checkCamera, checkDevice } from \"utils/helpers\";\r\nimport { APP_MESSAGES } from \"utils/constants/constant\";\r\nimport { actionCreator, ActionTypes } from \"utils/actions\";\r\nimport { ConfirmDialog, Modal } from \"reusable\";\r\nimport api from \"utils/api\";\r\nimport { CenteredLayout } from \"containers\";\r\nimport QrCodeScanner from \"./QrCodeScanner\";\r\nimport { config } from 'utils/config'\r\n\r\nconst invalidCredentialsMessage = \"Invalid Credentials\"\r\nclass Login extends Component {\r\n\r\n  state = {\r\n    credentials: {\r\n      username: config.IS_DEV ? \"ytorres1\" : '',\r\n      password: config.IS_DEV ? \"yoltorres24!\" : '',\r\n    },\r\n    camera: false,\r\n    changed: false,\r\n    isLoading: false,\r\n    error: \"\",\r\n    cameraError: '',\r\n    showError: false\r\n  };\r\n  dialog = createRef();\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ changed: true, showError: false, error: '' });\r\n    let copy = shallowCopy(this.state.credentials);\r\n    copy[e.target.name] = e.target.value;\r\n    this.setState({ credentials: copy });\r\n  };\r\n\r\n  toggleDialog = () => {\r\n    this.dialog.current.toggle();\r\n  }\r\n\r\n  loginAttempt = async () => {\r\n    this.setState({ showError: false })\r\n    if (!this.props.already_logged) {\r\n      let { dispatch, history } = this.props;\r\n      if (\r\n        this.state.credentials.password === \"\" ||\r\n        this.state.credentials.username === \"\"\r\n      ) {\r\n        this.setState({ showError: true, error: APP_MESSAGES.INPUT_REQUIRED });\r\n        return;\r\n      }\r\n      this.setState({ isLoading: true });\r\n      dispatch(actionCreator(ActionTypes.FETCH_PROFILE_PENDING));\r\n      let res = await api.post(\"/login\", this.state.credentials);\r\n      this.setState({ isLoading: false });\r\n      if (!res.error) {\r\n        let { access_token, account_information } = res.data;\r\n        let user;\r\n        if (account_information.length) {\r\n          user = account_information[0];\r\n        }\r\n\r\n        if (!user) {\r\n          this.setState({ showError: true, error: APP_MESSAGES.INPUT_REQUIRED });\r\n          this.setState({ error: invalidCredentialsMessage, showError: true });\r\n          this.setState({ isLoading: false });\r\n        }\r\n\r\n        localStorage.setItem(\"token\", access_token);\r\n        localStorage.setItem(\"uId\", user.userId);\r\n        dispatch(\r\n          actionCreator(\r\n            ActionTypes.FETCH_PROFILE_SUCCESS,\r\n            account_information[0]\r\n          )\r\n        );\r\n        dispatch(actionCreator(ActionTypes.FETCH_LEAVE_REQUEST));\r\n        dispatch(actionCreator(ActionTypes.LOGIN));\r\n        history.replace(\"/\");\r\n      } else {\r\n        this.setState({ error: res.message, showError: true });\r\n        this.setState({ isLoading: false });\r\n        // this.toggleDialog();\r\n      }\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    sessionStorage.clear();\r\n    if (!this.props.already_logged) {\r\n      checkCamera()\r\n        .then(() => {\r\n          this.setState({ camera: true });\r\n        })\r\n        .catch((err) => {\r\n          this.setState({ cameraError: err.cameraError, camera: false });\r\n        });\r\n    }\r\n  }\r\n  render() {\r\n    let { showError, error } = this.state\r\n    if (this.props.already_logged) {\r\n      return <Redirect to=\"/dashboard\" />;\r\n    }\r\n    sessionStorage.clear();\r\n    return (\r\n      <CenteredLayout>\r\n        <ConfirmDialog\r\n          id=\"cutom_dialog\"\r\n          ref={this.dialog}\r\n          {...{\r\n            confirmButton: false,\r\n            title: this.state.cameraError,\r\n            cancelButtonText: \"Ok\",\r\n          }}\r\n        ></ConfirmDialog>\r\n        <CForm>\r\n          <h2>Welcome Back</h2>\r\n          <p className=\"text-muted\">Sign In to your account</p>\r\n          {\r\n            showError &&\r\n            <CAlert color=\"danger\" className=\"text-center\">\r\n              {error}\r\n            </CAlert>\r\n          }\r\n          <CInputGroup className=\"mb-3\">\r\n            <CInputGroupPrepend>\r\n              <CInputGroupText>\r\n                <CIcon name=\"cil-user\" />\r\n              </CInputGroupText>\r\n            </CInputGroupPrepend>\r\n            <CInput\r\n              type=\"text\"\r\n              value={this.state.credentials.username || \"\"}\r\n              placeholder=\"email/username\"\r\n              disabled={this.state.isLoading}\r\n              name=\"username\"\r\n              autoComplete=\"email\"\r\n              invalid={\r\n                this.state.credentials.username === \"\" &&\r\n                this.state.changed\r\n              }\r\n              onChange={this.handleChange}\r\n            />\r\n            <CInvalidFeedback className=\"help-block\">\r\n              {APP_MESSAGES.INPUT_REQUIRED}\r\n            </CInvalidFeedback>\r\n          </CInputGroup>\r\n          <CInputGroup className=\"mb-4\">\r\n            <CInputGroupPrepend>\r\n              <CInputGroupText>\r\n                <CIcon name=\"cil-lock-locked\" />\r\n              </CInputGroupText>\r\n            </CInputGroupPrepend>\r\n            <CInput\r\n              type=\"password\"\r\n              value={this.state.credentials.password || \"\"}\r\n              placeholder=\"Password\"\r\n              name=\"password\"\r\n              autoComplete=\"current-password\"\r\n              disabled={this.state.isLoading}\r\n              onChange={this.handleChange}\r\n              invalid={this.state.credentials.password === \"\" && this.changed}\r\n            />\r\n            <CInvalidFeedback className=\"help-block\">\r\n              {APP_MESSAGES.INPUT_REQUIRED}\r\n            </CInvalidFeedback>\r\n          </CInputGroup>\r\n          <CButton\r\n            block\r\n            onClick={this.loginAttempt}\r\n            disabled={\r\n              this.state.isLoading ||\r\n              this.state.credentials.password === \"\" ||\r\n              this.state.credentials.email === \"\"\r\n            }\r\n            color=\"primary\"\r\n            className=\"px-4\"\r\n          >\r\n            {this.state.isLoading ? (\r\n              <CSpinner color=\"secondary\" size=\"sm\" />\r\n            ) : (\r\n                \"Login\"\r\n              )}\r\n          </CButton>\r\n          <hr className=\"hr-text\" data-content=\"OR\" />\r\n          {/* {!this.state.camera || this.state.isLoading ? (\r\n            <CButton\r\n              disabled={this.state.isLoading}\r\n              block\r\n              onClick={this.toggleDialog}\r\n              color=\"primary\"\r\n              className=\"px-4\"\r\n            >\r\n              {\" \"}\r\n              Login with QRCode{\" \"}\r\n            </CButton>\r\n          ) : (\r\n              <QrCodeScanner\r\n\r\n                onLoading={(status) => this.setState({ isLoading: status })}\r\n              />\r\n            )} */}\r\n\r\n          <CButton\r\n            block\r\n            className=\"float-center\"\r\n            color=\"primary\"\r\n            variant=\"outline\"\r\n            disabled={this.state.isLoading}\r\n            onClick={() => {\r\n              this.props.history.push(\"/account-recovery\");\r\n            }}\r\n          >\r\n            Forgot password\r\n          </CButton>\r\n        </CForm>\r\n      </CenteredLayout>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  already_logged: state.appState.auth.already_logged,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Login);\r\n"],"sourceRoot":""}