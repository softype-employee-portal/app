{"version":3,"sources":["modules/repository/Repositoryv1.js","modules/repository/RepositoryModal.js"],"names":["Repository","history","useHistory","$blue","colors","$orange","$green","$theme","$red","span","FILE_TYPES","map","fileType","idx","setWidth","key","id","name","style","cursor","onClick","route","toLowerCase","push","className","accentColor","textAlign","size","color","path","icon","extensions","ext","shape","isHidden","RepositoryModal","isUpdate","dispatch","useDispatch","employeeId","useSelector","state","appState","auth","user","modal","useRef","fileInput","useState","file","setFile","description","setDescription","isLoading","setIsLoading","type","setType","error","setError","modalOnCloseCallback","uploadFile","a","payload","FormData","append","dispatchNotification","message","api","post","res","fetchCompanyVideos","fetchCompanyImages","fetchCompanyDocuments","fetchCompanyFiles","toggleModal","current","toggle","useEffect","console","log","mdiPlus","ref","centered","hidden","btnTitle","title","modalOnClose","footer","submit","_errors","length","trim","split","Set","btnText","hideCancelButton","whiteSpace","margin","join","some","v","includes","click","mdiFilePlusOutline","$grey_light","onChange","e","files","target","value","extension","getFileExtension","file_type","_onError","placeholder","rows","invalid"],"mappings":"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","file":"static/js/23.24baae28.chunk.js","sourcesContent":["import React from 'react'\r\nimport {\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CRow,\r\n    CContainer,\r\n    CCardFooter,\r\n    CBadge\r\n} from '@coreui/react'\r\nimport { FILE_TYPES } from 'utils/constants/constant'\r\nimport Icon from '@mdi/react'\r\nimport colors from 'assets/theme/colors'\r\nimport { setWidth } from 'utils/helpers';\r\nimport { useHistory } from 'react-router-dom'\r\nimport RepositoryModal from './RepositoryModal';\r\nconst Repository = () => {\r\n    const history = useHistory();\r\n    const { $blue, $orange, $green, $red } = colors;\r\n    const $theme = [\r\n        ['info', 'primary', 'danger', 'success'],\r\n        [$blue, $orange, $red, $green]\r\n    ]\r\n    const goToRoute = (route) => {\r\n        history.push(`/repository/${route}`)\r\n    }\r\n    return (\r\n        <>\r\n            <CContainer>\r\n                <CRow span={9} >\r\n                    {FILE_TYPES.map((fileType, idx) => {\r\n                        return (\r\n                            <CCol {...setWidth(6)} key={`card_${idx}`}>\r\n                                <CCard id={fileType.name} style={{ cursor: 'pointer' }} onClick={() => {\r\n                                    goToRoute(fileType.name.toLowerCase())\r\n                                }} className=\"mx-4\" accentColor={$theme[0][idx]}>\r\n                                    <CCardHeader>\r\n                                        <h2 className=\"text-center\">{fileType.name}</h2>\r\n                                    </CCardHeader>\r\n                                    <CCardBody style={{ textAlign: \"center\" }}>\r\n                                        <Icon size={5} color={$theme[1][idx]} path={fileType.icon} />\r\n                                    </CCardBody>\r\n                                    <CCardFooter className=\"justify-content-center\">\r\n                                        {fileType.extensions.map(ext => {\r\n                                            return <CBadge key={ext} className=\"px-3 py-2 mx-1\" color={$theme[0][idx]} shape=\"pill\">{ext}</CBadge>\r\n                                        })}\r\n                                    </CCardFooter>\r\n                                </CCard>\r\n                            </CCol>\r\n                        )\r\n                    })}\r\n                </CRow>\r\n            </CContainer>\r\n            <RepositoryModal {...{ isHidden: true }} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Repository\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport {\r\n    CButton, CCard, CCardBody,\r\n    CInput,\r\n    CInvalidFeedback,\r\n    CRow,\r\n    CCol,\r\n    CTextarea,\r\n    CAlert\r\n} from \"@coreui/react\";\r\nimport { Modal, LoadingButton } from 'reusable'\r\nimport Icon from '@mdi/react';\r\nimport { mdiFilePlusOutline, mdiPlus } from '@mdi/js'\r\nimport colors from 'assets/theme/colors'\r\nimport { FILE_TYPES } from 'utils/constants/constant'\r\nimport { getFileExtension, dispatchNotification } from 'utils/helpers'\r\nimport {\r\n    fetchCompanyFiles,\r\n    fetchCompanyVideos,\r\n    fetchCompanyImages,\r\n    fetchCompanyDocuments,\r\n    fetchDepartments,\r\n} from 'utils/helpers/fetch';\r\nimport api from 'utils/api';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nconst RepositoryModal = ({ isUpdate = false, isHidden = false }) => {\r\n    const dispatch = useDispatch()\r\n    const employeeId = useSelector(state => state.appState.auth.user.employeeId)\r\n    let modal = useRef();\r\n    let fileInput = useRef();\r\n    const [file, setFile] = useState([]);\r\n    const [description, setDescription] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [type, setType] = useState('')\r\n    const [error, setError] = useState([])\r\n\r\n\r\n    const modalOnCloseCallback = () => {\r\n        if (!isLoading) {\r\n            setFile(\"\");\r\n            setDescription(\"\");\r\n            setError([]);\r\n        }\r\n    }\r\n    const _onError = message => {\r\n        // let currentError = copyArray(error)\r\n        //\r\n        if (!error.includes(message)) {\r\n            return setError([...error, message])\r\n        }\r\n        // currentError.push(message)\r\n        // setError(currentError)\r\n        // currentError = []\r\n    }\r\n    const fileInputChangeHandler = (e) => {\r\n        setError([])\r\n        let { files } = e.target\r\n        if (!files || files.length === 0) {\r\n            _onError(\"Please attatch some file.\")\r\n            return\r\n        }\r\n        let value = files[0]\r\n        setFile(value)\r\n        let extension = getFileExtension(value.name)\r\n        for (let idx = 0; idx < FILE_TYPES.length; idx++) {\r\n            const file_type = FILE_TYPES[idx];\r\n            if (file_type.extensions.includes(extension.toLowerCase())) {\r\n                setType(file_type.name.toLowerCase());\r\n                break;\r\n            } else {\r\n                setType(\"others\")\r\n            }\r\n        }\r\n    }\r\n    const uploadFile = async () => {\r\n        let payload = new FormData()\r\n        payload.append('file', file);\r\n        payload.append(\"description\", description)\r\n        payload.append(\"type\", type)\r\n        payload.append(\"employeeId\", +employeeId)\r\n        dispatchNotification(dispatch, { type: 'info', message: 'Uploading' })\r\n        setIsLoading(true)\r\n        let res = await api.post(\"/add_file\", payload, true);\r\n        if (res.error) {\r\n            setError([res.message])\r\n            dispatchNotification(dispatch, { type: 'error', message: 'Error in uploading file' })\r\n        } else {\r\n            switch (type) {\r\n                case 'videos':\r\n                    await fetchCompanyVideos(dispatch)\r\n                    break;\r\n                case 'images':\r\n                    await fetchCompanyImages(dispatch)\r\n                    break;\r\n                case 'documents':\r\n                    await fetchCompanyDocuments(dispatch)\r\n                    break;\r\n                default:\r\n                    await fetchCompanyFiles(dispatch)\r\n                    break;\r\n            }\r\n        }\r\n        setIsLoading(false)\r\n        toggleModal()\r\n    }\r\n\r\n    const renderError = () => {\r\n        return error.length ? (<CAlert color=\"danger justify-content-center text-align-center\">\r\n            {\r\n                <p style={{ whiteSpace: 'pre', margin: '0' }}> {error.join(`\\r\\n`)}</p>\r\n\r\n            }\r\n        </CAlert>) : null\r\n    }\r\n\r\n    // \r\n    const preUpload = () => {\r\n        let _errors = []\r\n        setError([])\r\n        if (!file || file.length === 0) {\r\n            _errors.push(\"File is required.\");\r\n        }\r\n        if (!description) {\r\n            _errors.push(\"Description is required.\");\r\n        }\r\n        if (description.trim().split(\" \").length > 50) {\r\n            _errors.push(\"Descrition must not be greater than 50 characters.\");\r\n        }\r\n        setError([...new Set(_errors)])\r\n        if (file !== [] && description) {\r\n            return uploadFile()\r\n        }\r\n    }\r\n    const toggleModal = () => {\r\n        modal.current.toggle()\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(error);\r\n    }, [error])\r\n\r\n    return (\r\n        <>\r\n            <button className=\"btn  btn-primary fab\" onClick={toggleModal}>\r\n                <Icon size={2} path={mdiPlus} />\r\n            </button>\r\n            <Modal\r\n                ref={modal}\r\n                centered\r\n                hidden={isHidden}\r\n                btnTitle={`Upload File`}\r\n                title={isUpdate ? 'Update' : 'New File'}\r\n                modalOnClose={modalOnCloseCallback}\r\n                footer={\r\n                    <>\r\n                        <LoadingButton {...{ isLoading, submit: preUpload, btnText: 'Upload' }} />\r\n                        <CButton color=\"danger\" onClick={() => {\r\n                            modal.current.toggle()\r\n                            modalOnCloseCallback()\r\n                        }} >Cancel</CButton>\r\n                    </>\r\n                }\r\n                hideCancelButton\r\n            >\r\n                {renderError()}\r\n                <CRow className=\"justify-content-center\">\r\n                    <CCol  >\r\n                        <CCard style={{ cursor: 'pointer' }} accentColor={error.some(v => v.includes('file')) || !file.length ? 'danger' : file.length && 'info'} onClick={() => {\r\n                            fileInput.current.click();\r\n                        }}>\r\n                            <CCardBody style={{ textAlign: \"center\" }}>\r\n                                <CRow>\r\n                                    <CCol>\r\n                                        <Icon path={mdiFilePlusOutline} size={5} color={!file ? colors.$grey_light : colors.$blue} />\r\n                                    </CCol>\r\n                                </CRow>\r\n                                <CRow>\r\n                                    <CCol>\r\n                                        <span style={{ color: file ? colors.$blue : colors.$grey_light }}>{file ? file.name : 'click here to add a file'}  </span>\r\n                                    </CCol>\r\n                                </CRow>\r\n                            </CCardBody>\r\n                        </CCard>\r\n                        <CInput hidden />\r\n                    </CCol>\r\n                </CRow>\r\n                <CRow className=\"justify-content-center\">\r\n                    <input type=\"file\" ref={fileInput} hidden onChange={fileInputChangeHandler} />\r\n                    <CCol >\r\n                        <CTextarea\r\n                            value={description || \"\"}\r\n                            placeholder=\"Description (max is 50 words)\"\r\n                            name=\"description\"\r\n                            rows=\"4\"\r\n                            invalid={(error.some(v => v.toLowerCase().includes('description')))}\r\n                            onChange={(e) => {\r\n                                setError([])\r\n                                setDescription(e.target.value)\r\n                            }}\r\n                        />\r\n                    </CCol>\r\n                </CRow>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RepositoryModal\r\n"],"sourceRoot":""}