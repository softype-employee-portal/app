{"version":3,"sources":["modules/ticket/component/TicketFilter.js","models/TicketModel.js","modules/ticket/component/TicketForm.js","modules/ticket/component/TicketDetailsV1.js","modules/ticket/Ticket.js"],"names":["TicketFilter","show","dispatch","onClearFilter","useDispatch","useState","loading","setLoading","OFFICE_REQUEST_FILTER","state","setstate","setPrevFilter","handleChange","e","target","name","value","newState","shallowCopy","sendNotification","type","message","dispatchNotification","onFilterRequests","a","filterTickets","res","error","className","setWidth","htmlFor","size","year","id","onChange","hidden","YEARS","map","key","month","MONTHS","custom","status","Object","keys","TICKET_STATUS","Number","gutters","disabled","block","color","onClick","employeeId","item","quantity","description","purpose","price","total_price","TicketForm","defaultErrors","date_needed","isLoading","setIsLoading","TicketModel","data","setData","errors","setErrors","user","useSelector","authed","appState","auth","firstname","lastname","userId","toCapitalize","handleOnChange","copy","_total","validate","dateValid","moment","isSameOrAfter","_errors","_","values","includes","dialogRef","current","toggle","handleSubmit","api","post","actionCreator","ActionTypes","ADD_TICKET","renameKey","officeRequest_information","fetchTickets","modalRef","modalOnClose","renderError","field","useRef","ref","title","footer","submit","btnText","cancelBtnTitle","onConfirm","invalid","placeholder","row","xs","rows","TicketDetails","props","person_in_charge","remarks","date_requested","resolved_date","ticketDetails","entries","style","borderBottom","index","toString","splitSnakeCase","splitCamelCase","toLowerCase","formatDate","Date","formattedValue","Ticket","setStatus","collapse","setCollapse","tickets","setTickets","clickedRejectBtn","setClickedRejectBtn","clickedApproveBtn","setClickedApproveBtn","clickedDeleteBtn","setClickedDeleteBtn","default_filter","CURRENT_YEAR","CURRENT_MONTH","filter","setFilter","modal","dialog","accountType","requestsData","ticket","ticket_requests","filteredTicketRequest","setFilteredTicketRequest","getBadge","STATUS","toggleModal","officeRequestId","indicator","CLOSE_TICKET","onDelete","DELETE_TICKET","useEffect","xl","centered","onCloseCallback","closeButton","hideCancelButton","sm","preventDefault","onStatusChange","items","fields","label","_style","width","itemsPerPage","hover","pagination","onRowClick","clickableRows","noItemsViewSlot","scopedSlots"],"mappings":"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","file":"static/js/31.8196b392.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCol,\r\n  CCollapse,\r\n  CRow,\r\n  CFormGroup,\r\n  CInput,\r\n  CLabel,\r\n  CSelect,\r\n  CButton\r\n} from \"@coreui/react\";\r\nimport { useDispatch } from 'react-redux'\r\nimport { MONTHS, YEARS, TICKET_STATUS, OFFICE_REQUEST_FILTER } from \"utils/constants/constant\";\r\nimport { setWidth, plotArray, shallowCopy, dispatchNotification } from \"utils/helpers\";\r\nimport { filterTickets } from \"utils/helpers/fetch\";\r\n\r\n\r\nconst TicketFilter = ({ show,  onClearFilter }) => {\r\n  const dispatch = useDispatch();\r\n  const [loading, setLoading] = useState(false)\r\n  const [state, setstate] = useState(OFFICE_REQUEST_FILTER)\r\n  const [prevFilter, setPrevFilter] = useState({})\r\n\r\n  const handleChange = (e) => {\r\n    let { name, value } = e.target\r\n    let newState = shallowCopy(state);\r\n    newState[name] = value;\r\n    setstate(newState)\r\n\r\n  }\r\n\r\n  const clearFilter = () => {\r\n    setstate(OFFICE_REQUEST_FILTER)\r\n    onFilterRequests()\r\n  }\r\n\r\n  const sendNotification = (type, message) => {\r\n    dispatchNotification(dispatch, { type: type, message: message })\r\n  }\r\n\r\n  const onFilterRequests = async () => {\r\n    // if (JSON.stringify(state) === JSON.stringify(prevFilter)) return;\r\n    // alert(\"test\")\r\n    setLoading(true)\r\n    sendNotification('info', 'Please wait')\r\n    setPrevFilter(state)\r\n    let res = await filterTickets(dispatch, state)\r\n    setLoading(false)\r\n    if (!res.error) {\r\n      sendNotification('success', 'Success');\r\n    } else {\r\n      sendNotification('error', res.message)\r\n    }\r\n  }\r\n\r\n  return (<>\r\n    <CCollapse show={show}>\r\n      <CRow className=\"pt-4\">\r\n        <CCol>\r\n          <CCard>\r\n            <CCardBody>\r\n              <CRow >\r\n                <CCol {...setWidth(\"3\")} className=\"float-right\">\r\n                  <CFormGroup>\r\n                    <CLabel htmlFor=\"date-input\" className=\"font-weight-bold\">\r\n                      <span>Year</span>\r\n                    </CLabel>\r\n                    <CSelect\r\n                      className=\"input-sm\"\r\n                      size=\"sm\"\r\n                      name=\"year\"\r\n                      value={state.year}\r\n                      id=\"year\"\r\n                      onChange={handleChange}\r\n                    >\r\n                      <option value=\"\" hidden>\r\n                        Select\r\n                        </option>\r\n                      <option value=\"All\">All</option>\r\n                      <option value={state.year} hidden>{state.year}</option>\r\n                      {YEARS.map(key => {\r\n                        return (\r\n                          <option key={key} value={+key}>\r\n                            {key}\r\n                          </option>\r\n                        );\r\n                      })}\r\n                    </CSelect>\r\n                  </CFormGroup>\r\n                </CCol>\r\n                <CCol {...setWidth(\"3\")} className=\"float-right\">\r\n                  <CFormGroup>\r\n                    <CLabel className=\"font-weight-bold\">\r\n                      <span>Month</span>\r\n                    </CLabel>\r\n                    <CSelect\r\n                      className=\"input-sm\"\r\n                      size=\"sm\"\r\n                      name=\"month\"\r\n                      value={state.month}\r\n                      id=\"month\"\r\n                      onChange={handleChange}\r\n                    >\r\n                      <option value=\"\" hidden>\r\n                        Select\r\n                        </option>\r\n                      <option value={state.month} hidden>{state.month}</option>\r\n                      <option value=\"All\">All</option>\r\n                      {MONTHS.map(key => {\r\n                        return (\r\n                          <option key={key} value={key}>\r\n                            {key}\r\n                          </option>\r\n                        );\r\n                      })}\r\n                    </CSelect>\r\n                  </CFormGroup>\r\n                </CCol>\r\n                <CCol {...setWidth(\"3\")} className=\"float-right\">\r\n                  <CFormGroup>\r\n                    <CLabel htmlFor=\"status\" className=\"font-weight-bold\">\r\n                      <span>Status:</span>\r\n                    </CLabel>\r\n                    <CSelect\r\n                      custom\r\n                      className=\"input-sm\"\r\n                      size=\"sm\"\r\n                      name=\"status\"\r\n                      value={state.status}\r\n                      id=\"status\"\r\n                      onChange={handleChange}\r\n                    >\r\n                      <option value=\"\" hidden>\r\n                        {state.status}\r\n                      </option>\r\n                      <option value=\"All\">All</option>\r\n                      {Object.keys(TICKET_STATUS).map((key) => {\r\n                        return (\r\n                          <option key={key} value={+key}>\r\n                            {Number(key) === 0 ? 'Closed' : 'Open'}\r\n                          </option>\r\n                        );\r\n                      })}\r\n                    </CSelect>\r\n                  </CFormGroup>\r\n                </CCol>\r\n                <CCol {...setWidth(\"3\")}>\r\n                  <CRow gutters={false}>\r\n                    <CCol>\r\n                      <CFormGroup className=\"my-0\">\r\n                        <CLabel htmlFor=\"date-input\" className=\"font-weight-bold mb-1\"></CLabel>\r\n                        <CButton disabled={loading} block size=\"sm\" color=\"info\" className=\"mt-2\"\r\n                          onClick={onFilterRequests}\r\n                        >Apply</CButton>\r\n                      </CFormGroup>\r\n                    </CCol>\r\n                    <CCol className=\"ml-1\" >\r\n                      <CFormGroup className=\"my-0\">\r\n                        <CLabel htmlFor=\"date-input\" className=\"font-weight-bold mb-1\"></CLabel>\r\n                        <CButton disabled={loading} block size=\"sm\" color=\"danger\" className=\"mt-2\"\r\n                          onClick={() => {\r\n                            clearFilter()\r\n                          }}\r\n                        >Clear</CButton>\r\n                      </CFormGroup>\r\n                    </CCol>\r\n                  </CRow>\r\n                </CCol>\r\n              </CRow>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n    </CCollapse>\r\n  </>\r\n  )\r\n};\r\n\r\nexport default TicketFilter;\r\n","export default {\r\n  employeeId: null,\r\n  name: '',\r\n  item: '',\r\n  quantity: 0,\r\n  description: '',\r\n  purpose: '',\r\n  price: 0,\r\n  total_price: 0\r\n}\r\n\r\n\r\nexport class Ticket {\r\n  constructor(employeeId, name, item, quantity, description, purpose) {\r\n    this.employeeId = employeeId\r\n    this.name = name\r\n    this.item = item\r\n    this.quantity = quantity\r\n    this.description = description\r\n    this.purpose = purpose\r\n  }\r\n}\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport {\r\n  CButton,\r\n  CCol,\r\n  CFormGroup,\r\n  CTextarea,\r\n  CInput,\r\n  CLabel,\r\n  CSelect,\r\n  CInvalidFeedback,\r\n  CSpinner,\r\n} from '@coreui/react'\r\nimport { Modal, ConfirmDialog, LoadingButton } from 'reusable'\r\nimport { actionCreator, ActionTypes } from 'utils/actions';\r\nimport TicketModel from 'models/TicketModel'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { shallowCopy, dispatchNotification, toCapitalize, renameKey } from 'utils/helpers';\r\nimport api from 'utils/api';\r\nimport _ from 'lodash';\r\nimport moment from 'moment';\r\nimport { fetchTickets } from 'utils/helpers/fetch';\r\n\r\nconst TicketForm = () => {\r\n  const defaultErrors = {\r\n    item: false,\r\n    quantity: false,\r\n    date_needed: false,\r\n    price: false,\r\n    purpose: false\r\n  }\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [data, setData] = useState(TicketModel)\r\n  const [errors, setErrors] = useState(defaultErrors)\r\n\r\n  const user = useSelector(state => {\r\n    let authed = state.appState.auth.user;\r\n    return {\r\n      firstname: authed.firstname,\r\n      lastname: authed.lastname,\r\n      employeeId: authed.employeeId,\r\n      userId: authed.userId\r\n    }\r\n  })\r\n\r\n  TicketModel.name = `${toCapitalize(user.firstname)} ${toCapitalize(user.lastname)}`\r\n  TicketModel.employeeId = user.employeeId\r\n\r\n  const handleOnChange = (e) => {\r\n    setErrors(defaultErrors)\r\n    let key = e.target.name\r\n    let value = e.target.value\r\n    let copy = shallowCopy(data)\r\n    copy[key] = value\r\n    let _total = copy['price'] * copy['quantity']\r\n    copy['total_price'] = _total > 0 ? _total : 0;\r\n    setData(copy)\r\n  }\r\n\r\n  const validate = () => {\r\n    let dateValid = moment(data.date_needed).isSameOrAfter(moment());\r\n    let _errors = {}\r\n    let { item, quantity, date_needed, price, purpose } = data\r\n    if (!item) {\r\n      _errors['item'] = true;\r\n    }\r\n    if (quantity < 1) {\r\n      _errors['quantity'] = true;\r\n    }\r\n    if (!date_needed || !dateValid) {\r\n      _errors['date_needed'] = true;\r\n    }\r\n    if (price < 1) {\r\n      _errors['price'] = true;\r\n    }\r\n    if (!purpose) {\r\n      _errors['purpose'] = true;\r\n    }\r\n    setErrors(_errors)\r\n    if (_.values(_errors).includes(true)) {\r\n      return\r\n    }\r\n    // handleSubmit()\r\n    dialogRef.current.toggle()\r\n  }\r\n\r\n  const handleSubmit = async () => {\r\n    dispatchNotification(dispatch, { type: 'info', message: \"Please wait\" });\r\n    setIsLoading(true)\r\n    let res = await api.post(\"/create_officeRequest \", data)\r\n    setIsLoading(false)\r\n    if (!res.error) {\r\n      dispatch(actionCreator(ActionTypes.ADD_TICKET, renameKey(res.data.officeRequest_information[0])))\r\n      fetchTickets(dispatch)\r\n      modalRef.current.toggle()\r\n      modalOnClose()\r\n    } else {\r\n      dispatchNotification(dispatch, { type: 'error', message: res.message });\r\n    }\r\n  }\r\n\r\n  const renderError = (field) => {\r\n    let message = \"\";\r\n    switch (field) {\r\n      case 'date_needed':\r\n        message = \"Invalid date\";\r\n        break;\r\n      case 'quantity':\r\n        message = \"Invalid Quantity\";\r\n        break;\r\n      case 'price':\r\n        message = \"Invalid Price\";\r\n        break;\r\n      case 'item':\r\n        message = \"Item is required\";\r\n        break;\r\n    }\r\n\r\n    return <CInvalidFeedback className=\"help-block\">\r\n      {message}\r\n    </CInvalidFeedback>\r\n  }\r\n\r\n  const modalOnClose = () => {\r\n    setErrors(defaultErrors)\r\n    setData(TicketModel)\r\n  }\r\n  const modalRef = useRef();\r\n  const dialogRef = useRef();\r\n\r\n  const actions = () => (\r\n    <>\r\n      <CButton color=\"primary\" disabled={isLoading} onClick={validate}>\r\n        {\r\n          isLoading ? <CSpinner color=\"secondary\" size=\"sm\" /> : 'Submit'\r\n        }\r\n      </CButton>\r\n    </>\r\n  )\r\n\r\n  return (\r\n    <Modal ref={modalRef} {...{\r\n      title: \"New Request\",\r\n      footer: <>\r\n        <LoadingButton  {...{ isLoading, submit: validate, btnText: \"Submit\" }} />\r\n      </>,\r\n      modalOnClose,\r\n      cancelBtnTitle: \"Close\"\r\n    }}>\r\n      <ConfirmDialog\r\n        id=\"cutom_dialog\"\r\n        ref={dialogRef}\r\n        {...{\r\n          onConfirm: () => {\r\n            dialogRef.current.toggle()\r\n            handleSubmit();\r\n          },\r\n          title: \"Please confirm.\",\r\n        }}\r\n      ></ConfirmDialog>\r\n      <CFormGroup >\r\n        <CLabel>Requestor : </CLabel>\r\n        <CInput id=\"name\" value={data.name} disabled />\r\n      </CFormGroup>\r\n      <CFormGroup >\r\n        <CLabel>Item : </CLabel>\r\n        <CInput\r\n          name=\"item\"\r\n          onChange={handleOnChange}\r\n          invalid={errors.item}\r\n          placeholder=\"name/brand ect.\"\r\n          value={data.item || \"\"}\r\n        />\r\n        {renderError('item')}\r\n\r\n      </CFormGroup>\r\n      <CFormGroup row className=\"my-0\">\r\n        <CCol xs=\"6\">\r\n          <CFormGroup >\r\n            <CLabel>Price per item : </CLabel>\r\n            <CInput\r\n              type=\"number\"\r\n              name=\"price\"\r\n              value={data.price}\r\n              onChange={handleOnChange}\r\n              invalid={errors.price}\r\n              placeholder=\"0.00\"\r\n            />\r\n            {renderError('price')}\r\n          </CFormGroup>\r\n        </CCol>\r\n        <CCol xs=\"6\">\r\n          <CFormGroup >\r\n            <CLabel>Quantity : </CLabel>\r\n            <CInput\r\n              type=\"number\"\r\n              name=\"quantity\"\r\n              value={data.quantity}\r\n              onChange={handleOnChange}\r\n              invalid={errors.quantity}\r\n              placeholder=\"0\"\r\n            />\r\n            {renderError('quantity')}\r\n          </CFormGroup>\r\n        </CCol>\r\n      </CFormGroup>\r\n\r\n\r\n      <CFormGroup >\r\n        <CLabel>Total Price : </CLabel>\r\n        <CInput id=\"name\" value={data.total_price} disabled />\r\n      </CFormGroup>\r\n      <CFormGroup>\r\n        <CLabel htmlFor=\"textarea-input\">Purpose : </CLabel>\r\n        <CTextarea\r\n          onChange={handleOnChange}\r\n          name=\"purpose\"\r\n          value={data.purpose}\r\n          invalid={errors.purpose}\r\n          rows=\"5\"\r\n        />\r\n        <CInvalidFeedback className=\"help-block\">\r\n          Please provide a valid information\r\n                  </CInvalidFeedback>\r\n      </CFormGroup>\r\n      <CFormGroup >\r\n        <CLabel htmlFor=\"date-input\">Date Needed : </CLabel>\r\n        <CInput\r\n          type=\"date\"\r\n          onChange={handleOnChange}\r\n          name=\"date_needed\"\r\n          invalid={errors.date_needed}\r\n          placeholder=\"Date Needed\" />\r\n        {renderError('date_needed')}\r\n      </CFormGroup>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default TicketForm\r\n","import React from 'react';\r\nimport { CCardBody, CCol, CDataTable, CCardTitle, CRow, CLabel, CButton, CCardText } from \"@coreui/react\";\r\nimport { formatDate, splitSnakeCase, splitCamelCase } from 'utils/helpers';\r\n\r\n\r\nconst TicketDetails = (props) => {\r\n  let {\r\n    id,\r\n    name,\r\n    person_in_charge = props['person in charge'],\r\n    item,\r\n    quantity,\r\n    description,\r\n    status,\r\n    remarks,\r\n    date_requested = props['date requested'],\r\n    resolved_date = props['resolve date']\r\n  } = props\r\n  const ticketDetails = Object.entries(props)\r\n\r\n  const formattedValue = (key, value) => {\r\n    if (key.toLowerCase() === \"status\") {\r\n      return value === 0 ? \"Closed\" : \"Open\"\r\n    }\r\n    if (key.toLowerCase() === \"date requested\") {\r\n      return formatDate(new Date(value))\r\n    }\r\n    return value;\r\n  }\r\n\r\n  return (\r\n    <CRow>\r\n      <CCol>\r\n        <CCardBody>\r\n          <table className=\"table table-hover \" style={{ borderBottom: \"1px solid grey\" }}>\r\n            <tbody>\r\n              {\r\n                ticketDetails.map(([key, value], index) => {\r\n                  return ((value !== null && key !== \"id\" && value !== '') &&\r\n                    <tr key={index.toString()}>\r\n                      <td className=\"text-capitalize\">  {`${splitSnakeCase(splitCamelCase(key))}:`}</td>\r\n                      <td>{\r\n                        <b><p>{formattedValue(key, value)}</p></b>\r\n                      }\r\n                      </td>\r\n                    </tr>\r\n                  )\r\n                })\r\n              }\r\n            </tbody>\r\n          </table>\r\n        </CCardBody>\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n\r\n}\r\n\r\nexport default TicketDetails\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { CBadge, CCard, CCardBody, CCol, CDataTable, CRow, CButton } from \"@coreui/react\";\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport { Modal, ConfirmDialog, NoData } from \"reusable\";\r\nimport { ActionTypes, actionCreator } from 'utils/actions';\r\nimport { TICKET_STATUS, CURRENT_MONTH, CURRENT_YEAR } from \"utils/constants/constant\";\r\nimport { renameKey, dispatchNotification } from 'utils/helpers';\r\nimport TicketFilter from \"./component/TicketFilter\";\r\nimport TicketForm from \"./component/TicketForm\";\r\nimport TicketDetails from \"./component/TicketDetailsV1\";\r\nimport api from 'utils/api'\r\nimport { config } from 'utils/config'\r\nimport _ from 'lodash';\r\nimport { fetchTickets } from 'utils/helpers/fetch';\r\n\r\n\r\nconst Ticket = (props) => {\r\n  const dispatch = useDispatch();\r\n  const [status, setStatus] = useState(\"All\");\r\n  const [collapse, setCollapse] = useState(true);\r\n  const [tickets, setTickets] = useState();\r\n  const [clickedRejectBtn, setClickedRejectBtn] = useState(false);\r\n  const [clickedApproveBtn, setClickedApproveBtn] = useState(false);\r\n  const [clickedDeleteBtn, setClickedDeleteBtn] = useState(false);\r\n  const [now, setNow] = useState(new Date)\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  const default_filter = {\r\n    year: CURRENT_YEAR,\r\n    month: CURRENT_MONTH,\r\n    status: 'All'\r\n  }\r\n  const [filter, setFilter] = useState(default_filter)\r\n  const modal = useRef();\r\n  const dialog = useRef();\r\n  const user = useSelector(state => {\r\n    let authed = state.appState.auth.user;\r\n    return {\r\n      firstname: authed.firstname,\r\n      lastname: authed.lastname,\r\n      employeeId: authed.employeeId,\r\n      userId: authed.userId,\r\n      accountType: authed.accountType\r\n    }\r\n  })\r\n  const fields = [\r\n    { key: 'transaction no', label: 'request no.' },\r\n    { key: 'date requested', _style: { width: '15%' } },\r\n    { key: 'name', label: 'Requestor', _style: { width: '15%' } },\r\n    { key: 'item', _style: { width: '15%' } },\r\n    { key: 'price' },\r\n    { key: 'quantity' },\r\n    { key: 'total price', label: 'Total' },\r\n    { key: 'status' },\r\n    { key: 'date needed' }\r\n  ]\r\n  const requestsData = useSelector((state) => {\r\n    return state.appState.ticket.ticket_requests\r\n  });\r\n\r\n  const [filteredTicketRequest, setFilteredTicketRequest] = useState();\r\n\r\n  const toggle = (e) => {\r\n    setCollapse(!collapse);\r\n    e.preventDefault();\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setStatus(e.target.value);\r\n  };\r\n\r\n  const getBadge = (STATUS, status) => {\r\n    return STATUS[status];\r\n  };\r\n\r\n  const toggleModal = (e) => {\r\n    setTickets(e);\r\n    modal.current.toggle();\r\n\r\n  };\r\n\r\n  const rejectRequestBtn = () => {\r\n    setClickedRejectBtn(true)\r\n    modal.current.toggle();\r\n    dialog.current.toggle();\r\n  }\r\n\r\n  const approveRequestBtn = () => {\r\n    setClickedApproveBtn(true)\r\n    modal.current.toggle();\r\n    dialog.current.toggle();\r\n  }\r\n\r\n  const deleteRequestBtn = () => {\r\n    setClickedDeleteBtn(true)\r\n    modal.current.toggle();\r\n    dialog.current.toggle();\r\n  }\r\n\r\n  const onConfirm = async () => {\r\n    let data = {\r\n      officeRequestId: tickets.id,\r\n      employeeId: user.employeeId,\r\n      indicator: clickedApproveBtn ? 1 : clickedRejectBtn ? 0 : 0\r\n    }\r\n    dispatchNotification(dispatch, { type: 'info', message: \"Please wait\" })\r\n    let res = await api.post(\"/close_officeRequest\", data)\r\n    if (!res.error) {\r\n      dispatch(actionCreator(ActionTypes.CLOSE_TICKET, renameKey(res.data.officeRequest_information[0])))\r\n      fetchTickets(dispatch)\r\n    } else {\r\n      dispatchNotification(dispatch, { type: 'error', message: res.message })\r\n    }\r\n    setClickedApproveBtn(false)\r\n    setClickedDeleteBtn(false)\r\n    setClickedRejectBtn(false)\r\n  }\r\n\r\n  const onDelete = async () => {\r\n    let res = await api.post(\"/delete_officeRequest\", { id: tickets.id })\r\n    if (!res.error) {\r\n      dispatch(actionCreator(ActionTypes.DELETE_TICKET), tickets.id)\r\n      fetchTickets(dispatch)\r\n    } else {\r\n      dispatchNotification(dispatch, { type: 'error', message: res.message })\r\n    }\r\n    setClickedApproveBtn(false)\r\n    setClickedDeleteBtn(false)\r\n    setClickedRejectBtn(false)\r\n  }\r\n\r\n  const onClearFilter = () => {\r\n    setFilter(default_filter)\r\n    setFilteredTicketRequest(requestsData)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setFilteredTicketRequest(requestsData)\r\n  }, [requestsData]);\r\n\r\n  return (\r\n    <CRow>\r\n      <CCol xl={12}>\r\n        <ConfirmDialog\r\n          ref={dialog}\r\n          {...{\r\n            show: dialog,\r\n            centered: true,\r\n            onConfirm: clickedDeleteBtn ? onDelete : onConfirm,\r\n            title: `${clickedApproveBtn ? \"Approve\" : clickedRejectBtn ? \"Reject\" : clickedDeleteBtn ? \"Delete\" : \"\"} request?`,\r\n            onCloseCallback: () => {\r\n              modal.current.toggle();\r\n              setClickedApproveBtn(false)\r\n              setClickedRejectBtn(false)\r\n              setClickedDeleteBtn(false)\r\n            }\r\n          }}\r\n        ></ConfirmDialog>\r\n        <Modal\r\n          ref={modal}\r\n          centered\r\n          title=\"Request Details\"\r\n          modalOnClose={toggleModal}\r\n          hidden\r\n          closeButton\r\n          footer={\r\n            (tickets && tickets.status === 1) && user.accountType === 1 ?\r\n              <>\r\n                <CButton color=\"success\" onClick={() => {\r\n                  approveRequestBtn()\r\n                }}>Approve</CButton>\r\n                <CButton color=\"danger\" onClick={() => {\r\n                  rejectRequestBtn()\r\n                }}>Reject</CButton>\r\n              </>\r\n              : user.accountType === 2 || user.accountType === 3 ?\r\n                <>\r\n                  <CButton color=\"danger\" onClick={() => {\r\n                    deleteRequestBtn()\r\n                  }}>Delete Request</CButton>\r\n                </>\r\n                : \"\"\r\n          }\r\n          hideCancelButton\r\n        >\r\n          <TicketDetails\r\n            {...tickets}\r\n          />\r\n        </Modal>\r\n        <CCard>\r\n          <CCardBody>\r\n            <CRow>\r\n              <CCol sm=\"5\">\r\n                <h4 className=\"card-title mb-0\">{Number(status) === 1 ? 'Open' : status === 'All' ? status : 'Closed'} Requests</h4>\r\n              </CCol>\r\n              <CCol sm=\"7\" className=\"d-none d-md-block\">\r\n                {\r\n                  // user.roleId > 1 &&\r\n                  <div className=\"float-right  mr-3\">\r\n                    <TicketForm />\r\n                  </div>\r\n                }\r\n                <div className={`float-right mr-3 ${!collapse && \"mb-2\"}`} >\r\n                  <CButton\r\n                    color={`${collapse ? \"secondary\" : \"primary\"}`}\r\n                    onClick={toggle}\r\n                    className={\"mb-1\"}\r\n                  >\r\n                    {collapse ? \"Hide\" : \"Show \"} Filter\r\n                    <CIcon\r\n                      size={\"sm\"}\r\n                      name={`${\r\n                        !collapse ? \"cil-chevron-bottom\" : \"cil-chevron-top\"\r\n                        }`}\r\n                    />\r\n                  </CButton>\r\n                </div>\r\n              </CCol>\r\n            </CRow>\r\n            <CRow>\r\n              <CCol>\r\n                <TicketFilter\r\n                  {...{\r\n                    show: collapse,\r\n                    onStatusChange: handleChange,\r\n                    filter: filter,\r\n                    onClearFilter\r\n                  }} />\r\n              </CCol>\r\n            </CRow>\r\n            <CDataTable\r\n              items={user.accountType === 1 ? filteredTicketRequest : user.accountType === 3 || user.accountType === 2 ? _.filter(filteredTicketRequest, ['requestor', user.employeeId]) : []}\r\n              fields={fields}\r\n              itemsPerPage={5}\r\n              hover\r\n              pagination\r\n              onRowClick={toggleModal}\r\n              clickableRows\r\n              noItemsViewSlot={<NoData />}\r\n              scopedSlots={{\r\n                'date requested':\r\n                  (item) => (\r\n                    <td>\r\n                      {item['date requested']}\r\n                    </td>\r\n                  ),\r\n                'status': (item) => (\r\n                  <td>\r\n                    <CBadge color={getBadge(TICKET_STATUS, item.status)}>\r\n                      {item.status === 1 ? \"Open\" : \"Closed\"}\r\n                    </CBadge>\r\n                  </td>\r\n                )\r\n              }}\r\n            />\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default Ticket;\r\n"],"sourceRoot":""}