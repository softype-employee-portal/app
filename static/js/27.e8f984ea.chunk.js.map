{"version":3,"sources":["modules/forgot-password/Forgot-Password.js"],"names":["ForgotPassword","props","saved","sessionStorage","getItem","history","isLoggedIn","useSelector","state","appState","auth","already_logged","useState","show","toggleShow","email","setEmail","error","setError","isLoading","setLoading","clear","validate","a","validator","isEmail","api","post","res","message","setItem","push","to","onSubmit","e","preventDefault","onShowChange","fade","color","closeButton","className","type","disabled","onChange","target","value","placeholder","autoComplete","block","submit","btnText","xs","onClick"],"mappings":"6NAmGeA,UA7EQ,SAACC,GACtB,IAAIC,EAAQC,eAAeC,QAAQ,SAC7BC,EAAYJ,EAAZI,QACFC,EAAaC,aAAY,SAAAC,GAC3B,OAAOA,EAAMC,SAASC,KAAKC,kBAJG,EAMLC,oBAAS,GANJ,mBAMzBC,EANyB,KAMnBC,EANmB,OAONF,mBAASV,GAAgB,IAPnB,mBAOzBa,EAPyB,KAOlBC,EAPkB,OAQNJ,mBAAS,IARH,mBAQzBK,EARyB,KAQlBC,EARkB,OASAN,oBAAS,GATT,mBASzBO,EATyB,KASdC,EATc,KAUhCjB,eAAekB,QACf,IAAMC,EAAQ,uCAAG,4BAAAC,EAAA,yDACVR,EADU,uBAEbG,EAdkB,sBAYL,kBAGNJ,GAAW,IAHL,UAMVU,IAAUC,QAAQV,GANR,uBAObG,EAAS,iBAPI,kBAQNJ,GAAW,IARL,cAWfM,GAAW,GAXI,SAYCM,IAAIC,KAAK,kBAAmB,CAAEZ,UAZ/B,UAYXa,EAZW,OAafR,GAAW,IACPQ,EAAIX,MAdO,wBAebC,EAASU,EAAIC,SAfA,kBAgBNf,GAAW,IAhBL,QAkBbX,eAAe2B,QAAQ,SAAS,GAChC3B,eAAe2B,QAAQ,QAASf,GAChCV,EAAQ0B,KAAK,yBApBA,4CAAH,qDAwBd,OAAIzB,EACK,kBAAC,IAAD,CAAU0B,GAAG,MAIpB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,SAAU,SAACC,GAChBA,EAAEC,mBAEF,+CACCtB,GACC,kBAAC,IAAD,CAAQuB,aAAc,SAACF,GACrBpB,EAAWoB,IACVG,MAAI,EAACC,MAAM,SAASC,aAAW,GAC/BtB,GAEL,kBAAC,IAAD,CAAauB,UAAU,aACrB,kBAAC,IAAD,KACE,kBAAC,IAAD,WAEF,kBAAC,IAAD,CAAQC,KAAK,QACZC,SAAUvB,EACTwB,SAAU,SAACT,GACXlB,EAASkB,EAAEU,OAAOC,OAClB/B,GAAW,IACVgC,YAAY,yBAAyBD,MAAO9B,GAAS,GAAIgC,aAAa,WAE3E,kBAAC,IAAoB,CAAEC,OAAO,EAAM7B,YAAW8B,OAAQ3B,EAAU4B,QAAS,WAC1E,kBAAC,KAAD,KACE,kBAAC,IAAD,CAAMC,GAAG,MAET,kBAAC,IAAD,CAAMA,GAAG,IAAIX,UAAU,mBACrB,kBAAC,IAAD,CAASE,SAAUvB,EAAWqB,UAAU,cAAcF,MAAM,OAAOc,QAAS,WAC1E/C,EAAQ0B,KAAK,YADf","file":"static/js/27.e8f984ea.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\r\nimport {\r\n  CButton,\r\n  CAlert,\r\n  CCard,\r\n  CCardBody,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CRow\r\n} from '@coreui/react'\r\nimport { useSelector } from 'react-redux'\r\nimport { CenteredLayout } from 'containers';\r\nimport { Redirect } from 'react-router-dom'\r\nimport api from 'utils/api'\r\nimport validator from 'utils/helpers/validator'\r\nimport { LoadingButton } from 'reusable';\r\nconst requiredMessage = \"Email is required.\";\r\nconst ForgotPassword = (props) => {\r\n  let saved = sessionStorage.getItem(\"email\")\r\n  let { history } = props;\r\n  let isLoggedIn = useSelector(state => {\r\n    return state.appState.auth.already_logged\r\n  })\r\n  const [show, toggleShow] = useState(false)\r\n  const [email, setEmail] = useState(saved ? saved : '')\r\n  const [error, setError] = useState('')\r\n  const [isLoading, setLoading] = useState(false)\r\n  sessionStorage.clear()\r\n  const validate = async () => {\r\n    if (!email) {\r\n      setError(requiredMessage)\r\n      return toggleShow(true)\r\n    }\r\n\r\n    if (!validator.isEmail(email)) {\r\n      setError(\"Invalid email\")\r\n      return toggleShow(true)\r\n    }\r\n\r\n    setLoading(true)\r\n    let res = await api.post(\"/forgotPassword\", { email })\r\n    setLoading(false)\r\n    if (res.error) {\r\n      setError(res.message);\r\n      return toggleShow(true)\r\n    } else {\r\n      sessionStorage.setItem(\"onOTP\", true);\r\n      sessionStorage.setItem(\"email\", email);\r\n      history.push(\"/account-recovery/otp\")\r\n    }\r\n  }\r\n\r\n  if (isLoggedIn) {\r\n    return <Redirect to=\"/\" />\r\n  }\r\n\r\n  return (\r\n    <CenteredLayout>\r\n      <CForm onSubmit={(e) => {\r\n        e.preventDefault()\r\n      }}>\r\n        <h1>Forgot Password</h1>\r\n        {show &&\r\n          <CAlert onShowChange={(e) => {\r\n            toggleShow(e)\r\n          }} fade color=\"danger\" closeButton>\r\n            {error}\r\n          </CAlert>}\r\n        <CInputGroup className=\"mb-3 mt-3\">\r\n          <CInputGroupPrepend>\r\n            <CInputGroupText>@</CInputGroupText>\r\n          </CInputGroupPrepend>\r\n          <CInput type=\"email\"\r\n           disabled={isLoading} \r\n            onChange={(e) => {\r\n            setEmail(e.target.value);\r\n            toggleShow(false)\r\n          }} placeholder=\"Input registered email\" value={email || \"\"} autoComplete=\"email\" />\r\n        </CInputGroup>\r\n        <LoadingButton   {...{ block: true, isLoading, submit: validate, btnText: 'Submit' }} />\r\n        <CRow>\r\n          <CCol xs=\"6\">\r\n          </CCol>\r\n          <CCol xs=\"6\" className=\"text-right px-0\">\r\n            <CButton disabled={isLoading} className=\"float-right\" color=\"link\" onClick={() => {\r\n              history.push(\"/login\")\r\n            }}>Back to Login</CButton>\r\n          </CCol>\r\n        </CRow>\r\n      </CForm>\r\n    </CenteredLayout>\r\n  )\r\n}\r\n\r\nexport default ForgotPassword\r\n"],"sourceRoot":""}