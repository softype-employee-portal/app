{"version":3,"sources":["modules/ticket/component/TicketDetails.js","modules/dashboard/Dashboard.js","modules/calendar/CalendarToolbar.js","modules/calendar/CalendarPopUp.js","modules/calendar/Calendar.js"],"names":["TicketDetails","props","id","name","person_in_charge","item","quantity","description","status","remarks","date_requested","resolved_date","ticketDetails","Object","entries","className","style","borderBottom","map","index","key","value","toString","splitSnakeCase","splitCamelCase","toLowerCase","formatDate","Date","formattedValue","Widgets","lazy","Dashboard","modal","useRef","dispatch","useDispatch","dialog","LeaveRequestFieldsForEmployee","_style","width","getBadgeLeave","user","useSelector","state","authed","appState","auth","firstname","lastname","employeeId","userId","accountType","remainingLeave","remaining_leave","useState","CURRENT_MONTH_TEXT","monthText","CURRENT_DATE","currentDateMonth","stateBirthdayEmployees","employee","employees","filter","emp","substring","stateActiveEmployees","isActive","stateLeaveRequests","leave","leave_requests","req","stateOfficeRequests","ticket","ticket_requests","stateEmployeesOnLeave","moment","isBetween","statePendingLeaveRequests","statePendingOfficeRequests","history","useHistory","length","totalEmployees","employeesOnLeave","pendingLeaveRequests","todaysPendingOfficeRequests","recentLeaveRequest","recentOfficeRequest","tickets","setTickets","clickedRejectBtn","setClickedRejectBtn","clickedApproveBtn","setClickedApproveBtn","stateTodaysEmployeeOnLeave","stateEmployeeDepartment","department_employee","department_employees","department_managerEmployeeId","todaysEmployeeOnLeave","employeeDepartment","CURRENT_MONTH","month","setMonth","CURRENT_YEAR","year","setYear","viewLeaveRequests","push","viewOfficeRequests","viewLeaveRequestDetails","getBadge","STATUS","onConfirm","a","data","officeRequestId","indicator","dispatchNotification","type","message","api","post","res","error","actionCreator","ActionTypes","CLOSE_TICKET","renameKey","officeRequest_information","fetchTickets","toggleModal","e","current","toggle","useEffect","viewEmployees","viewLeaveCalendar","viewDepartmentInfo","sessionStorage","setItem","sm","items","_","orderBy","fields","hover","clickableRows","pagination","itemsPerPage","noItemsViewSlot","title","onRowClick","scopedSlots","color","toCapitalize","ref","show","centered","onCloseCallback","modalOnClose","hidden","closeButton","footer","onClick","hideCancelButton","size","disabled","slice","TICKET_STATUS","Calendar","onMonthChange","onYearChange","height","header","right","left","navigate","CustomToolbar","action","onNavigate","handleChange","event","onView","clickable","target","this","MONTHS","date","getMonth","getFullYear","label","views","bind","custom","onChange","view","idx","React","Component","CalendarPopUp","category","date_from","date_to","overflowY","localizer","momentLocalizer","MyCalendar","events","isLoading","selected","setSelected","noFooter","popup","startAccessor","endAccessor","selectable","defaultView","defaultDate","now","onSelectEvent","components","toolbar","rest","CalendarToolbar"],"mappings":"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","file":"static/js/19.7ba2a3e9.chunk.js","sourcesContent":["import React from 'react';\r\nimport { CCardBody, CCol, CDataTable, CCardTitle, CRow, CLabel, CButton, CCardText } from \"@coreui/react\";\r\nimport { formatDate, splitSnakeCase, splitCamelCase } from 'utils/helpers';\r\n\r\n\r\nconst TicketDetails = (props) => {\r\n  let {\r\n    id,\r\n    name,\r\n    person_in_charge = props['person in charge'],\r\n    item,\r\n    quantity,\r\n    description,\r\n    status,\r\n    remarks,\r\n    date_requested = props['date requested'],\r\n    resolved_date = props['resolve date']\r\n  } = props\r\n\r\n  const ticketDetails = Object.entries(props)\r\n\r\n  const formattedValue = (key, value) => {\r\n    if (key.toLowerCase() === \"status\") {\r\n      return value === 0 ? \"Closed\" : \"Open\"\r\n    }\r\n    if (key.toLowerCase() === \"date requested\") {\r\n      return formatDate(new Date(value))\r\n    }\r\n    return value;\r\n  }\r\n\r\n  return (\r\n    <CRow>\r\n      <CCol>\r\n        <CCardBody>\r\n          <table className=\"table table-hover \" style={{ borderBottom: \"1px solid grey\" }}>\r\n            <tbody>\r\n              {\r\n                ticketDetails.map(([key, value], index) => {\r\n                  return ((value !== null && key !== \"id\" && value !== '') &&\r\n                    <tr key={index.toString()}>\r\n                      <td className=\"text-capitalize\">  {`${splitSnakeCase(splitCamelCase(key))}:`}</td>\r\n                      <td>{\r\n                        <b><p>{formattedValue(key, value)}</p></b>\r\n                      }\r\n                      </td>\r\n                    </tr>\r\n                  )\r\n                })\r\n              }\r\n            </tbody>\r\n          </table>\r\n        </CCardBody>\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n\r\n}\r\n\r\nexport default TicketDetails\r\n","import React, { lazy, useState, useEffect, useRef } from 'react'\r\nimport {\r\n  CBadge,\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow,\r\n  CDataTable\r\n} from '@coreui/react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { toCapitalize, formatDate, renameKey, dispatchNotification } from 'utils/helpers';\r\nimport { NoData, Modal, ConfirmDialog } from 'reusable';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport _ from 'lodash';\r\nimport moment from 'moment'\r\nimport { TICKET_STATUS, CURRENT_MONTH, CURRENT_YEAR, CURRENT_DATE, CURRENT_MONTH_TEXT } from \"utils/constants/constant\";\r\nimport TicketDetails from \"modules/ticket/component/TicketDetails\";\r\nimport api from 'utils/api'\r\nimport { ActionTypes, actionCreator } from 'utils/actions';\r\nimport { fetchTickets } from 'utils/helpers/fetch.js';\r\nimport Calendar from 'modules/calendar/Calendar'\r\n\r\nconst Widgets = lazy(() => import('../dashboard/component/Widget.js'))\r\n\r\nconst Dashboard = () => {\r\n\r\n  const modal = useRef();\r\n  const dispatch = useDispatch();\r\n  const dialog = useRef();\r\n\r\n  const LeaveRequestFields = [\r\n    { key: 'name', _style: { width: '25%' } },\r\n    { key: 'date from', _style: { width: '20%' } },\r\n    { key: 'date to', _style: { width: '20%' } },\r\n    { key: 'status', _style: { width: '5%' } },\r\n  ]\r\n\r\n  // for employee dashboard\r\n  const LeaveRequestFieldsForEmployee = [\r\n    { key: 'name', _style: { width: '25%' } },\r\n    { key: 'date from', _style: { width: '20%' } },\r\n    { key: 'date to', _style: { width: '20%' } },\r\n    { key: 'reason', _style: { width: '20%' } }\r\n  ]\r\n\r\n  const OfficeRequestFields = [\r\n    { key: 'name', _style: { width: '25%' } },\r\n    { key: 'item', _style: { width: '20%' } },\r\n    { key: 'date needed', _style: { width: '20%' } },\r\n    { key: 'status', _style: { width: '5%' } },\r\n  ]\r\n\r\n  const getBadgeLeave = (status) => {\r\n    switch (status) {\r\n      case 'Approved': return 'success'\r\n      case 'Pending': return 'primary'\r\n      case 'Rejected': return 'danger'\r\n      default: return 'primary'\r\n    }\r\n  }\r\n\r\n  const user = useSelector(state => {\r\n    let authed = state.appState.auth.user;\r\n    return {\r\n      firstname: authed.firstname,\r\n      lastname: authed.lastname,\r\n      employeeId: authed.employeeId,\r\n      userId: authed.userId,\r\n      accountType: authed.accountType,\r\n      remainingLeave: authed.remaining_leave\r\n    }\r\n  })\r\n\r\n  const [monthText, setMonthText] = useState(CURRENT_MONTH_TEXT + 1)\r\n  const [currentDateMonth, setCurrentDateMonth] = useState(`${monthText}-${CURRENT_DATE.toString()}`)\r\n\r\n  const stateBirthdayEmployees = useSelector((state) => {\r\n    return state.appState.employee.employees.filter(emp => {\r\n      return emp['birthdate'].substring(5, 10) === currentDateMonth\r\n    })\r\n  })\r\n\r\n  const stateActiveEmployees = useSelector((state) => {\r\n    return state.appState.employee.employees.filter(emp => {\r\n      return emp.isActive === 1\r\n    })\r\n  });\r\n\r\n  const stateLeaveRequests = useSelector((state) => {\r\n    return state.appState.leave.leave_requests.filter(req => {\r\n      return req['status'] === \"pending\" && req['approver id'] === user.employeeId\r\n    })\r\n  });\r\n\r\n  const stateOfficeRequests = useSelector((state) => {\r\n    return state.appState.ticket.ticket_requests.filter(req => {\r\n      return req['status'] === 1\r\n    })\r\n  });\r\n\r\n  const stateEmployeesOnLeave = useSelector((state) => { // employee on leave\r\n    return state.appState.leave.leave_requests.filter(req => {\r\n      return moment().isBetween(req['date from'], req['date to']) && req['status'].toLowerCase() === \"approved\".toLowerCase()\r\n    })\r\n  });\r\n\r\n  const statePendingLeaveRequests = useSelector((state) => {\r\n    return state.appState.leave.leave_requests.filter(req => {\r\n      // return formatDate(req['created at']) === formatDate(moment()) && req['status'] === \"pending\"\r\n      return req['status'].toLowerCase() === \"pending\".toLowerCase() && req['approver id'] === user.employeeId\r\n    })\r\n  });\r\n\r\n  const statePendingOfficeRequests = useSelector((state) => {\r\n    return state.appState.ticket.ticket_requests.filter(req => {\r\n      // return formatDate(req['date requested']) === formatDate(moment()) && req['status'] === 1\r\n      return req['status'] === 1\r\n    })\r\n  });\r\n\r\n  const history = useHistory();\r\n  const [totalEmployees, setTotalEmployees] = useState(stateActiveEmployees.length)\r\n  const [employeesOnLeave, setEmployeeOnLeave] = useState(stateEmployeesOnLeave.length)\r\n  const [pendingLeaveRequests, setPendingLeaveRequests] = useState(statePendingLeaveRequests.length)\r\n  const [todaysPendingOfficeRequests, setTodaysPendingOfficeRequests] = useState(statePendingOfficeRequests.length)\r\n  // const [recentLeaveRequest, setRecentLeaveRequest] = useState(_.orderBy(stateLeaveRequests, ['created at'], ['desc']))\r\n  // const [recentOfficeRequest, setRecentOfficeRequest] = useState(_.orderBy(stateOfficeRequests, ['date requested'], ['desc']))\r\n  const [recentLeaveRequest, setRecentLeaveRequest] = useState(stateLeaveRequests)\r\n  const [recentOfficeRequest, setRecentOfficeRequest] = useState(stateOfficeRequests)\r\n\r\n  // Office Request\r\n  const [tickets, setTickets] = useState();\r\n  const [clickedRejectBtn, setClickedRejectBtn] = useState(false);\r\n  const [clickedApproveBtn, setClickedApproveBtn] = useState(false);\r\n\r\n  // Employe Dashboard\r\n  const stateTodaysEmployeeOnLeave = useSelector((state) => { // need fix\r\n    return state.appState.leave.leave_requests\r\n  });\r\n\r\n  const stateEmployeeDepartment = useSelector((state) => { // not yet\r\n    return state.appState.department_employee.department_employees.filter(emp => {\r\n      return emp.employeeId === user.employeeId || emp.department_managerEmployeeId === user.employeeId\r\n    })\r\n  });\r\n\r\n  const [todaysEmployeeOnLeave, setTodaysEmployeeOnLeave] = useState(stateTodaysEmployeeOnLeave) // need fix\r\n  const [employeeDepartment, setEmployeeDepartment] = useState(stateEmployeeDepartment) // not yet\r\n  const [month, setMonth] = useState(CURRENT_MONTH)\r\n  const [year, setYear] = useState(CURRENT_YEAR)\r\n\r\n  const viewDepartmentInfo = (id) => {\r\n    sessionStorage.setItem('deptId', id);\r\n    history.push(`/employee/departments/department?id=${id}`);\r\n  };\r\n\r\n  //\r\n  const viewEmployees = () => {\r\n    history.push(`/employees`);\r\n  }\r\n\r\n  const viewLeaveCalendar = () => {\r\n    history.push(`/leave/calendar`);\r\n  }\r\n\r\n  const viewLeaveRequests = () => {\r\n    history.push(`/leave/requests`);\r\n  }\r\n\r\n  const viewOfficeRequests = () => {\r\n    history.push(`/requests`);\r\n  }\r\n\r\n  const viewLeaveRequestDetails = (id) => {\r\n    history.push(`/leave/requests/${id}`);\r\n  }\r\n\r\n  // Office request\r\n\r\n  const getBadge = (STATUS, status) => {\r\n    return STATUS[status];\r\n  };\r\n\r\n  const rejectRequestBtn = () => {\r\n    setClickedRejectBtn(true)\r\n    modal.current.toggle();\r\n    dialog.current.toggle();\r\n  }\r\n\r\n  const approveRequestBtn = () => {\r\n    setClickedApproveBtn(true)\r\n    modal.current.toggle();\r\n    dialog.current.toggle();\r\n  }\r\n\r\n  const onConfirm = async () => {\r\n    let data = {\r\n      officeRequestId: tickets.id,\r\n      employeeId: user.employeeId,\r\n      indicator: clickedApproveBtn ? 1 : clickedRejectBtn ? 0 : 0\r\n    }\r\n    dispatchNotification(dispatch, { type: 'info', message: 'Please wait' })\r\n    let res = await api.post(\"/close_officeRequest\", data)\r\n    if (!res.error) {\r\n      dispatch(actionCreator(ActionTypes.CLOSE_TICKET, renameKey(res.data.officeRequest_information[0])))\r\n      fetchTickets(dispatch);\r\n      dispatchNotification(dispatch, { type: 'success', message: 'Success' })\r\n    } else {\r\n      dispatchNotification(dispatch, { type: 'error', message: res.message })\r\n    }\r\n    setClickedApproveBtn(false)\r\n    setClickedRejectBtn(false)\r\n  }\r\n\r\n  const toggleModal = (e) => {\r\n    setTickets(e);\r\n    modal.current.toggle();\r\n  };\r\n\r\n  useEffect(() => {\r\n    return\r\n  }, [\r\n      totalEmployees,\r\n      recentLeaveRequest,\r\n      recentOfficeRequest,\r\n      employeesOnLeave,\r\n      pendingLeaveRequests,\r\n      todaysPendingOfficeRequests,\r\n      todaysEmployeeOnLeave,\r\n      year,\r\n      month,\r\n      employeeDepartment,\r\n      stateBirthdayEmployees\r\n    ]\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Widgets {...{\r\n        user,\r\n        totalEmployees,\r\n        viewLeaveRequests,\r\n        viewOfficeRequests,\r\n        viewEmployees,\r\n        viewLeaveCalendar,\r\n        employeesOnLeave,\r\n        pendingLeaveRequests,\r\n        todaysPendingOfficeRequests,\r\n        viewDepartmentInfo,\r\n        employeeDepartment,\r\n        stateBirthdayEmployees\r\n      }} />\r\n      {\r\n        user.accountType !== 3 ?\r\n          <CRow>\r\n            <CCol>\r\n              <CCard>\r\n                <CCardHeader>\r\n                  <CRow>\r\n                    <CCol sm=\"6\">\r\n                      <div>\r\n                        {\"Employees on Leave\"}\r\n                      </div>\r\n                    </CCol>\r\n                  </CRow>\r\n                </CCardHeader>\r\n                <CCardBody>\r\n                  <CDataTable\r\n                    items={_.orderBy(stateEmployeesOnLeave, ['created at'], ['desc'])}\r\n                    fields={LeaveRequestFieldsForEmployee}\r\n                    hover\r\n                    clickableRows\r\n                    pagination\r\n                    itemsPerPage={5}\r\n                    noItemsViewSlot={<NoData title=\"No Employee/s on Leave\" />}\r\n                    onRowClick={(item) => {\r\n                      viewLeaveRequestDetails(item.id)\r\n                    }}\r\n                    scopedSlots={{\r\n                      'status':\r\n                        (item) => (\r\n                          <td>\r\n                            <CBadge color={getBadgeLeave(item.status)}>\r\n                              {toCapitalize(item.status)}\r\n                            </CBadge>\r\n                          </td>\r\n                        ),\r\n                    }}\r\n                  />\r\n                </CCardBody>\r\n              </CCard>\r\n            </CCol>\r\n          </CRow> : \"\"\r\n      }\r\n      <CRow>\r\n        <CCol>\r\n          <ConfirmDialog\r\n            ref={dialog}\r\n            {...{\r\n              show: dialog,\r\n              centered: true,\r\n              onConfirm,\r\n              title: `${clickedApproveBtn ? \"Approve\" : clickedRejectBtn ? \"Reject\" : \"\"} request?`,\r\n              onCloseCallback: () => {\r\n                modal.current.toggle();\r\n                setClickedApproveBtn(false)\r\n                setClickedRejectBtn(false)\r\n              }\r\n            }}\r\n          ></ConfirmDialog>\r\n          <Modal\r\n            ref={modal}\r\n            centered\r\n            title=\"Request Details\"\r\n            modalOnClose={toggleModal}\r\n            hidden\r\n            closeButton\r\n            footer={\r\n              (tickets && tickets.status === 1) &&\r\n              <>\r\n                <CButton color=\"success\" onClick={() => {\r\n                  approveRequestBtn()\r\n                }}>Approve</CButton>\r\n                <CButton color=\"danger\" onClick={() => {\r\n                  rejectRequestBtn()\r\n                }}>Reject</CButton>\r\n              </>\r\n            }\r\n            hideCancelButton\r\n          >\r\n            <TicketDetails\r\n              {...tickets}\r\n            />\r\n          </Modal>\r\n          <CCard>\r\n            <CCardHeader>\r\n              <CRow>\r\n                <CCol sm=\"6\">\r\n                  <div>\r\n                    {user.accountType === 1 || user.accountType === 2 ? \"Recent Leave Requests\" : user.accountType === 3 ? \"Employees on Leave\" : \"\"}\r\n                  </div>\r\n                </CCol>\r\n                {\r\n                  user.accountType === 1 || user.accountType === 2 ?\r\n                    <CCol sm=\"6\" className=\"d-none d-md-block\">\r\n                      <div className=\"float-right\">\r\n                        <CButton size=\"sm\" color=\"primary\" onClick={() => {\r\n                          viewLeaveRequests()\r\n                        }} disabled={false}>\r\n                          {\"View All\"}\r\n                        </CButton>\r\n                      </div>\r\n                    </CCol>\r\n                    : \"\"\r\n                }\r\n              </CRow>\r\n            </CCardHeader>\r\n            <CCardBody>\r\n              <CDataTable\r\n                items={user.accountType === 2 || user.accountType === 1 ? _.orderBy(recentLeaveRequest, ['created at'], ['desc']).slice(0, 5) : user.accountType === 3 ? _.orderBy(stateEmployeesOnLeave, ['created at'], ['desc']) : []}\r\n                fields={user.accountType === 2 || user.accountType === 1 ? LeaveRequestFields : user.accountType === 3 ? LeaveRequestFieldsForEmployee : []}\r\n                hover\r\n                clickableRows\r\n                pagination\r\n                itemsPerPage={5}\r\n                noItemsViewSlot={<NoData title={user.accountType === 3 ? `No Employee/s on Leave` : `No Requests`} />}\r\n                onRowClick={(item) => {\r\n                  viewLeaveRequestDetails(item.id)\r\n                }}\r\n                scopedSlots={{\r\n                  'status':\r\n                    (item) => (\r\n                      <td>\r\n                        <CBadge color={getBadgeLeave(item.status)}>\r\n                          {toCapitalize(item.status)}\r\n                        </CBadge>\r\n                      </td>\r\n                    ),\r\n                }}\r\n              />\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n        {\r\n          user.accountType === 1 ?\r\n            <CCol>\r\n              <CCard>\r\n                <CCardHeader>\r\n                  <CRow>\r\n                    <CCol sm=\"6\">\r\n                      <div>\r\n                        {\"Recent Office Requests\"}\r\n                      </div>\r\n                    </CCol>\r\n                    <CCol sm=\"6\" className=\"d-none d-md-block\">\r\n                      <div className=\"float-right\">\r\n                        <CButton size=\"sm\" color=\"primary\" onClick={() => {\r\n                          viewOfficeRequests()\r\n                        }} disabled={false}>\r\n                          {\"View All\"}\r\n                        </CButton>\r\n                      </div>\r\n                    </CCol>\r\n                  </CRow>\r\n                </CCardHeader>\r\n                <CCardBody>\r\n                  <CDataTable\r\n                    items={_.orderBy(recentOfficeRequest, ['date requested'], ['desc']).slice(0, 5)}\r\n                    fields={OfficeRequestFields}\r\n                    hover\r\n                    clickableRows\r\n                    noItemsViewSlot={<NoData title=\"No Requests\" />}\r\n                    onRowClick={toggleModal}\r\n                    scopedSlots={{\r\n                      'status':\r\n                        (item) => (\r\n                          <td>\r\n                            <CBadge color={getBadge(TICKET_STATUS, item.status)}>\r\n                              {item.status === 1 ? \"Open\" : \"Closed\"}\r\n                            </CBadge>\r\n                          </td>\r\n                        )\r\n                    }}\r\n                  />\r\n                </CCardBody>\r\n              </CCard>\r\n            </CCol>\r\n            : // for employee\r\n            <CCol>\r\n              <Calendar\r\n                {...{\r\n                  onMonthChange: setMonth,\r\n                  onYearChange: setYear,\r\n                  style: { height: 400 },\r\n                  header: { right: true, left: true },\r\n                }}\r\n              />\r\n            </CCol>\r\n        }\r\n      </CRow>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Dashboard\r\n","import React from \"react\"\r\nimport 'react-big-calendar/lib/css/react-big-calendar.css'\r\nimport { CFormGroup, CSelect } from \"@coreui/react\";\r\nimport { MONTHS } from 'utils/constants/constant'\r\n\r\nexport let navigate = {\r\n    PREVIOUS: 'PREV',\r\n    NEXT: 'NEXT',\r\n    TODAY: 'TODAY',\r\n    DATE: 'DATE',\r\n}\r\n\r\nclass CustomToolbar extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if(this.props.clickable){\r\n            const month = MONTHS[this.props.date.getMonth()];\r\n            const year = this.props.date.getFullYear()\r\n            this.props.onMonthChange(month)\r\n            this.props.onYearChange(year)\r\n        }\r\n    }\r\n\r\n    navigate = action => {\r\n        this.props.onNavigate(action);\r\n    }\r\n    handleChange = (event) => {\r\n        this.props.onView(this.props.clickable?event.target.value:'month');\r\n    };\r\n    render() {\r\n        let { label, views, header } = this.props\r\n        let { right = true, left = true } = header\r\n        return (\r\n            <div className=\"rbc-toolbar\">\r\n                {\r\n                    left && <span className=\"rbc-btn-group\">\r\n                        <button type=\"button\" onClick={this.navigate.bind(null, navigate.PREVIOUS)}>Prev</button>\r\n                        <button type=\"button\" onClick={this.navigate.bind(null, navigate.NEXT)}>Next</button>\r\n                    </span>\r\n                }\r\n                <span className=\"rbc-toolbar-label\">{label}</span>\r\n                {\r\n                    right && <CFormGroup>\r\n                        <CSelect\r\n                            custom\r\n                            onChange={this.handleChange}>\r\n                            <option value=\"\" hidden>month</option>\r\n                            {views.map((view, idx) => {\r\n                                return <option key={idx} value={view}>{view}</option>\r\n                            })}\r\n                        </CSelect>\r\n                    </CFormGroup>\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default CustomToolbar;\r\n","import React from 'react';\r\nimport { CCard, CCardBody } from '@coreui/react';\r\n\r\nconst CalendarPopUp = ({ event = {} }) => {\r\n    let { employee, category, date_from, date_to } = event;\r\n\r\n    return (\r\n        <>\r\n            <CCard>\r\n                <CCardBody style={{ overflowY: 'auto', }}>\r\n                    <p className=\"title\">Name : <strong>{employee}</strong></p>\r\n                    <p className=\"title\">Type : <strong>{category}</strong></p>\r\n                    <p className=\"title\">Start Date : <strong>{date_from}</strong></p>\r\n                    <p className=\"title\">End Date : <strong>{date_to}</strong></p>\r\n                </CCardBody>\r\n            </CCard>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CalendarPopUp;","import React, { useRef, useState } from 'react'\r\nimport { CCard, CCardBody, CAlert } from '@coreui/react';\r\nimport CalendarToolbar from './CalendarToolbar';\r\nimport CalendarPopUp from './CalendarPopUp';\r\nimport { Modal } from 'reusable'\r\nimport { Calendar, momentLocalizer } from 'react-big-calendar'\r\nimport moment from 'moment'\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\"\r\nconst localizer = momentLocalizer(moment)\r\nconst MyCalendar = ({\r\n  header = { right: true, left: true },\r\n  events = [],\r\n  style = { height: 500 },\r\n  onYearChange,\r\n  onMonthChange,\r\n  clickable = true,\r\n  isLoading = false }) => {\r\n  const modal = useRef();\r\n  const [selected, setSelected] = useState()\r\n  return (\r\n    <div >\r\n      <Modal {...{\r\n        title: 'Leave Request Detais',\r\n        centered: true,\r\n        closeButton: true,\r\n        hideCancelButton: true,\r\n        hidden: true,\r\n        size: 'sm',\r\n        noFooter: true\r\n      }} ref={modal}>\r\n        <CalendarPopUp event={selected} />\r\n      </Modal>\r\n      <CCard>\r\n        {\r\n          isLoading && <CAlert color=\"info\">Approved will be loaded soon. Please wait.</CAlert>\r\n        }\r\n        <CCardBody>\r\n          <Calendar\r\n            localizer={localizer}\r\n            events={events}\r\n            popup\r\n            startAccessor='start'\r\n            endAccessor='end'\r\n            selectable\r\n            style={style}\r\n            defaultView={'month'}\r\n            defaultDate={events.length ? events[0]['start'] : new Date(Date.now())}\r\n            onSelectEvent={event => {\r\n              if(clickable){\r\n                setSelected(event);\r\n                modal.current.toggle();\r\n              }\r\n            }}\r\n            components={{\r\n              toolbar: (rest) => <CalendarToolbar {...rest} {...{clickable, header, onMonthChange, onYearChange }} />,\r\n            }}\r\n          />\r\n        </CCardBody>\r\n      </CCard>\r\n    </div >)\r\n}\r\n// }\r\n\r\n\r\n\r\n\r\n\r\nexport default MyCalendar\r\n"],"sourceRoot":""}