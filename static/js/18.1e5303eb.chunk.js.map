{"version":3,"sources":["modules/departments/component/AddDepartment.js","modules/departments/Departments.js","models/DepartmentModel.js"],"names":["AddDepartment","employees","onChange","data","renderFeedback","errors","useState","emps","stateDepartmentManagers","useSelector","state","appState","department_manager","department_managers","stateDepartments","department","departments","managers","filter","emp","length","accountType","i","_emp_h","department_head_employeeId","employeeId","idx","_emp_m","department_head","name","checkIfDeptHead","xl","id","placeholder","value","department_name","invalid","Number","disabled","key","hidden","map","e","index","role","Departments","props","defaultErrors","employee","firstname","lastname","user","authed","auth","userId","history","useHistory","dispatch","useDispatch","modal","useRef","DepartmentModel","setData","isLoading","setIsLoading","setError","handleSubmit","a","_","toLowerCase","trim","dispatchNotification","type","message","api","post","res","error","actionCreator","ActionTypes","ADD_DEPARTMENT","retrieveEmployees","fetchDepartmentManagers","fetchDepartments","toggleModal","current","toggle","title","dept","sm","lg","department_id","color","COLORS","clickable","animation","centeredText","height","text","textClass","onClickMethod","sessionStorage","setItem","push","ref","centered","modalOnClose","closeButton","footer","onClick","_errors","shallowCopy","Object","entries","valid","required","RULES","APP_MESSAGES","INPUT_REQUIRED","validateInfo","isValid","values","err","size","target","copy","className","path","mdiPlus","horizontal","vertical","rotate","colors","$grey","isIcon"],"mappings":"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","file":"static/js/18.1e5303eb.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {\r\n  CCol,\r\n  CRow,\r\n  CFormGroup,\r\n  CInput,\r\n  CLabel,\r\n  CSelect\r\n} from \"@coreui/react\";\r\n\r\nconst AddDepartment = ({ employees, onChange, data, renderFeedback, errors }) => {\r\n\r\n  const [emps, setEmps] = useState(employees)\r\n\r\n  const stateDepartmentManagers = useSelector((state) => {\r\n    return state.appState.department_manager.department_managers\r\n  });\r\n\r\n  const stateDepartments = useSelector((state) => {\r\n    return state.appState.department.departments\r\n  });\r\n\r\n  const checkIfDeptHead = emp => {\r\n    if (stateDepartments.length < 1) {\r\n      if (emp.accountType !== 2) {\r\n        return true\r\n      }\r\n    }\r\n    if (stateDepartmentManagers < 1) {\r\n      for (let i = 0; i < stateDepartments.length; i++) {\r\n        const _emp_h = stateDepartments[i];\r\n        if (emp.accountType !== 2 || _emp_h.department_head_employeeId === emp.employeeId) {\r\n          return true\r\n        }\r\n      }\r\n    }\r\n    for (let idx = 0; idx < stateDepartmentManagers.length; idx++) {\r\n      const _emp_m = stateDepartmentManagers[idx];\r\n      for (let i = 0; i < stateDepartments.length; i++) {\r\n        const _emp_h = stateDepartments[i];\r\n        if (_emp_m.department_head === emp.name || emp.employeeId === _emp_m.employeeId || emp.accountType !== 2 || _emp_h.department_head_employeeId === emp.employeeId) {\r\n          return true\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  const managers = emps.filter(emp => {\r\n    return !checkIfDeptHead(emp)\r\n  })\r\n\r\n  return (\r\n    <CRow>\r\n      <CCol xl={12}>\r\n        <CFormGroup >\r\n          <CLabel>Department Name : </CLabel>\r\n          <CInput\r\n            id=\"department_name\"\r\n            name=\"department_name\"\r\n            placeholder=\"e.g Technical\"\r\n            onChange={onChange}\r\n            value={data.department_name}\r\n            invalid={errors.department_name !== false}\r\n          />\r\n          {renderFeedback(errors.department_name)}\r\n        </CFormGroup>\r\n        <CFormGroup >\r\n          <CLabel>Department Head : </CLabel>\r\n          <CSelect\r\n            name=\"department_head\"\r\n            id=\"department_head\"\r\n            onChange={onChange}\r\n            value={Number(data.department_head)}\r\n            invalid={errors.department_head !== false}\r\n            disabled={managers.length === 0}\r\n          >\r\n            <option key={\"default\"} value=\"\" hidden>\r\n              {\r\n                managers.length === 0 ? `No Employee can be added` :\r\n                  `Select Employee`\r\n              }\r\n            </option>\r\n            {\r\n              managers.map((e, index) => {\r\n                return (\r\n                  <option key={\"emp_\" + index} value={e.employeeId}>\r\n                    {e.name} : {e.role}\r\n                  </option>\r\n                )\r\n              })\r\n            }\r\n          </CSelect>\r\n          {renderFeedback(errors.department_head)}\r\n        </CFormGroup>\r\n      </CCol>\r\n    </CRow >\r\n  )\r\n}\r\n\r\nexport default AddDepartment\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport {\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CSpinner,\r\n  CInvalidFeedback\r\n} from '@coreui/react'\r\nimport { Card, Modal, NoData } from 'reusable'\r\nimport AddDepartment from './component/AddDepartment'\r\nimport DepartmentModel from \"models/DepartmentModel\"\r\nimport { shallowCopy, RULES, dispatchNotification } from 'utils/helpers';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { COLORS } from \"utils/constants/constant\";\r\nimport { actionCreator, ActionTypes } from 'utils/actions';\r\nimport { APP_MESSAGES } from 'utils/constants/constant';\r\nimport api from 'utils/api';\r\nimport _ from 'lodash';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Icon from '@mdi/react';\r\nimport { mdiPlus } from '@mdi/js';\r\nimport colors from \"assets/theme/colors\"\r\nimport { retrieveEmployees, fetchDepartmentManagers, fetchDepartments } from 'utils/helpers/fetch';\r\n\r\nconst Departments = (props) => {\r\n\r\n  const defaultErrors = {\r\n    department_name: false,\r\n    department_head: false,\r\n  }\r\n\r\n  const employees = useSelector(state => {\r\n    let emp = state.appState.employee.employees;\r\n    return emp.map(e => {\r\n      return {\r\n        name: `${e.firstname} ${e.lastname}`,\r\n        employeeId: e.employeeId,\r\n        accountType: e.accountType,\r\n        role: e.role\r\n      }\r\n    })\r\n  })\r\n\r\n  const user = useSelector(state => {\r\n    let authed = state.appState.auth.user;\r\n    return {\r\n      firstname: authed.firstname,\r\n      lastname: authed.lastname,\r\n      employeeId: authed.employeeId,\r\n      userId: authed.userId,\r\n      accountType: authed.accountType\r\n    }\r\n  })\r\n\r\n  const history = useHistory();\r\n\r\n  const dispatch = useDispatch();\r\n  const modal = useRef();\r\n\r\n  const [data, setData] = useState(DepartmentModel)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [errors, setError] = useState(defaultErrors)\r\n\r\n  const stateDepartments = useSelector((state) => {\r\n    return state.appState.department.departments\r\n  });\r\n\r\n  const handleSubmit = async () => {\r\n    setIsLoading(true)\r\n    let isExist = _.filter(stateDepartments, function (key) {\r\n      return key.department_name.toLowerCase().trim() === data.department_name.toLowerCase().trim();\r\n    });\r\n    if (isExist.length === 0) {\r\n      dispatchNotification(dispatch, { type: 'info', message: 'Please wait' })\r\n      let res = await api.post(\"/add_department\", { name: data.department_name, department_head: +data.department_head }) // data [department_head, department_name as name]\r\n      if (!res.error) {\r\n        dispatchNotification(dispatch, { type: 'success', message: 'Success' })\r\n        dispatch(actionCreator(ActionTypes.ADD_DEPARTMENT, res.data.department[0]))\r\n        retrieveEmployees(dispatch)\r\n        fetchDepartmentManagers(dispatch)\r\n        fetchDepartments(dispatch)\r\n        toggleModal()\r\n      } else {\r\n        dispatchNotification(dispatch, { type: 'error', message: res.message })\r\n\r\n      }\r\n    } else {\r\n      dispatchNotification(dispatch, { type: 'error', message: \"Department is Existed!\" })\r\n    }\r\n    setIsLoading(false)\r\n  }\r\n\r\n  const validateInfo = (name, value) => {\r\n    const { required } = RULES\r\n    if (name === \"department_name\") {\r\n      stateDepartments.filter(dept => {\r\n        return name === dept.department_name\r\n      });\r\n      return required(value)\r\n    }\r\n    if (name === \"department_head\") {\r\n      return required(value)\r\n    }\r\n    return value !== \"\" || APP_MESSAGES.INPUT_REQUIRED;\r\n  }\r\n\r\n  const validate = () => {\r\n    let _errors = shallowCopy(errors)\r\n    Object.entries(data).map(([key, value]) => {\r\n      let valid = validateInfo(key, value);\r\n      _errors[key] = valid === true ? false : valid\r\n    })\r\n    setError(_errors)\r\n    let isValid = true;\r\n    _.values(_errors).map(err => {\r\n      if (err !== false) {\r\n        isValid = false\r\n      }\r\n    })\r\n    if (isValid) {\r\n      handleSubmit()\r\n    }\r\n  }\r\n\r\n  const toggleModal = () => {\r\n    setData(DepartmentModel)\r\n    setError(defaultErrors)\r\n    modal.current.toggle();\r\n  };\r\n\r\n  const onChange = (e) => { // value is employee ID\r\n    let key = e.target.name\r\n    let value = e.target.value\r\n    let copy = shallowCopy(data)\r\n    copy[key] = value\r\n    setData(copy)\r\n  }\r\n\r\n  const renderFeedback = (message) => {\r\n    return message !== false &&\r\n      <CInvalidFeedback className=\"help-block\">\r\n        {message}\r\n      </CInvalidFeedback>\r\n  }\r\n\r\n  const viewDepartmentInfo = (id) => {\r\n    sessionStorage.setItem('deptId', id);\r\n    history.push(`/employee/departments/department?id=${id}`);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {\r\n        stateDepartments.length === 0 && user.accountType !== 1 ? <NoData title=\"No Department/s added yet\"/> :\r\n          <CRow>\r\n            {\r\n              stateDepartments.map((dept, index) => {\r\n                return (\r\n                  <CCol sm=\"6\" lg=\"3\" key={dept.department_id + \"crd\"}>\r\n                    <Card\r\n                      color={COLORS[index]}\r\n                      clickable\r\n                      animation\r\n                      centeredText\r\n                      height={200}\r\n                      text={dept.department_name}\r\n                      textClass={\"blockqoute text-white font-weight-bold h2 text-center\"}\r\n                      onClickMethod={() => {\r\n                        viewDepartmentInfo(dept.department_id)\r\n                      }}\r\n                    />\r\n                  </CCol>\r\n                )\r\n              })\r\n            }\r\n            {\r\n              user.accountType === 1 ?\r\n                <CCol sm=\"6\" lg=\"3\">\r\n                  <Modal\r\n                    ref={modal}\r\n                    centered\r\n                    title=\"Add Department\"\r\n                    modalOnClose={toggleModal}\r\n                    hidden\r\n                    closeButton\r\n                    footer={\r\n                      <>\r\n                        <CButton color=\"primary\" disabled={isLoading} onClick={validate}>\r\n                          {\r\n                            isLoading ? <CSpinner color=\"secondary\" size=\"sm\" /> : 'Submit'\r\n                          }\r\n                        </CButton>\r\n                      </>\r\n                    }\r\n                  >\r\n                    <AddDepartment {...{ employees, onChange, data, renderFeedback, errors }} />\r\n                  </Modal>\r\n                  <Card\r\n                    text={\r\n                      <Icon path={mdiPlus}\r\n                        size={4}\r\n                        horizontal\r\n                        vertical\r\n                        rotate={180}\r\n                        color={colors.$grey}\r\n                      />\r\n                    }\r\n                    animation\r\n                    isIcon\r\n                    clickable\r\n                    centeredText\r\n                    height={200}\r\n                    onClickMethod={toggleModal}\r\n                  />\r\n                </CCol>\r\n                : \"\"\r\n            }\r\n          </CRow>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Departments\r\n","export default {\r\n  department_head: null,\r\n  department_name: ''\r\n}\r\n\r\nexport class Department {\r\n  constructor(department_head, department_name) {\r\n    this.department_name = department_name\r\n    this.department_head = department_head\r\n  }\r\n}\r\n"],"sourceRoot":""}