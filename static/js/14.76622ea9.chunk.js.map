{"version":3,"sources":["modules/leave-management/component/LeaveRequestFilter.js","models/LeaveRequestModel.js","modules/leave-management/component/LeaveRequestForm.js","modules/leave-management/LeaveRequests.js","modules/calendar/CalendarToolbar.js","modules/calendar/CalendarPopUp.js","modules/calendar/Calendar.js","modules/leave-management/LeaveCalendar.js","modules/leave-management/LeaveRequest.js"],"names":["LeaveFilterRequest","show","onFilterRequests","filter","onClearFilter","isLoading","dialog","useRef","useState","shallowCopy","filteredValues","setFilteredValues","handleOnChange","e","name","target","value","obj","ref","id","centered","title","cancelButtonText","confirmButton","fluid","className","setWidth","gutters","htmlFor","custom","size","disabled","month","onChange","hidden","MONTHS","map","idx","key","year","YEARS","Number","status","Object","keys","STATUS","category","LEAVE_TYPES","_category","color","sm","block","submit","btnText","onClick","date_from","date_to","reason","approver","employeeID","approverId","LeaveFormRequest","request","limitReached","_errors","dates","dispatch","useDispatch","user","useSelector","state","authed","appState","auth","firstname","lastname","employeeId","userId","remaining_leave","accountType","departmentDetail","employee","employees","emp","employeesHr","department_id","department_head","department_headId","isHead","isManager","deparment_IdM","dept_head","department","departments","dep","LeaveRequestModel","toCapitalize","modalRef","data","setData","checkDateRange","noOfDays","setNoOfDays","remainingLeave","setRemainingLeave","setIsLoading","errors","setErrors","isLimitError","toggleLimitError","isRangeError","toggleRangeError","placeholder","setPlaceholder","validateDate","checkBefore","date","moment","isBefore","gap","validateInfo","a","length","invalidDate","values","includes","handleSubmit","copy","_placeholder","format","useMemo","modalOnClose","_","mapValues","checkRemainingLeave","api","get","res","error","dispatchNotification","type","message","toString","department_head_employeeId","post","roleId","LEAVE_REQUEST_FILTER","actionCreator","ActionTypes","ADD_LEAVE_REQUEST","renameKey","retrieveLeaveRequests","current","toggle","useEffect","footer","cancelBtnTitle","style","margin","row","xs","invalid","rows","LeaveRequests","props","history","location","query","URLSearchParams","search","queryPage","match","queryStatus","default_filter","currentPage","page","setPage","collapse","setCollapse","setLoading","setFilter","isCancel","setIsCancel","statusCode","payload","setPayload","leaveFilter","setLeaveFilter","requestsData","leave","leave_requests","getBadge","goToRoute","push","_filter","JSON","stringify","filterRes","FETCH_LEAVE_REQUEST","plotArray","xl","onConfirm","TOGGLE_NOTIFICATION","cancelRequest","respondToRequest","LeaveRequestForm","preventDefault","LeaveRequestFilter","items","fields","_classes","label","_style","width","sorter","pagination","onPageChange","newPage","activePage","noItemsViewSlot","NoData","clickableRows","scopedSlots","item","getDuration","actions","isPending","toLowerCase","header","code","icon","el","formatDate","Date","getAdminResponse","navigate","CustomToolbar","action","onNavigate","handleChange","event","onView","clickable","this","getMonth","getFullYear","onMonthChange","onYearChange","views","right","left","bind","view","React","Component","CalendarPopUp","overflowY","localizer","momentLocalizer","MyCalendar","events","height","modal","selected","setSelected","closeButton","hideCancelButton","noFooter","popup","startAccessor","endAccessor","selectable","defaultView","defaultDate","now","onSelectEvent","components","toolbar","rest","CalendarToolbar","LeaveCalendar","setEvents","CURRENT_MONTH","setMonth","CURRENT_YEAR","setYear","getEvents","formattedArray","allDay","start","end","Calendar","lazy","LeaveRequest","_request","params","response","setResponse","insertProperty","leaveDetails","entries","handleClick","lg","maxHeight","float","borderBottom","index","splitSnakeCase","splitCamelCase","minWidth","minHeight"],"mappings":"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","file":"static/js/14.76622ea9.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCol,\r\n  CCollapse,\r\n  CRow,\r\n  CFormGroup,\r\n  CInput,\r\n  CLabel,\r\n  CSelect,\r\n  CButton,\r\n  CContainer,\r\n} from \"@coreui/react\";\r\nimport { ConfirmDialog, LoadingButton } from \"reusable\";\r\nimport { setWidth, shallowCopy } from \"utils/helpers\";\r\nimport { LEAVE_TYPES, STATUS, MONTHS, YEARS } from \"utils/constants/constant\";\r\n\r\nconst LeaveFilterRequest = ({ show, onFilterRequests, filter, onClearFilter, isLoading }) => {\r\n  const dialog = useRef();\r\n  const [filteredValues, setFilteredValues] = useState(shallowCopy(filter))\r\n  const handleOnChange = (e) => {\r\n    const name = e.target.name\r\n    const value = e.target.value\r\n    const obj = shallowCopy(filteredValues);\r\n    obj[name] = value;\r\n    setFilteredValues(obj)\r\n  }\r\n\r\n  const clearFilter = () => {\r\n    setFilteredValues(shallowCopy(filter))\r\n    onClearFilter()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ConfirmDialog\r\n        ref={dialog}\r\n        id=\"cutom_dialog\"\r\n        {...{\r\n          centered: false,\r\n          title: \"Invalid date range\",\r\n          cancelButtonText: \"Ok\",\r\n          confirmButton: false,\r\n        }}\r\n      />\r\n      <CCollapse show={show}>\r\n        <CContainer fluid>\r\n          <CRow className=\"pt-4\">\r\n            <CCol>\r\n              <CCard>\r\n                <CCardBody>\r\n                  <CRow >\r\n                    <CCol  {...setWidth(\"4\")}>\r\n                      <CRow gutters={false} >\r\n                        <CCol className=\"mr-1\" {...setWidth(\"5\")}>\r\n                          <CFormGroup>\r\n                            <CLabel htmlFor=\"date-input\" className=\"font-weight-bold\">\r\n                              <span>Month</span>\r\n                            </CLabel>\r\n                            <CSelect\r\n                              custom\r\n                              className=\"input-sm\"\r\n                              size=\"sm\"\r\n                              disabled={isLoading}\r\n                              name=\"month\"\r\n                              value={filteredValues.month || \"\"}\r\n                              onChange={handleOnChange}\r\n                            >\r\n                              <option value=\"\" hidden>\r\n                                {filteredValues.month}\r\n                              </option>\r\n                              <option value=\"All\">All</option>\r\n                              {MONTHS.map((month, idx) =>\r\n                                <option key={idx} value={month}>\r\n                                  {month}\r\n                                </option>\r\n                              )}\r\n                            </CSelect>\r\n                          </CFormGroup>\r\n                        </CCol>\r\n                        <CCol className=\"ml-1\" >\r\n                          <CFormGroup>\r\n                            <CLabel htmlFor=\"date-input\" className=\"font-weight-bold\">\r\n                              <span>Year</span>\r\n                            </CLabel>\r\n                            <CSelect\r\n                              custom\r\n                              disabled={isLoading}\r\n                              className=\"input-sm\"\r\n                              size=\"sm\"\r\n                              name=\"year\"\r\n                              value={filteredValues.year || \"\"}\r\n                              onChange={handleOnChange}\r\n                            >\r\n                              <option value=\"\" hidden>\r\n                                {filteredValues.year}\r\n                              </option>\r\n                              <option value=\"All\">All</option>\r\n                              {YEARS.map((year) => {\r\n                                return (<option key={year} value={Number(year)}>\r\n                                  {year}\r\n                                </option>)\r\n                              }\r\n                              )}\r\n                            </CSelect>\r\n                          </CFormGroup>\r\n                        </CCol>\r\n                      </CRow>\r\n                    </CCol>\r\n                    <CCol  {...setWidth(\"3\")}>\r\n                      <CFormGroup>\r\n                        <CLabel htmlFor=\"status\" className=\"font-weight-bold\">\r\n                          <span>Status:</span>\r\n                        </CLabel>\r\n                        <CSelect\r\n                          custom\r\n                          disabled={isLoading}\r\n                          className=\"input-sm\"\r\n                          size=\"sm\"\r\n                          name=\"status\"\r\n                          id=\"status\"\r\n                          value={filteredValues.status || \"all\"}\r\n                          onChange={handleOnChange}\r\n                        >\r\n                          <option value=\"\" hidden>\r\n                            Select\r\n                        </option>\r\n                          <option value=\"All\">All</option>\r\n                          {Object.keys(STATUS).map((key) => {\r\n                            return (\r\n                              <option key={key} value={key}>\r\n                                {key}\r\n                              </option>\r\n                            );\r\n                          })}\r\n                        </CSelect>\r\n                      </CFormGroup>\r\n                    </CCol>\r\n                    <CCol  {...setWidth(\"3\")}>\r\n                      <CFormGroup>\r\n                        <CLabel htmlFor=\"status\" className=\"font-weight-bold\">\r\n                          <span>Category:</span>\r\n                        </CLabel>\r\n                        <CSelect\r\n                          custom\r\n                          disabled={isLoading}\r\n                          name=\"category\"\r\n                          size=\"sm\"\r\n                          value={filteredValues.category || \"\"}\r\n                          onChange={handleOnChange}\r\n                          id=\"category\"\r\n                        >\r\n                          <option value=\"\" hidden>\r\n                            Please select\r\n                        </option>\r\n                          <option value=\"All\">All</option>\r\n                          {LEAVE_TYPES.map((_category, idx) => {\r\n                            return (\r\n                              <option key={idx} value={_category}>\r\n                                {_category}\r\n                              </option>\r\n                            );\r\n                          })}\r\n                        </CSelect>\r\n                      </CFormGroup>\r\n                    </CCol>\r\n                    {/* <CCol  {...setWidth(\"2\")}>\r\n                      <CFormGroup>\r\n                        <CLabel htmlFor=\"employee\" className=\"font-weight-bold\">\r\n                          <span>Employee:</span>\r\n                        </CLabel>\r\n                        <CInput\r\n                          className=\"input-sm\"\r\n                          size=\"sm\"\r\n                          placeholder=\"Employee name\"\r\n                          name=\"employee\"\r\n                          value={filteredValues.employee.toLowerCase() === \"all\" ? \"\" : filteredValues.employee}\r\n                          onChange={handleOnChange}\r\n                        />\r\n                      </CFormGroup>\r\n                    </CCol> */}\r\n                    <CCol {...setWidth(\"2\")}>\r\n                      <CRow gutters={false}>\r\n                        <CCol>\r\n                          <CFormGroup className=\"my-0\">\r\n                            <CLabel htmlFor=\"date-input\" className=\"font-weight-bold mb-1\"></CLabel>\r\n                            <LoadingButton  {...{\r\n                              color: 'info',\r\n                              className: \"mt-2\",\r\n                              sm: true,\r\n                              block: true,\r\n                              isLoading, submit: () => {\r\n                                onFilterRequests(filteredValues)\r\n                              }, btnText: 'apply'\r\n                            }} />\r\n\r\n                            {/* <CButton block size=\"sm\" color=\"info\" onClick={}>apply</CButton> */}\r\n                          </CFormGroup>\r\n                        </CCol>\r\n                        <CCol className=\"ml-1\" >\r\n                          <CFormGroup className=\"my-0\">\r\n                            <CLabel htmlFor=\"date-input\" className=\"font-weight-bold mb-1\"></CLabel>\r\n                            <CButton block size=\"sm\" color=\"danger\" disabled={isLoading} className=\"mt-2\" onClick={() => {\r\n                              clearFilter()\r\n                            }}>clear</CButton>\r\n                          </CFormGroup>\r\n                        </CCol>\r\n                      </CRow>\r\n                    </CCol>\r\n                  </CRow>\r\n                </CCardBody>\r\n              </CCard>\r\n            </CCol>\r\n          </CRow>\r\n        </CContainer>\r\n      </CCollapse>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LeaveFilterRequest;\r\n","export default {\r\n    id: null,\r\n    name: '',\r\n    date_from: '',\r\n    date_to: '',\r\n    category: null,\r\n    reason: '',\r\n    status: 'Pending',\r\n    approver: '',\r\n    employeeID: null,\r\n    approverId: null\r\n}\r\n\r\n\r\nexport class Leave {\r\n    constructor(id, name, date_from, date_to, category, reason, approver, employeeID, approverId) {\r\n        this.id = id\r\n        this.name = name\r\n        this.date_from = date_from\r\n        this.date_to = date_to\r\n        this.category = category\r\n        this.reason = reason\r\n        this.status = 'Pending'\r\n        this.approver = approver ? approver : 'admin'\r\n        this.employeeID = employeeID\r\n        this.approverId = approverId\r\n    }\r\n\r\n    updateStatus(status) {\r\n        this.status = status\r\n    }\r\n\r\n}\r\n","import React, { useState, useEffect, useMemo, useRef } from 'react'\r\nimport {\r\n  CButton,\r\n  CCol,\r\n  CFormGroup,\r\n  CTextarea,\r\n  CInput,\r\n  CLabel,\r\n  CSelect,\r\n  CInvalidFeedback,\r\n  CSpinner,\r\n  CAlert,\r\n} from '@coreui/react'\r\nimport { Modal } from 'reusable'\r\nimport LeaveRequestModel from 'models/LeaveRequestModel'\r\nimport { shallowCopy, checkDateRange, toCapitalize, renameKey, dispatchNotification } from 'utils/helpers'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { LEAVE_TYPES, LEAVE_REQUEST_FILTER } from 'utils/constants/constant'\r\nimport { actionCreator, ActionTypes } from 'utils/actions';\r\nimport { retrieveLeaveRequests } from 'utils/helpers/fetch'\r\nimport api from 'utils/api'\r\nimport _ from 'lodash'\r\nimport moment from 'moment';\r\nconst LeaveFormRequest = ({ request }) => {\r\n  const invalidRange = 'Invalid date range';\r\n  const limitReached = 'You have reached your maximum number of leave.';\r\n\r\n  let _errors = {\r\n    dates: false,\r\n    reason: false,\r\n    category: false\r\n  }\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(state => {\r\n    let authed = state.appState.auth.user;\r\n    return {\r\n      firstname: authed.firstname,\r\n      lastname: authed.lastname,\r\n      employeeId: authed.employeeId,\r\n      userId: authed.userId,\r\n      remaining_leave: authed.remaining_leave,\r\n      accountType: authed.accountType\r\n    }\r\n  })\r\n  let departmentDetail = useSelector(state => state.appState.employee.employees.filter(emp => emp.employeeId === user.employeeId)[0])\r\n  const employeesHr = useSelector(state => {\r\n    return state.appState.employee.employees.filter(emp => {\r\n      return emp.accountType === 1\r\n    })\r\n  })\r\n\r\n  let { department_id, department_head, department_headId, isHead, isManager, deparment_IdM } = departmentDetail\r\n  const dept_head = useSelector(state => {\r\n    return state.appState.department.departments.filter(dep => {\r\n      return dep['department_id'] === department_id ? department_id : deparment_IdM\r\n    })\r\n  })\r\n\r\n  // console.log(dept_head[0].department_head_employeeId)\r\n\r\n  LeaveRequestModel.name = `${toCapitalize(user.firstname)} ${toCapitalize(user.lastname)}`\r\n  LeaveRequestModel.employeeID = user.employeeId;\r\n  // LeaveRequestModel.approverId = user.accountType === 3 ? department_headId : user.accountType === 1 ? user.employeeId : employeesHr[0].employeeId;\r\n  LeaveRequestModel.approverId = user.accountType === 3 ? department_headId : user.accountType === 1 ? user.employeeId : employeesHr[0].employeeId;\r\n  LeaveRequestModel.approver = user.accountType === 3 ? department_head : (user.accountType === 3 && isManager !== null) ? dept_head[0].department_head : user.accountType === 2 ? `${employeesHr[0].firstname} ${employeesHr[0].lastname}` : `${user.firstname} ${user.lastname}`;\r\n  // LeaveRequestModel.approver = department_head && department_head;\r\n  const modalRef = useRef()\r\n  const [data, setData] = useState(request ? request : LeaveRequestModel)\r\n  const [noOfDays, setNoOfDays] = useState(checkDateRange(data.date_from, data.date_to))\r\n  const [remainingLeave, setRemainingLeave] = useState(0)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [errors, setErrors] = useState(_errors);\r\n  const [isLimitError, toggleLimitError] = useState(false)\r\n  const [isRangeError, toggleRangeError] = useState(false)\r\n  const [placeholder, setPlaceholder] = useState('')\r\n  const validateDate = () => {\r\n    toggleLimitError(false)\r\n    toggleRangeError(false)\r\n    let checkBefore = (date) => {\r\n      if (moment(date).isBefore(moment())) {\r\n        toggleLimitError(false)\r\n        setNoOfDays(invalidRange)\r\n        toggleRangeError(true)\r\n      }\r\n    }\r\n    if (data.date_from !== \"\") {\r\n      checkBefore(data.date_from)\r\n    }\r\n\r\n    if (data.date_to !== \"\") {\r\n      checkBefore(data.date_to)\r\n    }\r\n    if (data.date_from === \"\" || data.date_to === \"\") {\r\n      return setNoOfDays(0)\r\n    }\r\n\r\n    let gap = checkDateRange(data.date_from, data.date_to);\r\n\r\n    if (gap > 0) {\r\n      if (remainingLeave < gap) {\r\n        toggleRangeError(false)\r\n        toggleLimitError(true)\r\n      }\r\n\r\n      return setNoOfDays(gap);\r\n    } else {\r\n      setNoOfDays(invalidRange)\r\n      toggleLimitError(false)\r\n      toggleRangeError(true)\r\n    }\r\n  }\r\n\r\n  const validateInfo = async () => {\r\n    let { category, date_from, date_to, reason } = data\r\n    if (category === \"\" || category === null) {\r\n      _errors.category = true;\r\n    }\r\n    if (date_from === \"\" || date_to === null || date_to === \"\" || date_from === \"\" || noOfDays === invalidRange || isLimitError) {\r\n      _errors.dates = true;\r\n    }\r\n\r\n    if (reason === \"\" || reason === null) {\r\n      if (!placeholder.length) {\r\n        _errors.reason = true;\r\n      } else {\r\n        handleOnChange({\r\n          target: {\r\n            name: 'reason',\r\n            value: placeholder\r\n          }\r\n        })\r\n      }\r\n    }\r\n    _errors.dates = invalidDate;\r\n    setErrors(_errors);\r\n    if (!Object.values(_errors).includes(true)) {\r\n      handleSubmit()\r\n    }\r\n\r\n  }\r\n\r\n  const handleOnChange = (e) => {\r\n    let key = e.target.name\r\n    let value = e.target.value\r\n    let copy = shallowCopy(data)\r\n    _errors = shallowCopy(errors)\r\n    _errors[key.includes('date_') ? 'dates' : key] = false;\r\n    setErrors(_errors);\r\n    copy[key] = value;\r\n    let _placeholder = '';\r\n    if (copy['category']) {\r\n      _placeholder = `I am having my ${copy['category']} ${(copy['date_from']) ? 'from ' + moment(copy['date_from']).format('ll') : ''} ${(copy['date_to']) ? 'until ' + moment(copy['date_to']).format('ll') : ''}`\r\n    }\r\n    if (copy['reason'].includes(`I am having my ${copy['category']}`)) {\r\n      copy['reason'] = _placeholder;\r\n    }\r\n    setPlaceholder(_placeholder)\r\n    validateDate()\r\n    setData(copy)\r\n  }\r\n  const invalidDate = useMemo(() => {\r\n    return (noOfDays <= 0 || noOfDays === invalidRange || noOfDays === limitReached)\r\n  }, [noOfDays])\r\n\r\n  const modalOnClose = () => {\r\n    setData(LeaveRequestModel)\r\n    _errors = _.mapValues(_errors, () => false);\r\n    setErrors(_errors)\r\n  }\r\n  const checkRemainingLeave = async () => {\r\n    try {\r\n      let res = await api.get(`/checkRemainingLeave/${user.employeeId}`);\r\n      if (res.error) return dispatchNotification(dispatch, { type: 'error', message: res.message });\r\n      setRemainingLeave(res.data.remaining_leave);\r\n      if (res.data.remaining_leave === 0) {\r\n        toggleLimitError(true)\r\n        setNoOfDays(limitReached)\r\n      }\r\n    } catch (error) {\r\n      return dispatchNotification(dispatch, { type: 'error', message: error.toString() })\r\n    }\r\n\r\n  }\r\n\r\n  const handleSubmit = async () => {\r\n    setIsLoading(true)\r\n    if (user.accountType === 3 && isManager) {\r\n      data.approverId = dept_head[0].department_head_employeeId\r\n      data.approver = dept_head[0].department_head\r\n    }\r\n    let res = await api.post(\"/create_request_leave\", data)\r\n    if (!res.error) {\r\n      const { employeeId, roleId } = user;\r\n      let payload = LEAVE_REQUEST_FILTER('All');\r\n      dispatch(actionCreator(ActionTypes.ADD_LEAVE_REQUEST, renameKey(res.data[0])))\r\n      retrieveLeaveRequests(dispatch)\r\n      modalRef.current.toggle()\r\n      modalOnClose()\r\n    } else {\r\n      dispatchNotification(dispatch, { type: 'error', message: res.message });\r\n    }\r\n    setIsLoading(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    validateDate()\r\n    checkRemainingLeave();\r\n  }, [data, setNoOfDays])\r\n\r\n  const actions = () => (\r\n    <>\r\n      <CButton color=\"primary\" disabled={isLoading || isLimitError || (department_id === null && isManager === null && user.accountType === 3) || (isHead === null && user.accountType === 2)} onClick={validateInfo}>\r\n        {\r\n          isLoading ? <CSpinner color=\"secondary\" size=\"sm\" /> : 'Submit'\r\n        }\r\n      </CButton>\r\n    </>\r\n  )\r\n\r\n  return (\r\n    <Modal ref={modalRef} {...{\r\n      title: `Request Leave`,\r\n      footer: actions(),\r\n      modalOnClose,\r\n      cancelBtnTitle: \"Close\",\r\n      size: \"lg\"\r\n    }}>\r\n      {(isLimitError || isRangeError) && <CAlert color=\"danger\">\r\n        <>\r\n          {\r\n            isRangeError && <><strong>Date Criteria : </strong>\r\n              <ul>\r\n                <li>Start date must be later than today.</li>\r\n                <li>Start date and End date must have difference for atleast 1 day.</li>\r\n              </ul>\r\n            </>\r\n          }\r\n          {\r\n            isLimitError && <p style={{ margin: '0' }}>{limitReached}</p>\r\n          }\r\n        </>\r\n      </CAlert>}\r\n      {<CAlert color={(!department_id && isManager === null && user.accountType === 3) || (isHead === null && user.accountType === 2) ? \"danger\" : \"info\"}>\r\n        {(department_id === null && isManager === null && user.accountType === 3) || (isHead === null && user.accountType === 2) ? \"Leave requests is available for department employees only.\" : `You still have ${user.remaining_leave} remaining leave.`}\r\n      </CAlert>}\r\n      <CFormGroup >\r\n        <CLabel>Name : </CLabel>\r\n        <CInput id=\"company\" value={data.name} disabled />\r\n      </CFormGroup>\r\n      <CFormGroup row className=\"my-0\">\r\n        <CCol xs=\"6\">\r\n          <CFormGroup >\r\n            <CLabel htmlFor=\"date-input\">Date From : </CLabel>\r\n            <CInput\r\n              type=\"date\"\r\n              disabled={(department_id === null && isManager === null && user.accountType === 3) || (isHead === null && user.accountType === 2)}\r\n              id=\"date-from\"\r\n              name=\"date_from\"\r\n              value={data.date_from}\r\n              onChange={handleOnChange}\r\n              invalid={errors.dates}\r\n              placeholder=\"Date From\" />\r\n          </CFormGroup>\r\n        </CCol>\r\n        <CCol xs=\"6\">\r\n          <CFormGroup >\r\n            <CLabel htmlFor=\"date-input\">Date To : </CLabel>\r\n            <CInput\r\n              type=\"date\"\r\n              id=\"date-to\"\r\n              disabled={(department_id === null && isManager === null && user.accountType === 3) || (isHead === null && user.accountType === 2)}\r\n              onChange={handleOnChange}\r\n              name=\"date_to\"\r\n              value={data.date_to}\r\n              invalid={errors.dates}\r\n              placeholder=\"Date To\" />\r\n          </CFormGroup>\r\n        </CCol>\r\n      </CFormGroup>\r\n      <CFormGroup row className=\"my-0\">\r\n        <CCol xs=\"6\">\r\n          <CFormGroup >\r\n            <CLabel>No of Days : </CLabel>\r\n            <CInput id=\"noofdays\" value={noOfDays} disabled />\r\n          </CFormGroup>\r\n        </CCol>\r\n        <CCol xs=\"6\">\r\n          <CFormGroup>\r\n            <CLabel htmlFor=\"Category\">Category : </CLabel>\r\n            <CSelect\r\n              custom name=\"category\"\r\n              disabled={(department_id === null && isManager === null && user.accountType === 3) || (isHead === null && user.accountType === 2)}\r\n              invalid={errors.category}\r\n              value={data.category || \"\"}\r\n              onChange={handleOnChange}\r\n              id=\"category\">\r\n              <option value=\"\" hidden>Please select</option>\r\n              {LEAVE_TYPES.map((category, idx) => {\r\n                return <option key={idx} value={category}>{category}</option>\r\n              })}\r\n            </CSelect>\r\n          </CFormGroup>\r\n        </CCol>\r\n      </CFormGroup>\r\n      <CFormGroup>\r\n        <CLabel htmlFor=\"textarea-input\">Reason : </CLabel>\r\n        <CTextarea\r\n          onChange={handleOnChange}\r\n          name=\"reason\"\r\n          disabled={(department_id === null && isManager === null && user.accountType === 3) || (isHead === null && user.accountType === 2)}\r\n          placeholder={placeholder && placeholder}\r\n          value={data.reason}\r\n          invalid={errors.reason}\r\n          rows=\"5\"\r\n        />\r\n        <CInvalidFeedback className=\"help-block\">\r\n          Please provide a valid information\r\n                  </CInvalidFeedback>\r\n      </CFormGroup>\r\n    </Modal>\r\n  )\r\n\r\n}\r\nexport default LeaveFormRequest\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport _ from 'lodash';\r\nimport {\r\n  CBadge,\r\n  CCard,\r\n  CCardBody,\r\n  CCol,\r\n  CDataTable,\r\n  CRow,\r\n  CLink,\r\n  CPopover,\r\n  CButton,\r\n  CSelect,\r\n} from \"@coreui/react\";\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport {\r\n  toCapitalize,\r\n  getAdminResponse,\r\n  respondToRequest,\r\n  plotArray,\r\n  getDuration,\r\n  dispatchNotification,\r\n  cancelRequest,\r\n  formatDate\r\n} from \"utils/helpers\";\r\nimport { LeaveRequestFilter, LeaveRequestForm } from \".\";\r\nimport NoData from \"reusable/NoData\";\r\nimport { ConfirmDialog } from \"reusable\";\r\nimport { STATUS, LEAVE_REQUEST_FILTER } from \"utils/constants/constant\";\r\nimport { ActionTypes, actionCreator } from \"utils/actions\";\r\nimport { retrieveLeaveRequests } from \"utils/helpers/fetch\";\r\nimport { config } from 'utils/config';\r\nimport moment from 'moment'\r\n\r\nconst LeaveRequests = (props) => {\r\n  const dispatch = useDispatch();\r\n  const { history, location } = props;\r\n  const query = new URLSearchParams(location.search);\r\n  const queryPage = location.search.match(/page=([0-9]+)/, \"\");\r\n  const queryStatus = query.get(\"status\");\r\n  const default_filter = LEAVE_REQUEST_FILTER(queryStatus)\r\n  const currentPage = Number(queryPage && queryPage[1] ? queryPage[1] : 1);\r\n  const [page, setPage] = useState(currentPage);\r\n  const [collapse, setCollapse] = useState(true);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [filter, setFilter] = useState(default_filter)\r\n  const [isCancel, setIsCancel] = useState(false)\r\n  const [payload, setPayload] = useState({\r\n    id: null,\r\n    status: \"\",\r\n    statusCode: null,\r\n    noOfDays: 0\r\n  });\r\n  const dialog = useRef();\r\n\r\n  const [leaveFilter, setLeaveFilter] = useState(\"emp_request\")\r\n\r\n  const requestsData = useSelector((state) => {\r\n    return state.appState.leave.leave_requests\r\n  });\r\n\r\n\r\n  const user = useSelector(state => state.appState.auth.user);\r\n\r\n  const header = [\r\n    {\r\n      key: \"name\",\r\n      _classes: \"font-weight-bold\",\r\n    },\r\n    \"date from\",\r\n    \"date to\",\r\n    {\r\n      key: \"no of days\",\r\n      label: \"Days\",\r\n      _style: { width: \"1%\" },\r\n      sorter: false,\r\n      filter: false,\r\n    },\r\n    {\r\n      key: \"category\",\r\n      sorter: false,\r\n      filter: false,\r\n    },\r\n    {\r\n      key: \"reason\",\r\n      _style: { width: \"20%\" },\r\n      sorter: false,\r\n      filter: false,\r\n    },\r\n    \"status\",\r\n    {\r\n      key: \"actions\",\r\n      label: \"Options\",\r\n      sorter: false,\r\n      filter: false,\r\n    },\r\n  ];\r\n\r\n\r\n  const getBadge = (STATUS, status) => {\r\n    return STATUS[toCapitalize(status)];\r\n  };\r\n\r\n  const pageChange = (newPage) => {\r\n    setPage(newPage);\r\n    currentPage !== newPage && goToRoute(newPage, filter.status);\r\n  };\r\n\r\n  const goToRoute = (page, status) => {\r\n    history.push(`/leave/requests?page=${page}&status=${filter.status}`);\r\n  };\r\n\r\n  const viewRequestInfo = (id) => {\r\n    history.push(`/leave/requests/${id}`);\r\n  };\r\n\r\n\r\n\r\n  const toggle = (e) => {\r\n    setCollapse(!collapse);\r\n    e.preventDefault();\r\n  };\r\n\r\n  const onClearFilter = () => {\r\n    setFilter(default_filter)\r\n    onFilterRequests(default_filter)\r\n  }\r\n\r\n  const onFilterRequests = async (_filter) => {\r\n    setFilter(_filter)\r\n    let { status, month, year, category } = _filter\r\n    let { employeeId, roleId } = user\r\n    let payload = {\r\n      month,\r\n      year,\r\n      status,\r\n      category,\r\n      employeeId,\r\n      roleId,\r\n    }\r\n    if (JSON.stringify(default_filter) !== JSON.stringify(_filter)) {\r\n      setLoading(true)\r\n      let filterRes = await retrieveLeaveRequests(dispatch, payload)\r\n      setLoading(false)\r\n      if (filterRes.error) {\r\n        dispatchNotification(dispatch, { type: 'error', message: filterRes.message })\r\n      } else {\r\n        dispatch(actionCreator(ActionTypes.FETCH_LEAVE_REQUEST, plotArray(filterRes.data.leave_requests)));\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (requestsData.length === 0) {\r\n      setCollapse(false)\r\n    }\r\n    return () => { }\r\n  }, [leaveFilter])\r\n  return (\r\n    <CRow>\r\n      <CCol xl={12}>\r\n        <ConfirmDialog\r\n          ref={dialog}\r\n          id=\"cutom_dialog\"\r\n          {...{\r\n            show: dialog,\r\n            onConfirm: () => {\r\n              if (!isCancel) {\r\n                return respondToRequest(dispatch, payload);\r\n              }\r\n              dispatch(actionCreator(ActionTypes.TOGGLE_NOTIFICATION, { type: 'info', message: \"Please wait\" }))\r\n\r\n              return cancelRequest(dispatch, payload.id)\r\n            },\r\n            title: isCancel ? \"Cancel Request?\" : `${payload.statusCode ? \"Approve\" : \"Reject\"}`,\r\n          }}\r\n        ></ConfirmDialog>\r\n        <CCard>\r\n          <CCardBody>\r\n            <CRow>\r\n              <CCol sm=\"5\">\r\n                {\r\n                  user.accountType === 3 ?\r\n                    <h4 className=\"card-title mb-0\">My Leave Requests</h4>\r\n                    :\r\n                    <CSelect\r\n                      custom\r\n                      className=\"input-md\"\r\n                      size=\"md\"\r\n                      name=\"leavefilter\"\r\n                      id=\"leavefilter\"\r\n                      value={leaveFilter}\r\n                      onChange={(e) => {\r\n                        setLeaveFilter(e.target.value)\r\n                      }}\r\n                    >\r\n                      <option value=\"emp_request\">\r\n                        {\"Employee Leave Requests\"}\r\n                      </option>\r\n                      <option value=\"my_request\">{\"My Leave Requests\"}</option>\r\n                      )}\r\n                </CSelect>\r\n                }\r\n              </CCol>\r\n              <CCol sm=\"7\" className=\"d-sm-block\">\r\n                {\r\n                  // (config.IS_DEV || user.roleId > 1 )\r\n                  (user.accountType === 1 && leaveFilter === \"my_request\") ||\r\n                    (user.accountType === 2 && leaveFilter === \"my_request\") || (user.accountType === 3) ?\r\n                    <div className=\"float-right mr-3\">\r\n                      <LeaveRequestForm />\r\n                    </div> : \"\"\r\n                }\r\n                <div className={`float-right mr-3 ${!collapse && \"mb-2\"}`} >\r\n                  <CButton\r\n                    color={`${collapse ? \"secondary\" : \"primary\"}`}\r\n                    onClick={toggle}\r\n                    className={\"mb-1\"}\r\n                  >\r\n                    {collapse ? \"Hide\" : \"Show \"} Filter\r\n                    <CIcon\r\n                      size={\"sm\"}\r\n                      name={`${\r\n                        !collapse ? \"cil-chevron-bottom\" : \"cil-chevron-top\"\r\n                        }`}\r\n                    />\r\n                  </CButton>\r\n                </div>\r\n              </CCol>\r\n            </CRow>\r\n            <CRow>\r\n              <CCol>\r\n                <LeaveRequestFilter\r\n                  {...{\r\n                    filter,\r\n                    onFilterRequests,\r\n                    onClearFilter,\r\n                    show: collapse,\r\n                    isLoading\r\n                  }}\r\n                />\r\n              </CCol>\r\n            </CRow>\r\n            <CDataTable\r\n              className=\"table-responsive mt-2\"\r\n              items={user.accountType !== 3 ? _.filter(requestsData, [`${leaveFilter === \"my_request\" ? \"employee id\" : \"approver id\"}`, user.employeeId]) : requestsData}\r\n              fields={header}\r\n              pagination\r\n              sorter\r\n              onPageChange={(e) => {\r\n                pageChange(e);\r\n              }}\r\n              activePage={page}\r\n              noItemsViewSlot={<NoData />}\r\n              clickableRows\r\n              scopedSlots={{\r\n                \"no of days\": (item) => (\r\n                  <td> {getDuration(item[\"date from\"], item[\"date to\"])}</td>\r\n                ),\r\n                reason: (item) => (\r\n                  <td>\r\n                    <p className=\"wrap-content-text\"> {item.reason}</p>\r\n                  </td>\r\n                ),\r\n                status: (item) => (\r\n                  <td>\r\n                    <CBadge color={getBadge(STATUS, item.status)}>\r\n                      {item.status}\r\n                    </CBadge>\r\n                  </td>\r\n                ),\r\n                actions: (item) => {\r\n                  let isPending = item.status.toLowerCase() === \"pending\";\r\n                  return (\r\n                    <td>\r\n                      {(item['employee id'] === user.employeeId && isPending) &&\r\n                        <CPopover header={\"cancel request\"}>\r\n                          <CLink\r\n                            onClick={() => {\r\n                              setPayload({\r\n                                id: item.id,\r\n                              });\r\n\r\n                              setIsCancel(true);\r\n                              dialog.current.toggle();\r\n                            }}\r\n                            className=\"card-header-action\"\r\n                          >\r\n                            <CIcon name=\"cil-trash\" className=\"text-danger\" />\r\n                          </CLink>\r\n                        </CPopover>}\r\n\r\n                      <CPopover header=\"View Details\">\r\n                        <CLink\r\n                          onClick={() => viewRequestInfo(item.id)}\r\n                          className=\"card-header-action\"\r\n                        >\r\n                          <CIcon name=\"cib-indeed\" className=\"text-dark \" />\r\n                          {!isPending && \"View Details\"}\r\n                        </CLink>\r\n                      </CPopover>\r\n                      {(user.roleId < 3 && isPending && leaveFilter === \"emp_request\") &&\r\n                        [\r\n                          {\r\n                            header: \"Approve\",\r\n                            code: 1,\r\n                            color: \"success\",\r\n                            icon: \"check\",\r\n                          },\r\n                          {\r\n                            header: \"Reject\",\r\n                            code: 0,\r\n                            color: \"danger\",\r\n                            icon: \"x-circle\",\r\n                          },\r\n                        ].map((el, id) => {\r\n                          return (\r\n                            <CPopover header={el.header} key={id}>\r\n                              <CLink\r\n                                onClick={() => {\r\n                                  let isBefore = moment(item[\"date from\"]).isBefore(moment());\r\n                                  setIsCancel(false);\r\n                                  setPayload({\r\n                                    noOfDays: getDuration(isBefore ? formatDate(new Date()) : item['date from'], item[\"date to\"]),\r\n                                    id: item.id,\r\n                                    status: getAdminResponse(el.code),\r\n                                    statusCode: el.code,\r\n                                    approver: user.employeeId,\r\n                                    employeeId: item['employee id']\r\n                                  });\r\n                                  dialog.current.toggle();\r\n                                }}\r\n                                className=\"card-header-action\"\r\n                              >\r\n                                <CIcon\r\n                                  name={`cil-${el.icon}`}\r\n                                  className={`text-${el.color}`}\r\n                                />\r\n                              </CLink>\r\n                            </CPopover>\r\n                          );\r\n                        })}\r\n                    </td>\r\n                  );\r\n                },\r\n              }}\r\n            />\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow >\r\n  );\r\n};\r\n\r\nexport default LeaveRequests;\r\n","import React from \"react\"\r\nimport 'react-big-calendar/lib/css/react-big-calendar.css'\r\nimport { CFormGroup, CSelect } from \"@coreui/react\";\r\nimport { MONTHS } from 'utils/constants/constant'\r\n\r\nexport let navigate = {\r\n    PREVIOUS: 'PREV',\r\n    NEXT: 'NEXT',\r\n    TODAY: 'TODAY',\r\n    DATE: 'DATE',\r\n}\r\n\r\nclass CustomToolbar extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if(this.props.clickable){\r\n            const month = MONTHS[this.props.date.getMonth()];\r\n            const year = this.props.date.getFullYear()\r\n            this.props.onMonthChange(month)\r\n            this.props.onYearChange(year)\r\n        }\r\n    }\r\n\r\n    navigate = action => {\r\n        this.props.onNavigate(action);\r\n    }\r\n    handleChange = (event) => {\r\n        this.props.onView(this.props.clickable?event.target.value:'month');\r\n    };\r\n    render() {\r\n        let { label, views, header } = this.props\r\n        let { right = true, left = true } = header\r\n        return (\r\n            <div className=\"rbc-toolbar\">\r\n                {\r\n                    left && <span className=\"rbc-btn-group\">\r\n                        <button type=\"button\" onClick={this.navigate.bind(null, navigate.PREVIOUS)}>Prev</button>\r\n                        <button type=\"button\" onClick={this.navigate.bind(null, navigate.NEXT)}>Next</button>\r\n                    </span>\r\n                }\r\n                <span className=\"rbc-toolbar-label\">{label}</span>\r\n                {\r\n                    right && <CFormGroup>\r\n                        <CSelect\r\n                            custom\r\n                            onChange={this.handleChange}>\r\n                            <option value=\"\" hidden>month</option>\r\n                            {views.map((view, idx) => {\r\n                                return <option key={idx} value={view}>{view}</option>\r\n                            })}\r\n                        </CSelect>\r\n                    </CFormGroup>\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default CustomToolbar;\r\n","import React from 'react';\r\nimport { CCard, CCardBody } from '@coreui/react';\r\n\r\nconst CalendarPopUp = ({ event = {} }) => {\r\n    let { employee, category, date_from, date_to } = event;\r\n\r\n    return (\r\n        <>\r\n            <CCard>\r\n                <CCardBody style={{ overflowY: 'auto', }}>\r\n                    <p className=\"title\">Name : <strong>{employee}</strong></p>\r\n                    <p className=\"title\">Type : <strong>{category}</strong></p>\r\n                    <p className=\"title\">Start Date : <strong>{date_from}</strong></p>\r\n                    <p className=\"title\">End Date : <strong>{date_to}</strong></p>\r\n                </CCardBody>\r\n            </CCard>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CalendarPopUp;","import React, { useRef, useState } from 'react'\r\nimport { CCard, CCardBody, CAlert } from '@coreui/react';\r\nimport CalendarToolbar from './CalendarToolbar';\r\nimport CalendarPopUp from './CalendarPopUp';\r\nimport { Modal } from 'reusable'\r\nimport { Calendar, momentLocalizer } from 'react-big-calendar'\r\nimport moment from 'moment'\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\"\r\nconst localizer = momentLocalizer(moment)\r\nconst MyCalendar = ({\r\n  header = { right: true, left: true },\r\n  events = [],\r\n  style = { height: 500 },\r\n  onYearChange,\r\n  onMonthChange,\r\n  clickable = true,\r\n  isLoading = false }) => {\r\n  const modal = useRef();\r\n  const [selected, setSelected] = useState()\r\n  return (\r\n    <div >\r\n      <Modal {...{\r\n        title: 'Leave Request Detais',\r\n        centered: true,\r\n        closeButton: true,\r\n        hideCancelButton: true,\r\n        hidden: true,\r\n        size: 'sm',\r\n        noFooter: true\r\n      }} ref={modal}>\r\n        <CalendarPopUp event={selected} />\r\n      </Modal>\r\n      <CCard>\r\n        {\r\n          isLoading && <CAlert color=\"info\">Approved will be loaded soon. Please wait.</CAlert>\r\n        }\r\n        <CCardBody>\r\n          <Calendar\r\n            localizer={localizer}\r\n            events={events}\r\n            popup\r\n            startAccessor='start'\r\n            endAccessor='end'\r\n            selectable\r\n            style={style}\r\n            defaultView={'month'}\r\n            defaultDate={events.length ? events[0]['start'] : new Date(Date.now())}\r\n            onSelectEvent={event => {\r\n              if(clickable){\r\n                setSelected(event);\r\n                modal.current.toggle();\r\n              }\r\n            }}\r\n            components={{\r\n              toolbar: (rest) => <CalendarToolbar {...rest} {...{clickable, header, onMonthChange, onYearChange }} />,\r\n            }}\r\n          />\r\n        </CCardBody>\r\n      </CCard>\r\n    </div >)\r\n}\r\n// }\r\n\r\n\r\n\r\n\r\n\r\nexport default MyCalendar\r\n","import React, { useState, useEffect } from 'react'\r\nimport Calendar from 'modules/calendar/Calendar'\r\nimport { CURRENT_MONTH, CURRENT_YEAR } from \"utils/constants/constant\";\r\nimport api from 'utils/api';\r\nimport { useDispatch } from 'react-redux';\r\nimport { plotArray } from 'utils/helpers';\r\nimport { ActionTypes, actionCreator } from 'utils/actions';\r\nconst LeaveCalendar = () => {\r\n  const [events, setEvents] = useState([])\r\n  const [month, setMonth] = useState(CURRENT_MONTH)\r\n  const [year, setYear] = useState(CURRENT_YEAR)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const dispatch = useDispatch()\r\n\r\n  const getEvents = async () => {\r\n    let payload = {\r\n      month,\r\n      year,\r\n      status: 'approved',\r\n      category: 'All',\r\n      roleId: 1,\r\n    }\r\n    setIsLoading(true)\r\n    let res = await api.post(\"/filterLeaveRequest\", payload);\r\n    setIsLoading(false)\r\n    if (!res.error) {\r\n      let { leave_requests } = res.data;\r\n      if (leave_requests.length) {\r\n        let formattedArray = leave_requests.map(request => {\r\n          let { name, category, date_from, date_to, reason } = request;\r\n          return {\r\n            id: 0,\r\n            employee: name,\r\n            category,\r\n            reason: reason,\r\n            title: `${name} : ${category} `,\r\n            allDay: true,\r\n            date_from,\r\n            date_to,\r\n            start: new Date(date_from),\r\n            end: new Date(date_to),\r\n          }\r\n        })\r\n        setEvents(formattedArray)\r\n      }\r\n    } else {\r\n      dispatch(actionCreator(ActionTypes.TOGGLE_NOTIFICATION, { type: 'error', message: \"Error in fetching data\" }));\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    getEvents()\r\n  }, [year, month]);\r\n  return <Calendar  {...{\r\n    events,\r\n    isLoading,\r\n    onMonthChange: setMonth,\r\n    onYearChange: setYear\r\n  }} />\r\n}\r\n\r\nexport default LeaveCalendar\r\n","import React, { lazy, useRef, useState } from 'react'\r\nimport { CCard, CCardBody, CCardHeader, CCol, CRow, CButtonGroup, CButton } from '@coreui/react'\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { splitCamelCase, splitSnakeCase, insertProperty, shallowCopy, getAdminResponse, getDuration, dispatchNotification, respondToRequest, cancelRequest } from 'utils/helpers'\r\nimport { NoData, ConfirmDialog } from 'reusable';\r\n\r\nconst Calendar = lazy(() => import('modules/calendar/Calendar'));\r\nconst LeaveRequest = ({ match }) => {\r\n  const dispatch = useDispatch();\r\n  const _request = useSelector(state => {\r\n    return state.appState.leave.leave_requests.filter(el => {\r\n      return el.id.toString() === match.params.id.toString()\r\n    })[0]\r\n  })\r\n  const user = useSelector(state => state.appState.auth.user)\r\n  const [response, setResponse] = useState();\r\n  const [isCancel, setIsCancel] = useState(false);\r\n  const dialog = useRef()\r\n\r\n  if (!Object.keys(_request).length) {\r\n    return <NoData />\r\n  }\r\n  let request = shallowCopy(_request);\r\n  request = insertProperty(request, 'no_of_days', getDuration(request['date from'], request['date to']), 4);\r\n  let event = {\r\n    start: new Date(request['date from']),\r\n    end: new Date(request['date to']),\r\n    title: request.category\r\n  }\r\n\r\n  const leaveDetails = request ? Object.entries(request) : []\r\n\r\n  const handleClick = (code) => {\r\n    setIsCancel(false);\r\n    let payload = {\r\n      id: request.id,\r\n      approver: user.employeeId,\r\n      status: getAdminResponse(code),\r\n      statusCode: code,\r\n      noOfDays:request['no of days'],\r\n      employeeId: request['employee id']\r\n    }\r\n    setResponse(payload);\r\n    dialog.current.toggle();\r\n  }\r\n\r\n  const renderCalendar = () => {\r\n    return <Calendar  {...{\r\n      header: {\r\n        right: false,\r\n        left: false\r\n      },\r\n      style: { height: 450 },\r\n      events: [event],\r\n      clickable: false\r\n    }} />\r\n  }\r\n  const onConfirm = () => {\r\n    if (!isCancel) {\r\n      return respondToRequest(dispatch, response)\r\n    };\r\n    return cancelRequest(dispatch, request.id);\r\n  }\r\n\r\n  return (\r\n    <CRow>\r\n      <ConfirmDialog\r\n        ref={dialog}\r\n        {...{\r\n          show: dialog,\r\n          onConfirm,\r\n          title: !isCancel ? `${response && response.status}` : 'Cancel Request?',\r\n        }}\r\n      ></ConfirmDialog>\r\n      <CCol lg={6} >\r\n        <CCard style={{ maxHeight: 500 }} >\r\n          <CCardHeader>\r\n            Leave Request ID : {match.params.id}\r\n            {(request.status === 'pending' && user.roleId !== 3) &&\r\n              <CButtonGroup style={{ float: \"right\" }}>\r\n                <CButton color=\"primary\" onClick={() => {\r\n                  handleClick(1)\r\n                }} className=\"mr-2\">Accept</CButton>\r\n                <CButton onClick={() => {\r\n                  handleClick(0)\r\n                }} color=\"danger\" className=\"mr-2\">Reject</CButton>\r\n                {\r\n                  user.employeeId === request['employee id'] && <CButton onClick={() => {\r\n                    setIsCancel(true);\r\n                    dialog.current.toggle();\r\n                  }} color=\"warning\"> Cancel</CButton>\r\n                }\r\n\r\n              </CButtonGroup>\r\n            }\r\n          </CCardHeader>\r\n          <CCardBody style={{ overflowY: 'auto', }}>\r\n            <table className=\"table table-hover \" style={{ borderBottom: \"1px solid grey\" }}>\r\n              <tbody>\r\n                {\r\n                  leaveDetails.map(([key, value], index) => {\r\n                    return ((key !== \"id\" && key.toLowerCase() !== 'employee id') &&\r\n                      <tr key={index.toString()}>\r\n                        <td className=\"text-capitalize\">  {`${splitSnakeCase(splitCamelCase(key))}:`}</td>\r\n                        <td>{\r\n                          <p className=\"wrap-content-text\" style={{\r\n                            minWidth: \"100%\"\r\n                          }}> {value ? <strong>{value}</strong> : <em>NULL</em>} </p>\r\n                        }\r\n                        </td>\r\n                      </tr>\r\n                    )\r\n                  })\r\n                }\r\n              </tbody>\r\n            </table>\r\n\r\n          </CCardBody>\r\n\r\n        </CCard>\r\n      </CCol>\r\n      <CCol lg={6} style={{ minHeight: '500px' }} className=\"d-md-down-none\">\r\n        {renderCalendar()}\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default LeaveRequest\r\n"],"sourceRoot":""}