{"version":3,"sources":["modules/forgot-password/OTP.js"],"names":["defaultMessage","ForgotPassword","props","history","isLoggedIn","useSelector","state","appState","auth","already_logged","email","sessionStorage","getItem","onOTP","useState","error","setError","message","setMessage","show","toggleShow","sending","toggleSending","OTP","setOTP","isLoading","setLoading","resendOTP","a","api","post","res","validate","validator","isNumbersOnly","length","setItem","push","to","onSubmit","e","preventDefault","color","className","type","disabled","onChange","target","value","placeholder","autoComplete","block","submit","btnText","xs","onClick"],"mappings":"oOAuBMA,EAAiB,kDAoGRC,UAlGQ,SAACC,GAAW,IACzBC,EAAYD,EAAZC,QACFC,EAAaC,aAAY,SAAAC,GACzB,OAAOA,EAAMC,SAASC,KAAKC,kBAEzBC,EAAQC,eAAeC,QAAQ,SAC/BC,EAAQF,eAAeC,QAAQ,SANP,EAOJE,qBAPI,mBAOvBC,EAPuB,KAOhBC,EAPgB,OAQAF,mBAASd,GART,mBAQvBiB,EARuB,KAQdC,EARc,OASHJ,oBAAS,GATN,mBASvBK,EATuB,KASjBC,EATiB,OAUGN,oBAAS,GAVZ,mBAUvBO,EAVuB,KAUdC,EAVc,OAWRR,mBAAS,IAXD,mBAWvBS,EAXuB,KAWlBC,EAXkB,OAYEV,oBAAS,GAZX,mBAYvBW,EAZuB,KAYZC,EAZY,KAaxBC,EAAS,uCAAG,4BAAAC,EAAA,6DACdN,GAAc,GACdJ,EAhBY,kBAcE,SAGEW,IAAIC,KAAK,kBAAmB,CAAEpB,UAHhC,UAGVqB,EAHU,OAIdT,GAAc,IACVS,EAAIhB,MALM,wBAMVG,EAAWlB,GACXgB,EAASe,EAAId,SAPH,kBAQHG,GAAW,IARR,QAUVF,EAAWlB,GAVD,iCAYPoB,GAAW,IAZJ,4CAAH,qDAcTY,EAAQ,uCAAG,4BAAAJ,EAAA,yDA5BD,mBA6BRX,EADS,oDAIRM,EAJQ,uBAKTP,EAnCY,kCA8BH,kBAMFI,GAAW,IANT,UAODa,IAAUC,cAAcX,IAAuB,IAAfA,EAAIY,OAPnC,wBAQTnB,EAAS,8BARA,kBASFI,GAAW,IATT,QAYTA,GAAW,GAZF,eAcbM,GAAW,GACXR,EA3CY,kBA4BC,UAgBGW,IAAIC,KAAK,aAAc,CAAEpB,QAAOa,QAhBnC,WAgBTQ,EAhBS,OAkBbL,GAAW,IACPK,EAAIhB,MAnBK,wBAoBTG,EAAWlB,GACXgB,EAASe,EAAId,SArBJ,kBAsBFG,GAAW,IAtBT,QAyBTF,EAAWlB,GACXW,eAAeyB,QAAQ,UAAU,GACjCjC,EAAQkC,KAAK,oBA3BJ,4CAAH,qDA+Bd,OAAK3B,GAAUG,EAIXT,EACO,kBAAC,IAAD,CAAUkC,GAAG,MAIpB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,SAAU,SAACC,GACdA,EAAEC,mBAEF,uDACA,kBAAC,IAAD,CAAQC,MAAOvB,EAAO,SAAW,QAASA,EAAOJ,EAAQE,GACzD,kBAAC,IAAD,CAAa0B,UAAU,aACnB,kBAAC,IAAD,KACI,kBAAC,IAAD,KAAiB,gCAAS,QAE9B,kBAAC,IAAD,CAAQC,KAAK,OAAOC,SAAUpB,EAAWqB,SAAU,SAACN,GAChDpB,GAAW,GACXI,EAAOgB,EAAEO,OAAOC,QACjBC,YAAY,2BAA2BD,MAAOzB,GAAO,GAAI2B,aAAa,SAE7E,kBAAC,IAAoB,CAAEC,OAAO,EAAM1B,YAAW2B,OAAQpB,EAAUqB,QAAS,WAC1E,kBAAC,KAAD,KACI,kBAAC,IAAD,CAAMC,GAAG,MAET,kBAAC,IAAD,CAAMA,GAAG,IAAIX,UAAU,mBACnB,kBAAC,IAAD,CAASE,SAAUpB,GAAaJ,EAASsB,UAAU,cAAcD,MAAM,OAAOa,QAAS,WACnFpD,EAAQkC,KAAK,YADjB,iBAGA,kBAAC,IAAD,CAASQ,SAAUpB,GAAaJ,EAASsB,UAAU,cAAcD,MAAM,OAAOa,QAAS5B,GAAvF,mBA/BT,kBAAC,IAAD,CAAUW,GAAG","file":"static/js/28.f2fce204.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\r\nimport {\r\n    CButton,\r\n    CAlert,\r\n    CCard,\r\n    CCardBody,\r\n    CCol,\r\n    CContainer,\r\n    CForm,\r\n    CInput,\r\n    CInputGroup,\r\n    CInputGroupPrepend,\r\n    CInputGroupText,\r\n    CRow\r\n} from '@coreui/react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { CenteredLayout } from 'containers';\r\nimport { Redirect } from 'react-router-dom'\r\nimport api from 'utils/api'\r\nimport { LoadingButton } from 'reusable';\r\nimport { ActionTypes, actionCreator } from 'utils/actions';\r\nimport validator from 'utils/helpers/validator'\r\nconst requiredMessage = \"Verification Code is Required.\";\r\nconst defaultMessage = 'A Verfication Code has been sent to your email.';\r\nconst waitMessage = \"Please wait...\";\r\nconst ForgotPassword = (props) => {\r\n    let { history } = props;\r\n    let isLoggedIn = useSelector(state => {\r\n        return state.appState.auth.already_logged\r\n    })\r\n    const email = sessionStorage.getItem('email')\r\n    const onOTP = sessionStorage.getItem('onOTP')\r\n    const [error, setError] = useState()\r\n    const [message, setMessage] = useState(defaultMessage)\r\n    const [show, toggleShow] = useState(false)\r\n    const [sending, toggleSending] = useState(false)\r\n    const [OTP, setOTP] = useState('')\r\n    const [isLoading, setLoading] = useState(false)\r\n    const resendOTP = async () => {\r\n        toggleSending(true)\r\n        setMessage(waitMessage);\r\n        let res = await api.post(\"/forgotPassword\", { email })\r\n        toggleSending(false)\r\n        if (res.error) {\r\n            setMessage(defaultMessage);\r\n            setError(res.message)\r\n            return toggleShow(true)\r\n        } else {\r\n            setMessage(defaultMessage);\r\n        }\r\n        return toggleShow(false)\r\n    }\r\n    const validate = async () => {\r\n        if (message === waitMessage) {\r\n            return\r\n        }\r\n        if (!OTP) {\r\n            setError(requiredMessage);\r\n            return toggleShow(true);\r\n        } else if (!validator.isNumbersOnly(OTP) || OTP.length !== 6) {\r\n            setError(\"Invalid Verification Code!\");\r\n            return toggleShow(true);\r\n        }\r\n        else {\r\n            toggleShow(false)\r\n        }\r\n        setLoading(true)\r\n        setMessage(waitMessage);\r\n        let res = await api.post(\"/verifyOTP\", { email, OTP })\r\n\r\n        setLoading(false)\r\n        if (res.error) {\r\n            setMessage(defaultMessage);\r\n            setError(res.message);\r\n            return toggleShow(true);\r\n            // dispatch(actionCreator(ActionTypes.TOGGLE_NOTIFICATION, { type: 'error', message: res.message }));\r\n        } else {\r\n            setMessage(defaultMessage);\r\n            sessionStorage.setItem(\"_isOTP\", true)\r\n            history.push(\"/change-password\")\r\n        }\r\n    }\r\n\r\n    if (!email && !onOTP) {\r\n        return <Redirect to=\"/account-recovery\" />\r\n    }\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    return (\r\n        <CenteredLayout>\r\n            <CForm onSubmit={(e) => {\r\n                e.preventDefault()\r\n            }}>\r\n                <h1>Enter Verification Code</h1>\r\n                <CAlert color={show ? \"danger\" : \"info\"}>{show ? error : message}</CAlert>\r\n                <CInputGroup className=\"mb-3 mt-3\">\r\n                    <CInputGroupPrepend>\r\n                        <CInputGroupText><strong>{'<>'}</strong></CInputGroupText>\r\n                    </CInputGroupPrepend>\r\n                    <CInput type=\"text\" disabled={isLoading} onChange={(e) => {\r\n                        toggleShow(false)\r\n                        setOTP(e.target.value)\r\n                    }} placeholder=\"6-digit Verfication Code\" value={OTP || \"\"} autoComplete=\"OTP\" />\r\n                </CInputGroup>\r\n                <LoadingButton   {...{ block: true, isLoading, submit: validate, btnText: 'Submit' }} />\r\n                <CRow>\r\n                    <CCol xs=\"4\">\r\n                    </CCol>\r\n                    <CCol xs=\"8\" className=\"text-right px-0\">\r\n                        <CButton disabled={isLoading || sending} className=\"float-right\" color=\"link\" onClick={() => {\r\n                            history.push(\"/login\")\r\n                        }}>Back to Login</CButton>\r\n                        <CButton disabled={isLoading || sending} className=\"float-right\" color=\"link\" onClick={resendOTP}>Resend Code</CButton>\r\n                    </CCol>\r\n                </CRow>\r\n            </CForm>\r\n        </CenteredLayout>\r\n    )\r\n}\r\n\r\nexport default ForgotPassword\r\n"],"sourceRoot":""}