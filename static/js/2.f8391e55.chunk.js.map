{"version":3,"sources":["modules/calendar/CalendarToolbar.js","modules/calendar/CalendarPopUp.js","modules/calendar/Calendar.js"],"names":["navigate","CustomToolbar","props","action","onNavigate","handleChange","event","onView","clickable","target","value","this","month","MONTHS","date","getMonth","year","getFullYear","onMonthChange","onYearChange","label","views","header","right","left","className","type","onClick","bind","custom","onChange","hidden","map","view","idx","key","React","Component","CalendarPopUp","employee","category","date_from","date_to","style","overflowY","localizer","momentLocalizer","moment","MyCalendar","events","height","isLoading","modal","useRef","useState","selected","setSelected","title","centered","closeButton","hideCancelButton","size","noFooter","ref","color","popup","startAccessor","endAccessor","selectable","defaultView","defaultDate","length","Date","now","onSelectEvent","current","toggle","components","toolbar","rest","CalendarToolbar"],"mappings":"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","file":"static/js/2.f8391e55.chunk.js","sourcesContent":["import React from \"react\"\r\nimport 'react-big-calendar/lib/css/react-big-calendar.css'\r\nimport { CFormGroup, CSelect } from \"@coreui/react\";\r\nimport { MONTHS } from 'utils/constants/constant'\r\n\r\nexport let navigate = {\r\n    PREVIOUS: 'PREV',\r\n    NEXT: 'NEXT',\r\n    TODAY: 'TODAY',\r\n    DATE: 'DATE',\r\n}\r\n\r\nclass CustomToolbar extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if(this.props.clickable){\r\n            const month = MONTHS[this.props.date.getMonth()];\r\n            const year = this.props.date.getFullYear()\r\n            this.props.onMonthChange(month)\r\n            this.props.onYearChange(year)\r\n        }\r\n    }\r\n\r\n    navigate = action => {\r\n        this.props.onNavigate(action);\r\n    }\r\n    handleChange = (event) => {\r\n        this.props.onView(this.props.clickable?event.target.value:'month');\r\n    };\r\n    render() {\r\n        let { label, views, header } = this.props\r\n        let { right = true, left = true } = header\r\n        return (\r\n            <div className=\"rbc-toolbar\">\r\n                {\r\n                    left && <span className=\"rbc-btn-group\">\r\n                        <button type=\"button\" onClick={this.navigate.bind(null, navigate.PREVIOUS)}>Prev</button>\r\n                        <button type=\"button\" onClick={this.navigate.bind(null, navigate.NEXT)}>Next</button>\r\n                    </span>\r\n                }\r\n                <span className=\"rbc-toolbar-label\">{label}</span>\r\n                {\r\n                    right && <CFormGroup>\r\n                        <CSelect\r\n                            custom\r\n                            onChange={this.handleChange}>\r\n                            <option value=\"\" hidden>month</option>\r\n                            {views.map((view, idx) => {\r\n                                return <option key={idx} value={view}>{view}</option>\r\n                            })}\r\n                        </CSelect>\r\n                    </CFormGroup>\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default CustomToolbar;\r\n","import React from 'react';\r\nimport { CCard, CCardBody } from '@coreui/react';\r\n\r\nconst CalendarPopUp = ({ event = {} }) => {\r\n    let { employee, category, date_from, date_to } = event;\r\n\r\n    return (\r\n        <>\r\n            <CCard>\r\n                <CCardBody style={{ overflowY: 'auto', }}>\r\n                    <p className=\"title\">Name : <strong>{employee}</strong></p>\r\n                    <p className=\"title\">Type : <strong>{category}</strong></p>\r\n                    <p className=\"title\">Start Date : <strong>{date_from}</strong></p>\r\n                    <p className=\"title\">End Date : <strong>{date_to}</strong></p>\r\n                </CCardBody>\r\n            </CCard>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CalendarPopUp;","import React, { useRef, useState } from 'react'\r\nimport { CCard, CCardBody, CAlert } from '@coreui/react';\r\nimport CalendarToolbar from './CalendarToolbar';\r\nimport CalendarPopUp from './CalendarPopUp';\r\nimport { Modal } from 'reusable'\r\nimport { Calendar, momentLocalizer } from 'react-big-calendar'\r\nimport moment from 'moment'\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\"\r\nconst localizer = momentLocalizer(moment)\r\nconst MyCalendar = ({\r\n  header = { right: true, left: true },\r\n  events = [],\r\n  style = { height: 500 },\r\n  onYearChange,\r\n  onMonthChange,\r\n  clickable = true,\r\n  isLoading = false }) => {\r\n  const modal = useRef();\r\n  const [selected, setSelected] = useState()\r\n  return (\r\n    <div >\r\n      <Modal {...{\r\n        title: 'Leave Request Detais',\r\n        centered: true,\r\n        closeButton: true,\r\n        hideCancelButton: true,\r\n        hidden: true,\r\n        size: 'sm',\r\n        noFooter: true\r\n      }} ref={modal}>\r\n        <CalendarPopUp event={selected} />\r\n      </Modal>\r\n      <CCard>\r\n        {\r\n          isLoading && <CAlert color=\"info\">Approved will be loaded soon. Please wait.</CAlert>\r\n        }\r\n        <CCardBody>\r\n          <Calendar\r\n            localizer={localizer}\r\n            events={events}\r\n            popup\r\n            startAccessor='start'\r\n            endAccessor='end'\r\n            selectable\r\n            style={style}\r\n            defaultView={'month'}\r\n            defaultDate={events.length ? events[0]['start'] : new Date(Date.now())}\r\n            onSelectEvent={event => {\r\n              if(clickable){\r\n                setSelected(event);\r\n                modal.current.toggle();\r\n              }\r\n            }}\r\n            components={{\r\n              toolbar: (rest) => <CalendarToolbar {...rest} {...{clickable, header, onMonthChange, onYearChange }} />,\r\n            }}\r\n          />\r\n        </CCardBody>\r\n      </CCard>\r\n    </div >)\r\n}\r\n// }\r\n\r\n\r\n\r\n\r\n\r\nexport default MyCalendar\r\n"],"sourceRoot":""}